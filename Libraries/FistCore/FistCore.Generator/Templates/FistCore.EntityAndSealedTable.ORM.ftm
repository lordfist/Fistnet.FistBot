<Template xmlns="http://fuzzyeye.org/FistCore/TemplateEngine/Template.xsd" >
  <Header>
    <Title>Entity and Sealed Table</Title>
    <Description>FistCore XML template which generates entity class derived from EntityModel and metadata class derived from SealedDbTable.</Description>
    <Family>ORM</Family>
  </Header>
  <Variables>
    <Variable>
      <Name>ProjectNamespace</Name>
      <Description>C# namespace for FistCore project</Description>
      <DefaultValue>MySolution.DAL</DefaultValue>
    </Variable>
    <Variable>
      <Name>ParentPrefixesToRemove</Name>
      <Description>Parent members - semicolon delimited tablename prefixes to be removed</Description>
      <DefaultValue></DefaultValue>
    </Variable>
    <Variable>
      <Name>SuffixReplacementMap</Name>
      <Description>Semicolon delimited rules for table name suffix replacement, eg: "ies"->"y";"s"->""</Description>
      <DefaultValue></DefaultValue>
    </Variable>
    <Variable>
      <Name>OutputSubdirectory</Name>
      <Description>Output subdirectory</Description>
      <DefaultValue>Entities</DefaultValue>
    </Variable>
  </Variables>
  <Settings>
    <Setting>
      <Name>FileExtension</Name>
      <Description>File extension</Description>
      <Value>cs</Value>
    </Setting>
    <Setting>
      <Name>FileNameSuffix</Name>
      <Description>Suffix appended to generated file</Description>
      <Value></Value>
    </Setting>
  </Settings>
  <ReferencedAssemblies>
    <Assembly>FistCore.Generator.OrmComponents.dll</Assembly>
    <Assembly>FistCore.Generator.DbMetaData.dll</Assembly>
  </ReferencedAssemblies>
  <Namespaces>
    <Using>System</Using>
    <Using>FistCore.Generator.OrmComponents</Using>
  </Namespaces>
  <InputComponentBuilder>
    <Assembly>FistCore.Generator.OrmComponents</Assembly>
    <Class>FistCore.Generator.OrmComponents.DbComponentBuilder</Class>
  </InputComponentBuilder>
  <TemplateSegments>
    <TemplateSegment Id="EntityRoot">
      <![CDATA[// FistCore generated entity and metadata classes for $Input.Root.Name$.
using System;
using System.Data;
using System.Configuration;
using FistCore.Common;
using FistCore.Common.Serialization;
using FistCore.Core;
using FistCore.Core.Common;
using Newtonsoft.Json;

namespace $Variables["ProjectNamespace"]$
{
	/// <summary>
	/// Entity model class for the table/view '$Input.Root.Name$'.
	/// </summary>
	[Serializable]
	public class $Input.Root.ClassPrefix()$Entity : EntityModelBase
	{
		#region Private members.

		// Members mapped to database columns.
		$Generate("PrivateMemberDeclaration", Input.GetChildren(DbComponentType.Field))$
		$WriteIf("// Members mapped to foreign keys.", Input, TableCriteria.HasForeignKeys)$$GenerateIf("PrivateFkMemberDeclaration", Input.GetChildren(DbComponentType.FK, FkCriteria.IsParentEntityGenerated), Input, TableCriteria.HasForeignKeys)$$WriteIf(Environment.NewLine, Input, TableCriteria.HasForeignKeys)$
		#endregion

		#region Protected properties.

		// Properties mapped to database columns.
		$Generate("NonFkProtectedProperty", Input.GetChildren(DbComponentType.Field, FieldCriteria.IsNotForeignKeyPart))$$WriteIf("// Properties mapped to foreign keys.", Input, TableCriteria.HasForeignKeys)$$Generate("FkProtectedProperty", Input.GetChildren(DbComponentType.Field, FieldCriteria.IsForeignKeyPart))$
		#endregion

		#region Constructors.

		/// <summary>
		/// Default constructor.
		/// </summary>
		public $Input.Root.ClassPrefix()$Entity()
			 : base(new $Input.Root.ClassPrefix()$Meta())
		{
		}

		/// <summary>
		/// Constructor. Initalizes Table property with the specified (shared) instance.
		/// </summary>
		/// <param name="dbTable">Metadata for table/view to which the entity belongs to.</param>
		public $Input.Root.ClassPrefix()$Entity($Input.Root.ClassPrefix()$Meta dbTable)
			: base(dbTable)
		{
		}
		$Generate("ConstructorsWhichInitializePk", Input, TableCriteria.HasPrimaryKey)$
		/// <summary>
		/// Constructor. Initializes members with the values in the given DataRow.
		/// </summary>
		/// <param name="row">DataRow with required columns.</param>
		/// <remarks>If row's state is <see cref="DataRowState.Unchanged"/> the entity's state will be set to <see cref="EntityState.Synchronized"/>. Other states are ignored.</remarks>
		public $Input.Root.ClassPrefix()$Entity(DataRow row)
			 : base(new $Input.Root.ClassPrefix()$Meta())
		{
			FromDataRow(row);
		}

		/// <summary>
		/// Constructor. Initializes members with the values in the given DataRow.
		/// </summary>
		/// <param name="dbTable">Metadata for table/view to which the entity belongs to.</param>
		/// <param name="row">DataRow with required columns.</param>
		/// <remarks>If row's state is <see cref="DataRowState.Unchanged"/> the entity's state will be set to <see cref="EntityState.Synchronized"/>. Other states are ignored.</remarks>
		public $Input.Root.ClassPrefix()$Entity($Input.Root.ClassPrefix()$Meta dbTable, DataRow row)
			 : base(dbTable)
		{
			FromDataRow(row);
		}

		/// <summary>
		/// Copy constructor.
		/// </summary>
		/// <param name="existing">Instance of $Input.Root.ClassPrefix()$Entity.</param>
		public $Input.Root.ClassPrefix()$Entity($Input.Root.ClassPrefix()$Entity existing)
			 : base(existing.Table)
		{
			 FromExistingEntity(existing);
		}

		static readonly Type DbTableClass = typeof($Input.Root.ClassPrefix()$Meta);

		/// <summary>
		/// Initializes all members of $Input.Root.ClassPrefix()$Entity and base EntityModelBase class. This is the fastest way to initialize entity with data from database.
		/// </summary>
		private $Input.Root.ClassPrefix()$Entity(IDbTable table, EntityState entityState$Generate("InitParametersTail", Input.GetChildren(DbComponentType.Field))$)
			 : base(table, DbTableClass, entityState)
		{$Generate("SetPrivateMember", Input.GetChildren(DbComponentType.Field))$
		}

		/// <summary>
		/// Initializes all members mapped to fields.
		/// </summary>
		protected void Init($Generate("InitParametersFirst", Input.GetChildren(DbComponentType.Field, 0, 1))$$Generate("InitParametersTail", Input.GetChildren(DbComponentType.Field, 1, int.MaxValue))$)
		{$Generate("SetProtectedProperty", Input.GetChildren(DbComponentType.Field))$
		}

		#endregion

		#region Methods.

		/// <summary>
		/// Gets the value(s) that uniquely identifiy an entity.
		/// In the order as specified in accompanying IDbTable metadata class.
		/// NULL if the parent table/view doesn't have a primary key constraint or the required fields are not set.
		/// </summary>
		public override object[] GetPrimaryKeyValue()
		{
			$Generate("GetPrimaryKeyMethodBody", Input, TableCriteria.HasPrimaryKey)$$WriteIf("return null;", Input, TableCriteria.HasNoPrimaryKey)$
		}

		/// <summary>
		/// Initializes entity members with data stored in the given DataRow.
		/// </summary>
		/// <param name="row">DataRow with the required columns.</param>
		/// <remarks>If row's state is <see cref="DataRowState.Unchanged"/> the entity's state will be set to <see cref="EntityState.Synchronized"/>. Other states are ignored.</remarks>
		public override void FromDataRow(DataRow row)
		{
			object currentColumnValue;
      $Generate("SetProtectedPropertyFromDataColumn", Input.GetChildren(DbComponentType.Field))$
			bool setEntityStateToSynchronized = (row.RowState == DataRowState.Unchanged);
			if (setEntityStateToSynchronized)
				this.EntityState = EntityState.Synchronized;
		}

		private static object TryGetColumnValue(DataRow row, string columnName)
		{
			int colIdx = row.Table.Columns.IndexOf(columnName);
			return (colIdx >= 0) ? row[colIdx] : null;
		}

		private static object GetColumnValue(DataRow row, IDbColumn column)
		{
			int colIdx = row.Table.Columns.IndexOf(column.Alias);
			if (colIdx < 0)
				colIdx = row.Table.Columns.IndexOf(column.ColumnName);
			if (colIdx < 0)
				throw new ArgumentException("DataTable doesn't contain the specified column (" + column.ColumnName + ").");

			return row[colIdx];
		}

		/// <summary>
		/// Initializes entity members with data stored in the given DataRow.
		/// </summary>
		/// <param name="row">DataRow with all or some of the columns defined in meta data.</param>
		/// <param name="fieldMetaData"><see cref="IDbTable"/> meta data object which links ADO.NET row columns to entity properties.</param>
		/// <remarks>If row's state is <see cref="DataRowState.Unchanged"/> the entity's state will be set to <see cref="EntityState.Synchronized"/>. Other states are ignored.</remarks>
		public override void FromDataRow(DataRow row, IDbTable fieldMetaData)
		{
			IDbColumn currentColumn;
			object currentColumnValue;
      $Generate("SetProtectedPropertyFromDataColumnByAlias", Input.GetChildren(DbComponentType.Field))$
			bool setEntityStateToSynchronized = (row.RowState == DataRowState.Unchanged);
			if (setEntityStateToSynchronized)
				this.EntityState = EntityState.Synchronized;
		}

		/// <summary>
		/// Converts the given DataRow to $Input.Root.ClassPrefix()$Entity.
		/// </summary>
		/// <param name="row">DataRow with required columns.</param>
		/// <remarks>If row's state is <see cref="DataRowState.Unchanged"/> the entity's state will be set to <see cref="EntityState.Synchronized"/>. Other states are ignored.</remarks>
		public static explicit operator $Input.Root.ClassPrefix()$Entity(DataRow row)
		{
			return new $Input.Root.ClassPrefix()$Entity(row);
		}

		/// <summary>
		/// Creates an array of objects containing entity data.
		/// </summary>
		/// <returns>Entity values.</returns>
		public override object[] ToObjectArray()
		{
			object[] values = new object[$Input.Root.FieldCount()$];

			$Generate("ToObjectArraySetElement", Input.GetChildren(DbComponentType.Field))$
			return values;
		}

		/// <summary>
		/// Initializes entity members with the given values.
		/// </summary>
		/// <param name="entityValues">Array with the required values.</param>
		public override void FromObjectArray(object[] entityValues)
		{$Generate("FromObjectArraySetProperty", Input.GetChildren(DbComponentType.Field))$
		}

		/// <summary>
		/// Gets the parent entity defined by the given foreign key.
		/// </summary>
		/// <param name="foreignKey">FK which must be defined in the $Input.Root.ClassPrefix()$Meta class or an exception is generated.</param>
		/// <returns>Parent entity. NULL if the FK fields haven't been set or if the entity with the given key values doesn't exist.</returns>
		public override IEntity GetParent(DbRelation foreignKey)
		{
			$Generate("GetParentIfNoFKs", Input, TableCriteria.HasNoForeignKeys)$$Generate("GetParentIfHasForeignKeys", Input, TableCriteria.HasForeignKeys)$
		}

		/// <summary>
		/// Sets the given value into the member that represents the parent entity defined by the foreign key.
		/// </summary>
		/// <param name="foreignKey">FK which must be defined in the CFunctionsMeta class or an exception is generated.</param>
		/// <param name="entity">Parent entity. May be NULL. Must be an instance of the CFunctionsEntity or a derived class.</param>
		public override void SetParent(DbRelation foreignKey, IEntity entity)
		{
			$Generate("SetParentIfNoFKs", Input, TableCriteria.HasNoForeignKeys)$$Generate("SetParentIfHasForeignKeys", Input, TableCriteria.HasForeignKeys)$
		}

		#endregion

		/// <summary>
		/// Gets typed IDbTable object for the entity's table/view.
		/// </summary>
    [JsonIgnore]
		public $Input.Root.ClassPrefix()$Meta Table
		{
			get {return ($Input.Root.ClassPrefix()$Meta) _Table;}
		}

		#region Public properties mapped to database columns.
		$Generate("PublicPropertyMappedToColumn", Input.GetChildren(DbComponentType.Field))$
		#endregion$WriteIf(Environment.NewLine, Input, TableCriteria.HasForeignKeys)$
		$WriteIf("#region Foreign key properties.\r\n", Input, TableCriteria.HasForeignKeys)$$Generate("FkEntityProperty", Input.GetChildren(DbComponentType.FK, FkCriteria.IsParentEntityGenerated))$$WriteIf("\r\n\t\t#endregion\r\n", Input, TableCriteria.HasForeignKeys)$
		#region NewEntity static methods suitable for usage in EntityBuilder<T>.

		/// <summary>Creates new entity and initializes all members of with the given values.</summary>
		/// <param name="table">Metadata for table/view to which the entity belongs to.</param>
		/// <param name="entityState">Indicates the state of entity with regard to data-source.</param>
		/// <param name="values">Array which contains values for all properties mapped to database columns in the following order: $Generate("FirstFieldName", Input.GetChildren(DbComponentType.Field, 0, 1))$$Generate("OtherFieldName", Input.GetChildren(DbComponentType.Field, 1, int.MaxValue))$.</param>
		/// <remarks>This is the fastest method to initialize an entity as it directly initializes all members of base and derived class,
		/// skips all validation checks and doesn't attempt to convert provided value data types. The method is typically used in combination
		/// with IDataConverter objects which retrieve property values directly from IDataReader objects.</remarks>
		public static $Input.Root.ClassPrefix()$Entity NewEntity(IDbTable table, EntityState entityState, object[] values)
		{
			return new $Input.Root.ClassPrefix()$Entity(table, entityState$Generate("CastArrayItem", Input.GetChildren(DbComponentType.Field))$);
		}

		/// <summary>Creates new entity and initializes members for which values are defined in the array.</summary>
		/// <param name="table">Metadata for table/view to which the entity belongs to.</param>
		/// <param name="entityState">Indicates the state of entity with regard to data-source.</param>
		/// <param name="values">Array which contains values or nulls for all properties mapped to database columns in the following order: $Generate("FirstFieldName", Input.GetChildren(DbComponentType.Field, 0, 1))$$Generate("OtherFieldName", Input.GetChildren(DbComponentType.Field, 1, int.MaxValue))$.</param>
		/// <remarks>This is the fastest method to initialize an entity as it directly initializes all members of base and derived class,
		/// skips all validation checks and doesn't attempt to convert provided value data types. The method is typically used in combination
		/// with IObjectFiller objects which retrieve property values directly from IDataReader objects.</remarks>
		public static $Input.Root.ClassPrefix()$Entity NewPartialEntity(IDbTable table, EntityState entityState, object[] values)
		{
			return new $Input.Root.ClassPrefix()$Entity(table, entityState$Generate("CastArrayItemToNullableValue", Input.GetChildren(DbComponentType.Field))$);
		}

		private static T? CastTo<T>(object val)
			where T : struct
		{
			if (IsNull(val))
				return null;
			else
				return (T)val;
		}

		private static bool IsNull(object val)
		{
			return (val == DBNull.Value || val == null);
		}

		private static object ReplaceDbNull(object dbValue)
		{
			return (dbValue != DBNull.Value) ? dbValue : null;
		}

		#endregion

		#region Private connection-transaction context.

		/// <summary>
		/// This member is only accessed and initialized through _ConnectionProvider getter.
		/// </summary>
		[NonSerialized]
		IConnectionProvider conn;

		/// <summary>
		/// Connection provider used by data-access methods. May be shared between methods.
		/// Eg. validate and save business object using the same open connection.
		/// </summary>
		protected virtual IConnectionProvider _ConnectionProvider
		{
			get
			{
				if (this.conn == null)
					this.conn = Table.Catalog.CreateConnectionProvider();
				return this.conn;
			}
			set { this.conn = value; }
		}

		#endregion

		#region IsNew.

		/// <summary>
		/// Gets the value which indicates whether the entity is new or existing, ie. retrieved from database.
		/// </summary>
    [JsonIgnore]
		public virtual bool IsNew
		{
			get
			{
				bool isNew = (this.EntityState == EntityState.New);
				return isNew;
			}
		}

		#endregion

	}

	/// <summary>
	/// Typed IDbTable class for the table/view '$Input.Name$'.
	/// </summary>
	[Serializable]
	public sealed class $Input.Root.ClassPrefix()$Meta : SealedDbTable
	{
		static $Input.Root.ClassPrefix()$Meta()
		{
			ReadSequenceOverrideFromConfig();
			ReadColumnNamesFromConfig();
			ImmutableColumnProperties = CreateImmutableColumnProperties();
			ImmutableTableProperties = CreateImmutableTableProperties();
		}

		#region Configuration.

		static readonly string[] SequenceNameOverrides = new string[$Input.Root.FieldCount()$];
		static readonly bool?[] AutoIncrementOverrides = new bool?[$Input.Root.FieldCount()$];

		private static void ReadSequenceOverrideFromConfig()
		{$Generate("ReadSequenceOverrideFromConfig", Input.GetChildren(DbComponentType.Field))$
		}

		static readonly string[] ColumnNames = new string[$Input.Root.FieldCount()$];

		private static void ReadColumnNamesFromConfig()
		{$Generate("ReadColumnNamesFromConfig", Input.GetChildren(DbComponentType.Field))$
		}

		#endregion

		#region Singleton/immutable configuration objects.

		static readonly DbColumnConfiguration[] ImmutableColumnProperties;
		static readonly DbTableConfiguration ImmutableTableProperties;

		private static DbColumnConfiguration[] CreateImmutableColumnProperties()
		{
			return new DbColumnConfiguration[]
			{$Generate("NewDbColumnConfiguration", Input.GetChildren(DbComponentType.Field))$
			};
		}

		private static DbTableConfiguration CreateImmutableTableProperties()
		{
			return new DbTableConfiguration
			(
				$Variables["ProjectNamespace"]$.Catalog.GetTableNameOverride("$Input.Root.Name$") ?? "$Input.Root.Name$",
				new $Variables["ProjectNamespace"]$.Catalog(),
				ImmutableColumnProperties,
				new int[] {$Generate("PkFirstFieldIdx", Input.GetChildren(DbComponentType.Field, 0, 1, FieldCriteria.IsPrimaryKeyPart))$$Generate("PkOtherFieldIdx", Input.GetChildren(DbComponentType.Field, 1, int.MaxValue, FieldCriteria.IsPrimaryKeyPart))$ },
				new string[] {$Generate("FkEntityPropertyNameFirst", Input.GetChildren(DbComponentType.FK, 0, 1, FkCriteria.IsParentEntityGenerated))$$Generate("FkEntityPropertyNameOther", Input.GetChildren(DbComponentType.FK, 1, int.MaxValue, FkCriteria.IsParentEntityGenerated))$ }
			);
		}

		#endregion

		#region Constructors.

		/// <summary>
		/// Initializes a new instance of $Input.Root.ClassPrefix()$Meta class.
		/// </summary>
		public $Input.Root.ClassPrefix()$Meta()
			: base(ImmutableTableProperties, null, false)
		{
		}

		/// <summary>
		/// Initializes a new instance of $Input.Root.ClassPrefix()$Meta class.
		/// </summary>
		/// <param name="alias">Object alias. If NULL then it will be equal to the table name.</param>
		public $Input.Root.ClassPrefix()$Meta(string alias)
			: base(ImmutableTableProperties, alias, false)
		{
		}

		/// <summary>
		/// Initializes a new instance of $Input.Root.ClassPrefix()$Meta class.
		/// </summary>
		/// <param name="setPrefixedColumnAliases">Whether to change aliases of all columns so that they start with prefix (usually table name).</param>
		public $Input.Root.ClassPrefix()$Meta(bool setPrefixedColumnAliases)
			: base(ImmutableTableProperties, null, setPrefixedColumnAliases)
		{
		}

		/// <summary>
		/// Initializes a new instance of $Input.Root.ClassPrefix()$Meta class.
		/// </summary>
		/// <param name="alias">Object alias. If NULL then it will be equal to the table name.</param>
		/// <param name="setPrefixedColumnAliases">Whether to change aliases of all columns so that they start with prefix (usually table name).</param>
		public $Input.Root.ClassPrefix()$Meta(string alias, bool setPrefixedColumnAliases)
			: base(ImmutableTableProperties, alias, setPrefixedColumnAliases)
		{
		}

		#endregion

		#region CreateForeignKeys.

		/// <summary>
		/// Initializes an array of relations used by foreign keys.
		/// Only relations to other generated IDbTable classes are created.
		/// </summary>
		protected override DbRelation[] CreateForeignKeys()
		{
			DbRelation[] foreignKeys = new DbRelation[$Input.Root.FkCount()$];
      $Generate("CreateDbRelation", Input.GetChildren(DbComponentType.FK, FkCriteria.IsParentEntityGenerated))$
			return foreignKeys;
		}

		#endregion

		#region New* methods.
    $Generate("NewPrimaryKeyValue", Input, TableCriteria.HasForeignKeys)$
		/// <summary>
		/// Creates a new $Input.Root.ClassPrefix()$Entity object.
		/// </summary>
		/// <returns>New entity.</returns>
		public override IEntity NewEntity()
		{
			return new $Input.Root.ClassPrefix()$Entity(this);
		}

		/// <summary>
		/// Creates a new empty EntityCollection<$Input.Root.ClassPrefix()$Entity, $Input.Root.ClassPrefix()$Meta>.
		/// </summary>
		/// <returns>Empty collection.</returns>
		public override IEntityCollection NewEntityCollection()
		{
			return new EntityCollection<$Input.Root.ClassPrefix()$Entity, $Input.Root.ClassPrefix()$Meta>(this);
		}

		/// <summary>
		/// Creates a new EntityFiller&lt;$Input.Root.ClassPrefix()$Entity&gt; object.
		/// </summary>
		/// <returns>An instance of EntityFiller&lt;$Input.Root.ClassPrefix()$Entity&gt; class.</returns>
		public override IObjectFiller NewEntityFiller()
		{
			// Use default EntityFiller<T>() constructor when targeting SQLite database or when column types are compatible/convertible, but do not exactly match, entity property types.
			return new EntityFiller<$Input.Root.ClassPrefix()$Entity>($WriteIf("); //", Variables["EntityFillerUsesExactCast"] == "N")$$Input.Root.ClassPrefix()$Entity.NewEntity);
		}

		#endregion

		#region Clone.

		/// <summary>
		/// Creates another IDbTable object for the same table/view.
		/// </summary>
		/// <param name="cloneAlias">Clone alias.</param>
		/// <returns>Clone.</returns>
		public override IDbTable Clone(string cloneAlias)
		{
			return new $Input.Root.ClassPrefix()$Meta(cloneAlias);
		}

		/// <summary>
		/// Creates another IDbTable object for the same table/view.
		/// </summary>
		/// <param name="cloneAlias">Clone alias.</param>
		/// <param name="setPrefixedAliases">Specifies whether cloned columns will have prefixed aliases.</param>
		/// <returns>Clone.</returns>
		public override IDbTable Clone(string cloneAlias, bool setPrefixedAliases)
		{
			return new $Input.Root.ClassPrefix()$Meta(cloneAlias, setPrefixedAliases);
		}

		#endregion

		#region Columns.
    $Generate("DbColumnProperty", Input.GetChildren(DbComponentType.Field))$
		#endregion

		#region Foreign keys.
		$Generate("DbRelationProperty", Input.GetChildren(DbComponentType.FK, FkCriteria.IsParentEntityGenerated))$
		#endregion

		#region Parent entity property name getters.
		$Generate("ParentEntityPropertyNameGetter", Input.GetChildren(DbComponentType.FK, FkCriteria.IsParentEntityGenerated))$
		#endregion

		#region Children.

		/// <summary>
		/// Gets tables which reference the current table.
		/// </summary>
		/// <returns>Array of tables or empty array if the current table is not referenced by other objects.</returns>
		public override IDbTable[] GetChildTables()
		{
			return new IDbTable[]
			{$Generate("NewChildTableFirst", Input.GetChildren(DbComponentType.ChildTable, 0, 1))$$Generate("NewChildTableOther", Input.GetChildren(DbComponentType.ChildTable, 1, int.MaxValue))$
			};
		}

		/// <summary>
		/// Gets relations where current table acts as a parent.
		/// </summary>
		/// <returns>Array of relations or empty array if the current table is not referenced by other objects.</returns>
		public override DbRelation[] GetChildRelations()
		{
			return new DbRelation[]
			{$Generate("NewChildRelationFirst", Input.GetChildren(DbComponentType.ChildRelation, 0, 1))$$Generate("NewChildRelationOther", Input.GetChildren(DbComponentType.ChildRelation, 1, int.MaxValue))$
			};
		}

		#endregion
	}
}
]]>
    </TemplateSegment>
    <TemplateSegment Id="PrivateMemberDeclaration">
      <![CDATA[private $Input.NullableType()$ $Input.PrivateMemberName()$;
		]]>
    </TemplateSegment>
    <TemplateSegment Id="PrivateFkMemberDeclaration">
      <![CDATA[
		private $Input.ParentClassPrefix()$Entity $Input.FkPrivateMemberName(Variables["ParentPrefixesToRemove"])$;]]>
    </TemplateSegment>
    <TemplateSegment Id="NonFkProtectedProperty">
      <![CDATA[protected $Input.NullableType()$ $Input.ProtectedMemberName()$
		{
			get
			{
				return this.$Input.PrivateMemberName()$;
			}
			$Generate("NonFkReferenceTypeProtectedSetter", Input, FieldCriteria.IsReferenceType)$$Generate("NonFkValueTypeProtectedSetter", Input, FieldCriteria.IsValueType)$
		}

		]]>
    </TemplateSegment>
    <TemplateSegment Id="NonFkReferenceTypeProtectedSetter">
      <![CDATA[set
			{
				if (this.EntityState == EntityState.Synchronized)
				{
					if (value != this.$Input.PrivateMemberName()$)
				  {
						this.EntityState = EntityState.OutOfSync;
				    this.InvalidateJsonValue();
				  }
				}
				this.$Input.PrivateMemberName()$ = value;
			}]]>
    </TemplateSegment>
    <TemplateSegment Id="NonFkValueTypeProtectedSetter">
      <![CDATA[set
			{
				if (this.EntityState == EntityState.Synchronized)
				{
					if ((!value.HasValue != !this.$Input.PrivateMemberName()$.HasValue) || (value.HasValue && (value.Value != this.$Input.PrivateMemberName()$.Value)))
				  {
						this.EntityState = EntityState.OutOfSync;
				    this.InvalidateJsonValue();
				  }
				}
				this.$Input.PrivateMemberName()$ = value;
			}]]>
    </TemplateSegment>
    <TemplateSegment Id="FkProtectedProperty">
      <![CDATA[
		protected $Input.NullableType()$ $Input.ProtectedMemberName()$
		{
			get
			{
				return this.$Input.PrivateMemberName()$;
			}
			$Generate("FkReferenceTypeProtectedSetter", Input, FieldCriteria.IsReferenceType)$$Generate("FkValueTypeProtectedSetter", Input, FieldCriteria.IsValueType)$
		}
      ]]>
    </TemplateSegment>
    <TemplateSegment Id="FkReferenceTypeProtectedSetter">
      <![CDATA[set
			{
				bool hasChanged = (value != this.$Input.PrivateMemberName()$);
				if (!hasChanged)
					return;

				if (hasChanged  && this.EntityState == EntityState.Synchronized)
				  {
						this.EntityState = EntityState.OutOfSync;
				    this.InvalidateJsonValue();
				  }

				this.$Input.PrivateMemberName()$ = value;
				this.$Input.FkPrivateMemberName(Variables["ParentPrefixesToRemove"])$ = null;
			}]]>
    </TemplateSegment>
    <TemplateSegment Id="FkValueTypeProtectedSetter">
      <![CDATA[set
			{
				bool hasChanged = (!value.HasValue != !$Input.ProtectedMemberName()$.HasValue) || (value.HasValue && (value.Value != $Input.ProtectedMemberName()$.Value));
				if (!hasChanged)
					return;

				if (hasChanged  && this.EntityState == EntityState.Synchronized)
				  {
						this.EntityState = EntityState.OutOfSync;
				    this.InvalidateJsonValue();
				  }

				this.$Input.PrivateMemberName()$ = value;
				this.$Input.FkPrivateMemberName(Variables["ParentPrefixesToRemove"])$ = null;
			}]]>
    </TemplateSegment>
    <TemplateSegment Id="ConstructorsWhichInitializePk">
      <![CDATA[
		/// <summary>
		/// Constructor. Initializes primary key. Useful for methods that don't require other values (eg. DeleteOne, SelectOne).
		/// </summary>
		public $Input.Root.ClassPrefix()$Entity($Generate("PkCtorParametersFirst", Input.GetChildren(DbComponentType.Field, 0, 1, FieldCriteria.IsPrimaryKeyPart))$$Generate("PkCtorParametersTail", Input.GetChildren(DbComponentType.Field, 1, int.MaxValue, FieldCriteria.IsPrimaryKeyPart))$)
			 : base(new $Input.Root.ClassPrefix()$Meta())
		{$Generate("SetProtectedProperty", Input.GetChildren(DbComponentType.Field, FieldCriteria.IsPrimaryKeyPart))$
		}

		/// <summary>
		/// Constructor. Initializes primary key. Useful for methods that don't require other values (eg. DeleteOne, SelectOne).
		/// </summary>
		public $Input.Root.ClassPrefix()$Entity($Input.Root.ClassPrefix()$Meta dbTable$Generate("PkCtorParametersTail", Input.GetChildren(DbComponentType.Field, FieldCriteria.IsPrimaryKeyPart))$)
			 : base(dbTable)
		{$Generate("SetProtectedProperty", Input.GetChildren(DbComponentType.Field, FieldCriteria.IsPrimaryKeyPart))$
		}
]]>
    </TemplateSegment>
    <TemplateSegment Id="PkCtorParametersFirst">
      <![CDATA[$Input.Type()$ $Input.LocalVariableName()$]]>
    </TemplateSegment>
    <TemplateSegment Id="PkCtorParametersTail">
      <![CDATA[, $Input.Type()$ $Input.LocalVariableName()$]]>
    </TemplateSegment>
    <TemplateSegment Id="SetProtectedProperty">
      <![CDATA[
			$Input.ProtectedMemberName()$ = $Input.LocalVariableName()$;]]>
    </TemplateSegment>
    <TemplateSegment Id="SetPrivateMember">
      <![CDATA[
			this.$Input.PrivateMemberName()$ = $Input.LocalVariableName()$;]]>
    </TemplateSegment>
    <TemplateSegment Id="InitParametersFirst">
      <![CDATA[$Input.NullableType()$ $Input.LocalVariableName()$]]>
    </TemplateSegment>
    <TemplateSegment Id="InitParametersTail">
      <![CDATA[, $Input.NullableType()$ $Input.LocalVariableName()$]]>
    </TemplateSegment>
    <TemplateSegment Id="GetPrimaryKeyMethodBody">
      <![CDATA[if ($Generate("ProtectedPropertyNotNull", Input.GetChildren(DbComponentType.Field, 0, 1, FieldCriteria.IsPrimaryKeyPart))$$Generate("AndProtectedPropertyNotNull", Input.GetChildren(DbComponentType.Field, 1, int.MaxValue, FieldCriteria.IsPrimaryKeyPart))$)
				return new object[] {$Generate("ProtectedPropertyValueExpressionFirst", Input.GetChildren(DbComponentType.Field, 0, 1, FieldCriteria.IsPrimaryKeyPart))$$Generate("ProtectedPropertyValueExpressionTail", Input.GetChildren(DbComponentType.Field, 1, int.MaxValue, FieldCriteria.IsPrimaryKeyPart))$};
			else
				return null;]]>
    </TemplateSegment>
    <TemplateSegment Id="ProtectedPropertyNotNull">
      <![CDATA[$Input.ProtectedMemberName()$ != null]]>
    </TemplateSegment>
    <TemplateSegment Id="AndProtectedPropertyNotNull">
      <![CDATA[ && $Input.ProtectedMemberName()$ != null]]>
    </TemplateSegment>
    <TemplateSegment Id="ProtectedPropertyValueExpressionFirst">
      <![CDATA[$Input.ProtectedMemberName()$$Input.ValueExpressionSuffix()$]]>
    </TemplateSegment>
    <TemplateSegment Id="ProtectedPropertyValueExpressionTail">
      <![CDATA[, $Input.ProtectedMemberName()$$Input.ValueExpressionSuffix()$]]>
    </TemplateSegment>
    <TemplateSegment Id="SetProtectedPropertyFromDataColumn">
      <![CDATA[
			currentColumnValue = TryGetColumnValue(row, "$Input.ColumnName()$");
			$Input.ProtectedMemberName()$ = (currentColumnValue != DBNull.Value) ? ($Input.NullableType()$) $Input.CastExpression("currentColumnValue")$ : null;
      ]]>
    </TemplateSegment>
    <TemplateSegment Id="SetProtectedPropertyFromDataColumnByAlias">
      <![CDATA[
			currentColumn = fieldMetaData.Columns.GetByPropertyName(this.Table.$Input.PublicMemberName()$.PropertyName);
			currentColumnValue = (currentColumn != null) ? GetColumnValue(row, currentColumn) : DBNull.Value;
			$Input.ProtectedMemberName()$ = (currentColumnValue != DBNull.Value) ? ($Input.NullableType()$) $Input.CastExpression("currentColumnValue")$ : null;
      ]]>
    </TemplateSegment>
    <TemplateSegment Id="ToObjectArraySetElement">
      <![CDATA[values[$Input.GetFieldIndex()$] = ($Input.ProtectedMemberName()$ != null) ? (object) $Input.ProtectedMemberName()$$Input.ValueExpressionSuffix()$ : null;
			]]>
    </TemplateSegment>
    <TemplateSegment Id="FromObjectArraySetProperty">
      <![CDATA[
			$Input.ProtectedMemberName()$ = (entityValues[$Input.GetFieldIndex()$] != null) ? ($Input.NullableType()$) $Input.ConvertFromArrayAtIndex("entityValues")$ : null;]]>
    </TemplateSegment>
    <TemplateSegment Id="GetParentIfNoFKs">
      <![CDATA[throw new Exception("No foreign keys are defined in the $Input.Root.ClassPrefix()$Meta class.");]]>
    </TemplateSegment>
    <TemplateSegment Id="GetParentIfHasForeignKeys">
      <![CDATA[IEntity parent;
			$Generate("GetParentIfHasEqualForeignKeyFieldsAs", Input.GetChildren(DbComponentType.FK, 0, 1, FkCriteria.IsParentEntityGenerated))$$Generate("GetParentElseIfHasEqualForeignKeyFieldsAs", Input.GetChildren(DbComponentType.FK, 1, int.MaxValue, FkCriteria.IsParentEntityGenerated))$
			else
				throw new Exception("Provided FK doesn't match any FK defined in the $Input.Root.ClassPrefix()$Meta class.");

			return parent;]]>
    </TemplateSegment>
    <TemplateSegment Id="GetParentIfHasEqualForeignKeyFieldsAs">
      <![CDATA[if (foreignKey.HasEqualForeignKeyFieldsAs(this.Table.$Input.FkPropertyName()$))
				parent = this.$Input.FkPublicMemberName(Variables["ParentPrefixesToRemove"])$;]]>
    </TemplateSegment>
    <TemplateSegment Id="GetParentElseIfHasEqualForeignKeyFieldsAs">
      <![CDATA[
			else if (foreignKey.HasEqualForeignKeyFieldsAs(this.Table.$Input.FkPropertyName()$))
				parent = this.$Input.FkPublicMemberName(Variables["ParentPrefixesToRemove"])$;]]>
    </TemplateSegment>
    <TemplateSegment Id="SetParentIfNoFKs">
      <![CDATA[throw new Exception("No foreign keys are defined in the $Input.Root.ClassPrefix()$Meta class.");]]>
    </TemplateSegment>
    <TemplateSegment Id="SetParentIfHasForeignKeys">
      <![CDATA[// Use public parent properties because setters set both the parent member and the members mapped to foreign key fields.
			$Generate("SetParentIfHasEqualForeignKeyFieldsAs", Input.GetChildren(DbComponentType.FK, 0, 1, FkCriteria.IsParentEntityGenerated))$$Generate("SetParentElseIfHasEqualForeignKeyFieldsAs", Input.GetChildren(DbComponentType.FK, 1, int.MaxValue, FkCriteria.IsParentEntityGenerated))$
			else
				throw new Exception("Provided FK doesn't match any FK defined in the $Input.Root.ClassPrefix()$Meta class.");]]>
    </TemplateSegment>
    <TemplateSegment Id="SetParentIfHasEqualForeignKeyFieldsAs">
      <![CDATA[if (foreignKey.HasEqualForeignKeyFieldsAs(this.Table.$Input.FkPropertyName()$))
				this.$Input.FkPublicMemberName(Variables["ParentPrefixesToRemove"])$ = ($Input.ParentClassPrefix()$Entity)entity;]]>
    </TemplateSegment>
    <TemplateSegment Id="SetParentElseIfHasEqualForeignKeyFieldsAs">
      <![CDATA[
			else if (foreignKey.HasEqualForeignKeyFieldsAs(this.Table.$Input.FkPropertyName()$))
				this.$Input.FkPublicMemberName(Variables["ParentPrefixesToRemove"])$ = ($Input.ParentClassPrefix()$Entity)entity;]]>
    </TemplateSegment>
    <TemplateSegment Id="PublicPropertyMappedToColumn">
      <![CDATA[
		/// <summary>
		/// Gets or sets the value which is mapped to the $WriteIf("non-", Input, FieldCriteria.IsNotNullable)$nullable field '$Input.ColumnName()$'.$Generate("PublicPropertyNonNullableGetterAdditionalSummary", Input, FieldCriteria.IsNotNullable, FieldCriteria.IsValueType)$
		/// </summary>
		public virtual $Input.Type()$ $Input.PublicMemberName()$
		{
			$Generate("PublicPropertyNullableOrReferenceTypeGetter", Input, FieldCriteria.IsReferenceType)$$Generate("PublicPropertyNullableOrReferenceTypeGetter", Input, FieldCriteria.IsNullable, FieldCriteria.IsValueType)$$Generate("PublicPropertyNonNullableValueTypeGetter", Input, FieldCriteria.IsNotNullable, FieldCriteria.IsValueType)$
			set
			{
				$Input.ProtectedMemberName()$ = value;
			}
		}
		]]>
    </TemplateSegment>
    <TemplateSegment Id="PublicPropertyNullableOrReferenceTypeGetter">
      <![CDATA[get
			{
				return $Input.ProtectedMemberName()$;
			}]]>
    </TemplateSegment>
    <TemplateSegment Id="PublicPropertyNonNullableValueTypeGetter">
      <![CDATA[get
			{
				if ($Input.ProtectedMemberName()$ == null)
				{
					if (this.NullCheckEnabled)
						throw new NoNullAllowedException("$Input.Root.ClassPrefix()$Entity.get_$Input.PublicMemberName()$: $Input.PublicMemberName()$ is not set yet.");
					else
						return default($Input.Type()$);
				}

				return $Input.ProtectedMemberName()$.Value;
			}]]>
    </TemplateSegment>
    <TemplateSegment Id="PublicPropertyNonNullableGetterAdditionalSummary">
      <![CDATA[
		/// If null-check is enabled a NoNullAllowedException is thrown if getter is used before the value has been set.]]>
    </TemplateSegment>
    <TemplateSegment Id="FkEntityProperty">
      <![CDATA[
		/// <summary>
		/// Gets or sets the parent $Input.ParentClassPrefix()$Entity object defined by values stored in $Generate("FkPartFirstColumn", Input.GetChildren(DbComponentType.FkColumnName, 0, 1))$$Generate("FkPartOtherColumn", Input.GetChildren(DbComponentType.FkColumnName, 1, int.MaxValue))$ column(s).
		/// Parent object must be manually fetched. This class doesn't implement automatic database navigation through relations.
		/// </summary>
		[JsonIgnore]
		public virtual $Input.ParentClassPrefix()$Entity $Input.FkPublicMemberName(Variables["ParentPrefixesToRemove"])$
		{
			get
			{
				return this.$Input.FkPrivateMemberName(Variables["ParentPrefixesToRemove"])$;
			}
			set
			{
				if (value != null)
				{$Generate("FkSetProtectedPropertyFromParentEntity", Input.GetChildren(DbComponentType.FkColumnName))$
				}
				else
				{$Generate("FkSetProtectedPropertyToNull", Input.GetChildren(DbComponentType.FkColumnName))$
				}
				this.$Input.FkPrivateMemberName(Variables["ParentPrefixesToRemove"])$ = value;
			}
		}
      ]]>
    </TemplateSegment>
    <TemplateSegment Id="FkPartFirstColumn">
      <![CDATA["$Input.Name$"]]>
    </TemplateSegment>
    <TemplateSegment Id="FkPartOtherColumn">
      <![CDATA[, "$Input.Name$"]]>
    </TemplateSegment>
    <TemplateSegment Id="FkSetProtectedPropertyFromParentEntity">
      <![CDATA[
					$Input.ProtectedChildFkProperty()$ = value.$Input.PublicParentPkProperty()$;]]>
    </TemplateSegment>
    <TemplateSegment Id="FkSetProtectedPropertyToNull">
      <![CDATA[
					$Input.ProtectedChildFkProperty()$ = null;]]>
    </TemplateSegment>
    <TemplateSegment Id="FirstFieldName">
      <![CDATA[$Input.Name$]]>
    </TemplateSegment>
    <TemplateSegment Id="OtherFieldName">
      <![CDATA[, $Input.Name$]]>
    </TemplateSegment>
    <TemplateSegment Id="CastArrayItem">
      <![CDATA[, $Generate("CastOperatorForArrayItem", Input, FieldCriteria.IsReferenceType, FieldCriteria.IsNotNullable)$$Generate("CastOperatorAndReplaceDbNullForArrayItem", Input, FieldCriteria.IsReferenceType, FieldCriteria.IsNullable)$$Generate("CastToMethodForArrayItem", Input, FieldCriteria.IsValueType, FieldCriteria.IsNullable)$$Generate("CastOperatorForArrayItem", Input, FieldCriteria.IsValueType, FieldCriteria.IsNotNullable)$]]>
    </TemplateSegment>
    <TemplateSegment Id="CastArrayItemToNullableValue">
      <![CDATA[, $Generate("CastOperatorAndReplaceDbNullForArrayItem", Input, FieldCriteria.IsReferenceType)$$Generate("CastToMethodForArrayItem", Input, FieldCriteria.IsValueType)$]]>
    </TemplateSegment>
    <TemplateSegment Id="CastOperatorForArrayItem">
      <![CDATA[($Input.Type()$)values[$Input.GetFieldIndex()$]]]>
    </TemplateSegment>
    <TemplateSegment Id="CastOperatorAndReplaceDbNullForArrayItem">
      <![CDATA[($Input.Type()$)ReplaceDbNull(values[$Input.GetFieldIndex()$])]]>
    </TemplateSegment>
    <TemplateSegment Id="CastToMethodForArrayItem">
      <![CDATA[CastTo<$(Input.Instance as FistCore.Generator.TableField).Types.Type$>(values[$Input.GetFieldIndex()$])]]>
    </TemplateSegment>
    <TemplateSegment Id="ReadSequenceOverrideFromConfig">
      <![CDATA[
			SequenceNameOverrides[$Input.GetFieldIndex()$] = ConfigurationManager.AppSettings["$Variables["ProjectNamespace"]$.$Input.Root.Name$.$Input.Name$.SequenceName"];
			AutoIncrementOverrides[$Input.GetFieldIndex()$] = (SequenceNameOverrides[$Input.GetFieldIndex()$] != null) ? (bool?)true : null;]]>
    </TemplateSegment>
    <TemplateSegment Id="ReadColumnNamesFromConfig">
      <![CDATA[
			ColumnNames[$Input.GetFieldIndex()$] = $Variables["ProjectNamespace"]$.Catalog.GetColumnNameOverride("$Input.Root.Name$", "$Input.Name$") ?? "$Input.Name$";]]>
    </TemplateSegment>
    <TemplateSegment Id="NewDbColumnConfiguration">
      <![CDATA[
				$Input.NewDbColumnConfiguration()$,]]>
    </TemplateSegment>
    <TemplateSegment Id="PkFirstFieldIdx">
      <![CDATA[ $Input.GetFieldIndex()$]]>
    </TemplateSegment>
    <TemplateSegment Id="PkOtherFieldIdx">
      <![CDATA[, $Input.GetFieldIndex()$]]>
    </TemplateSegment>
    <TemplateSegment Id="FkFirstFieldName">
      <![CDATA[ "$Input.Name$"]]>
    </TemplateSegment>
    <TemplateSegment Id="FkOtherFieldName">
      <![CDATA[, "$Input.Name$"]]>
    </TemplateSegment>
    <TemplateSegment Id="FkEntityPropertyNameFirst">
      <![CDATA["$Input.FkPublicMemberName(Variables["ParentPrefixesToRemove"])$"]]>
    </TemplateSegment>
    <TemplateSegment Id="FkEntityPropertyNameOther">
      <![CDATA[, "$Input.FkPublicMemberName(Variables["ParentPrefixesToRemove"])$"]]>
    </TemplateSegment>
    <TemplateSegment Id="NewPkPartValueFromArgument">
      <![CDATA[pkValues[$Input.GetPkPartIndex()$] = $Input.LocalVariableName()$;
			]]>
    </TemplateSegment>
    <TemplateSegment Id="NewPrimaryKeyValue">
      <![CDATA[
		/// <summary>
		/// Creates an array of objects that contains primary key values in the order as defined by this class.
		/// </summary>
		public object[] NewPrimaryKeyValue($Generate("PkCtorParametersFirst", Input.GetChildren(DbComponentType.Field, 0, 1, FieldCriteria.IsPrimaryKeyPart))$$Generate("PkCtorParametersTail", Input.GetChildren(DbComponentType.Field, 1, int.MaxValue, FieldCriteria.IsPrimaryKeyPart))$)
		{
			object[] pkValues = new object[$Input.PkCount()$];
			$Generate("NewPkPartValueFromArgument", Input.GetChildren(DbComponentType.Field, FieldCriteria.IsPrimaryKeyPart))$
			return pkValues;
		}
      ]]>
    </TemplateSegment>
    <TemplateSegment Id="DbColumnProperty">
      <![CDATA[
		/// <summary>
		/// Gets metadata for '$Input.Name$' column.
		/// </summary>
		public IDbColumn $Input.PublicMemberName()$
		{
			get {return this.Columns[$Input.GetFieldIndex()$];}
		}
			]]>
    </TemplateSegment>
    <TemplateSegment Id="CreateDbRelation">
      <![CDATA[
			$Input.ParentClassPrefix()$Meta $Input.FkPrivateMemberName(Variables["ParentPrefixesToRemove"])$ = new $Input.ParentClassPrefix()$Meta();
			foreignKeys[$Input.GetFkIndex()$] = $Input.NewDbRelation(Variables["ParentPrefixesToRemove"])$;
      ]]>
    </TemplateSegment>
    <TemplateSegment Id="DbRelationProperty">
      <![CDATA[
		/// <summary>
		/// Gets relation to $Input.ParentTableName()$ table established by $Generate("FkPartFirstColumn", Input.GetChildren(DbComponentType.FkColumnName, 0, 1))$$Generate("FkPartOtherColumn", Input.GetChildren(DbComponentType.FkColumnName, 1, int.MaxValue))$ column(s).
		/// </summary>
		[JsonIgnore]
		public DbRelation $Input.FkPropertyName()$
		{
			get {return this.ForeignKeys[$Input.GetFkIndex()$];}
		}
      ]]>
    </TemplateSegment>
    <TemplateSegment Id="ParentEntityPropertyNameGetter">
      <![CDATA[
		/// <summary>
		/// Gets the full property path for fields which belong to the "$Input.FkPublicMemberName(Variables["ParentPrefixesToRemove"])$" object. Eg: "$Input.FkPublicMemberName(Variables["ParentPrefixesToRemove"])$.Id".
		/// </summary>
		/// <param name="parentColumn">Parent entity field. If null only "$Input.FkPublicMemberName(Variables["ParentPrefixesToRemove"])$" is returned.</param>
		/// <returns>Parent entity property name followed by dot operator and parent field property name if <b>parentColumn</b> is defined; otherwise only parent entity property name.</returns>
		public string Get$Input.FkPublicMemberName(Variables["ParentPrefixesToRemove"])$Property(IDbColumn parentColumn)
		{
			return GetParentProperty($Input.GetFkIndex()$, parentColumn);
		}
      ]]>
    </TemplateSegment>
    <TemplateSegment Id="NewChildTableFirst">
      <![CDATA[
				new $Input.ClassPrefix()$Meta()]]>
    </TemplateSegment>
    <TemplateSegment Id="NewChildTableOther">
      <![CDATA[,
				new $Input.ClassPrefix()$Meta()]]>
    </TemplateSegment>
    <TemplateSegment Id="NewChildRelationFirst">
      <![CDATA[
				new $Input.ChildClassPrefix()$Meta().$Input.FkPropertyName()$]]>
    </TemplateSegment>
    <TemplateSegment Id="NewChildRelationOther">
      <![CDATA[,
				new $Input.ChildClassPrefix()$Meta().$Input.FkPropertyName()$]]>
    </TemplateSegment>
  </TemplateSegments>
</Template>