<?xml version="1.0" encoding="utf-8"?>
<Template xmlns="http://fuzzyeye.org/FistCore/TemplateEngine/Template.xsd" >
  <Header>
    <Title>AOP business object with child collections</Title>
    <Description>FistCore XML template which generates AOP business object derived from FistCore generated entity class</Description>
    <Family>ORM</Family>
  </Header>
  <Variables>
    <Variable>
      <Name>ProjectNamespace</Name>
      <Description>C# namespace which contains FistCore generated entities</Description>
      <DefaultValue>MySolution.DAL</DefaultValue>
    </Variable>
    <Variable>
      <Name>BizLayerNamespace</Name>
      <Description>C# namespace for business layer logic</Description>
      <DefaultValue>MySolution.BL</DefaultValue>
    </Variable>
    <Variable>
      <Name>ParentPrefixesToRemove</Name>
      <Description>Parent members - semicolon delimited tablename prefixes to be removed</Description>
      <DefaultValue></DefaultValue>
    </Variable>
    <Variable>
      <Name>SuffixReplacementMap</Name>
      <Description>Semicolon delimited rules for table name suffix replacement, eg: "ies"->"y";"s"->""</Description>
      <DefaultValue></DefaultValue>
    </Variable>
    <Variable>
      <Name>OutputSubdirectory</Name>
      <Description>Output subdirectory</Description>
      <DefaultValue>BizObjWithChildren</DefaultValue>
    </Variable>
  </Variables>
  <Settings>
    <Setting>
      <Name>FileExtension</Name>
      <Description>File extension</Description>
      <Value>cs</Value>
    </Setting>
    <Setting>
      <Name>FileNameSuffix</Name>
      <Description>Suffix appended to generated file</Description>
      <Value></Value>
    </Setting>
  </Settings>
  <ReferencedAssemblies>
    <Assembly>FistCore.Generator.OrmComponents.dll</Assembly>
    <Assembly>FistCore.Generator.DbMetaData.dll</Assembly>
  </ReferencedAssemblies>
  <Namespaces>
    <Using>System</Using>
    <Using>FistCore.Generator.OrmComponents</Using>
  </Namespaces>
  <InputComponentBuilder>
    <Assembly>FistCore.Generator.OrmComponents</Assembly>
    <Class>FistCore.Generator.OrmComponents.DbComponentBuilder</Class>
  </InputComponentBuilder>
  <TemplateSegments>
    <TemplateSegment Id="BizObjRoot">
      <![CDATA[using System;
using System.Collections.Generic;
using System.Linq;
using System.Text;
using FistCore.Common;
using FistCore.Common.Serialization;
using FistCore.Core;
using FistCore.Core.Common;
using System.Data;
using System.Globalization;

using $Variables["ProjectNamespace"]$;

namespace $Variables["BizLayerNamespace"]$
{
	/// <summary>$Input.Root.ClassPrefix()$.</summary>
	[Serializable]
	public class $Input.Root.ClassPrefix()$ : $Input.Root.ClassPrefix()$Entity, IBusinessObject
	{
		#region Constructors.

		/// <summary>Kreira novi prazni objekt s aktivnim statusom.</summary>
		public $Input.Root.ClassPrefix()$()
			: base()
		{
		}

		$GenerateIf("CtorsWithPK", Input, TableCriteria.HasIntegerPK)$
		/// <summary>Konvertira entitet u business object.</summary>
		protected $Input.Root.ClassPrefix()$($Input.Root.ClassPrefix()$Entity entity)
			: base(entity)
		{
		}

		#endregion

		#region Security - grant everything.

		/// <summary>
		/// Returns empty BusinessRuleCollection indicating that the actor has permissions to fetch the data requested.
		/// </summary>
		/// <param name="actor">Actor whose data-access permissions are to be checked.</param>
		/// <returns>Collection of permissions (broken rules) that the actor has failed.</returns>
		/// <remarks>Override in derived classes to add security checks.</remarks>
		public virtual BusinessRuleCollection GrantFetch(IActor actor)
		{
    	BusinessRuleCollection rules = new BusinessRuleCollection();
      BusinessRule rule = new BusinessRule("Entity_GrantFetch", actor.HasPermission(Permissions.$Input.ClassPrefix()$_Read), "Fetch denied on this object.", 1);

      rules.Add(rule);
			return rules;
		}

		/// <summary>
		/// Returns empty BusinessRuleCollection indicating that the actor has permissions to save the current object.
		/// </summary>
		/// <param name="actor">Actor whose data-access permissions are to be checked.</param>
		/// <returns>Collection of permissions (broken rules) that the actor has failed.</returns>
		/// <remarks>Override in derived classes to add security checks.</remarks>
		public virtual BusinessRuleCollection GrantSave(IActor actor)
		{
    	BusinessRuleCollection rules = new BusinessRuleCollection();
      BusinessRule rule = new BusinessRule("Entity_GrantSave", actor.HasPermission(Permissions.$Input.ClassPrefix()$_Update), "Update denied on this object.", 1);

      rules.Add(rule);
			return rules;
		}

		/// <summary>
		/// Returns empty BusinessRuleCollection indicating that the actor has permissions to delete the data requested.
		/// </summary>
		/// <param name="actor">Actor whose data-access permissions are to be checked.</param>
		/// <returns>Collection of permissions (broken rules) that the actor has failed.</returns>
		/// <remarks>Override in derived classes to add security checks.</remarks>
		public virtual BusinessRuleCollection GrantDelete(IActor actor)
		{
    	BusinessRuleCollection rules = new BusinessRuleCollection();
      BusinessRule rule = new BusinessRule("Entity_GrantDelete", actor.HasPermission(Permissions.$Input.ClassPrefix()$_Delete), "Delete denied on this object.", 1);

      rules.Add(rule);
			return rules;
		}

		/// <summary>
		/// Returns empty BusinessRuleCollection indicating that the actor has permissions to create the current object.
		/// </summary>
		/// <param name="actor">Actor whose data-access permissions are to be checked.</param>
		/// <returns>Collection of permissions (broken rules) that the actor has failed.</returns>
		/// <remarks>Override in derived classes to add security checks.</remarks>
		public virtual BusinessRuleCollection GrantCreate(IActor actor)
		{
    	BusinessRuleCollection rules = new BusinessRuleCollection();
      BusinessRule rule = new BusinessRule("Entity_GrantCreate", actor.HasPermission(Permissions.$Input.ClassPrefix()$_Insert), "Create denied on this object.", 1);

      rules.Add(rule);
			return rules;
		}

		#endregion

		#region Fetch.

		/// <summary>Fetches existing entity that with PK set.</summary>
		public virtual bool Fetch(IActor actor, DataAccessScope detailLevel)
		{
			 IEntityDAO dao = DALHelper.GetDao(this, _ConnectionProvider);
			 bool exists = dao.SelectOne(detailLevel.IncludesParents);
			 if (exists && detailLevel.IncludesChildren)
				  DbFetchChildren();

			 return exists;
		}

		/// <summary>Saves biz object if actor has required permission and if biz object is valid.</summary>
		public virtual BusinessRuleCollection FetchIfValid(IActor actor, DataAccessScope detailLevel, bool enforceSecurityChecks)
		{
				BusinessRuleCollection rules = new BusinessRuleCollection();

				// Check permissions.
				if (enforceSecurityChecks)
				    rules.Add(GrantFetch(actor));

				if (rules.HasBrokenRules)
				    return rules.GetBrokenRules();

				rules.Add(new BusinessRule("Entity_Exists", this.Fetch(actor, detailLevel), "Entity does not exist.", 1));
				return rules.GetBrokenRules();
		}

		protected virtual void DbFetchChildren()
		{$Generate("CallFetchChildren", Input.GetChildren(DbComponentType.ChildRelation, FkCriteria.ChildHasSingleFieldPk))$
		}

		#endregion

		#region Save.

			/// <summary>Saves biz object if actor has required permission.</summary>
		public virtual void Save(IActor actor)
		{
				IEntityDAO dao = DALHelper.GetDao(this, _ConnectionProvider);
				dao.Save();$Generate("CallSaveChildren", Input.GetChildren(DbComponentType.ChildRelation, FkCriteria.ChildHasSingleFieldPk))$
		}

		#endregion

		#region SaveIfValid.

		/// <summary>Saves biz object if actor has required permission and if biz object is valid.</summary>
		public virtual BusinessRuleCollection SaveIfValid(IActor actor, ValidationLevel level, bool enforceSecurityChecks)
		{
				// Validate object.
				BusinessRuleCollection rules = new BusinessRuleCollection();
				rules.Add(Validate(level));
				if (rules.HasBrokenRules)
				    return rules.GetBrokenRules();

				// Check permissions.
				if (enforceSecurityChecks && !this.IsNew)
				    rules.Add(GrantSave(actor));

				if (enforceSecurityChecks && this.IsNew)
				    rules.Add(GrantCreate(actor));

				if (rules.HasBrokenRules)
				    return rules.GetBrokenRules();

				// Save if valid and actor has all required permissions.
				Save(actor);
				return rules.GetBrokenRules();
		}
		#endregion

		#region Validate.

		/// <summary>Validates objec.</summary>
		public virtual BusinessRuleCollection Validate(ValidationLevel level)
		{
				BusinessRuleCollection rules = new BusinessRuleCollection();
				rules.Add(DALHelper.CheckEntityRules(this));
				if (rules.AllRulesAreObeyed && level > ValidationLevel.BasicFieldConstraints)
				    ValidateChildren(rules, level);

				return rules.GetBrokenRules();
		}

		protected virtual void ValidateChildren(BusinessRuleCollection rules, ValidationLevel level)
		{$Generate("CallValidateChildren", Input.GetChildren(DbComponentType.ChildRelation, FkCriteria.ChildHasSingleFieldPk))$
		}

		#endregion

		#region Delete.

		/// <summary>Deletes biz object if PK is set and if user has required permission.</summary>
		/// <exception cref="AccessViolationException">Throws access violation if user cant access, must catch</exception>
		public virtual void Delete(IActor actor)
		{
			if (GetPrimaryKeyValue() == null) throw new InvalidOperationException("ID nije postavljen.");

			DeleteChildren(actor);
			IEntityDAO dao = DALHelper.GetDao(this, _ConnectionProvider);
			dao.DeleteOne();
		}

		/// <summary>Saves biz object if actor has required permission and if biz object is valid.</summary>
		public virtual BusinessRuleCollection DeleteIfValid(IActor actor, bool enforceSecurityChecks)
		{
				BusinessRuleCollection rules = new BusinessRuleCollection();

				// Check permissions.
				if (enforceSecurityChecks)
				    rules.Add(GrantDelete(actor));

				if (rules.HasBrokenRules)
				    return rules.GetBrokenRules();

				this.Delete(actor);
				return rules.GetBrokenRules();
		}

		/// <summary>Briše child objekte ako je postavljen ID i ako korisnik ima potrebne dozvole.</summary>
		private void DeleteChildren(IActor actor)
		{
			if (GetPrimaryKeyValue() == null) throw new InvalidOperationException("ID nije postavljen.");
			this.DbFetchChildren();
			$Generate("CallDeleteChildren", Input.GetChildren(DbComponentType.ChildRelation, FkCriteria.ChildHasSingleFieldPk))$

		}

		#endregion

		#region ConvertEntitiesToBusinessObjects.

		/// <summary>Non-business object elemente kolekcije konvertira u business objekte.</summary>
		public static void ConvertEntitiesToBusinessObjects(IEntityCollection entities)
		{
			for (int i = 0; i < entities.Count; i++)
			{
				$Input.Root.ClassPrefix()$Entity entity = ($Input.Root.ClassPrefix()$Entity)entities[i];
				bool isBizObject = (entity is IBusinessObject);
				if (!isBizObject)
					entities[i] = new $Input.Root.ClassPrefix()$(entity);
			}
		}

		/// <summary>Po potrebi konvertira entity u business objekt.</summary>
		public static $Input.Root.ClassPrefix()$ ConvertEntityToBusinessObject($Input.Root.ClassPrefix()$Entity entity)
		{
			$Input.Root.ClassPrefix()$ bizobj = entity as $Input.Root.ClassPrefix()$;
			if (bizobj == null)
				bizobj = new $Input.Root.ClassPrefix()$(entity);

			return bizobj;
		}

		#endregion

		#region New$Input.Root.ClassPrefix()$.

		/// <summary>Kreira novi objekt i postavlja default vrijednosti.</summary>
		public static $Input.Root.ClassPrefix()$ New$Input.Root.ClassPrefix()$(IActor creator)
		{
			var newObject = new $Input.Root.ClassPrefix()$($WriteIf("-1", Input, TableCriteria.HasIntegerPK)$)
			{
				NullCheckEnabled = false
			};

			return newObject;
		}

		#endregion$Generate("Children", Input.GetChildren(DbComponentType.ChildRelation, FkCriteria.ChildHasSingleFieldPk))$
	}
}
]]>
    </TemplateSegment>
    <TemplateSegment Id="PublicPropertyName">
      <![CDATA[$Input.PublicMemberName()$]]>
    </TemplateSegment>
    <TemplateSegment Id="CtorsWithPK">
      <![CDATA[
		/// <summary>Inicijalizira postojeći entitet i postavlja mu ID. Ostala polja se ne inicijaliziraju.</summary>
		public $Input.Root.ClassPrefix()$(int id)
			: base(id)
		{
		}

]]>
    </TemplateSegment>
    <TemplateSegment Id="CallFetchChildren">
      <![CDATA[
			DbFetch$Input.ChildClassPrefix()$Children$Input.UniqueChildSuffix()$();]]>
    </TemplateSegment>
    <TemplateSegment Id="CallSaveChildren">
      <![CDATA[
			DbSave$Input.ChildClassPrefix()$Children$Input.UniqueChildSuffix()$();]]>
    </TemplateSegment>
    <TemplateSegment Id="CallDeleteChildren">
      <![CDATA[
			DbDelete$Input.ChildClassPrefix()$Children$Input.UniqueChildSuffix()$();]]>
    </TemplateSegment>
    <TemplateSegment Id="CallValidateChildren">
      <![CDATA[
			rules.Add(Validate$Input.ChildClassPrefix()$Children$Input.UniqueChildSuffix()$(level));]]>
    </TemplateSegment>
    <TemplateSegment Id="Children">
      <![CDATA[

		#region $Input.ChildClassPrefix()$Children$Input.UniqueChildSuffix()$.

		EntityCollection<$Input.ChildClassPrefix()$Entity, $Input.ChildClassPrefix()$Meta> items$Input.ChildClassPrefixCamelCase()$$Input.UniqueChildSuffix()$ = new EntityCollection<$Input.ChildClassPrefix()$Entity, $Input.ChildClassPrefix()$Meta>();
		private int[] old$Input.ChildClassPrefix()$Children$Input.UniqueChildSuffix()$IDs = new int[0];

		/// <summary>$Input.ChildClassPrefix()$Children$Input.UniqueChildSuffix()$.</summary>
		public EntityCollection<$Input.ChildClassPrefix()$Entity, $Input.ChildClassPrefix()$Meta> $Input.ChildClassPrefix()$Children$Input.UniqueChildSuffix()$
		{
			get { return this.items$Input.ChildClassPrefixCamelCase()$$Input.UniqueChildSuffix()$; }
			set { this.items$Input.ChildClassPrefixCamelCase()$$Input.UniqueChildSuffix()$ = value; }
		}

		private void SetOld$Input.ChildClassPrefix()$Children$Input.UniqueChildSuffix()$IDs()
		{
			$WriteIf("//", !FkCriteria.ChildHasSingleFieldIntegerPk(Input))$this.old$Input.ChildClassPrefix()$Children$Input.UniqueChildSuffix()$IDs = ArrayUtil.ToArray<int, $Input.ChildClassPrefix()$Entity>(this.$Input.ChildClassPrefix()$Children$Input.UniqueChildSuffix()$, (child) => child.$Input.ChildPkPropertyName(0)$);$WriteIf("\r\n\t\t\tthrow new NotImplementedException(\"Table has no simple PK. Manual edit needed.\");", !FkCriteria.ChildHasSingleFieldIntegerPk(Input))$
		}

		protected void DbFetch$Input.ChildClassPrefix()$Children$Input.UniqueChildSuffix()$()
		{
			$Input.ChildClassPrefix()$Meta itemMeta = new $Input.ChildClassPrefix()$Meta();
			SelectStatement select = new SelectStatement(itemMeta);
			select.Where.Add(itemMeta.$Input.FkPropertyName()$.ChildForeignKey[0], this.GetPrimaryKeyValue()[0]);

			this.$Input.ChildClassPrefix()$Children$Input.UniqueChildSuffix()$ = (EntityCollection<$Input.ChildClassPrefix()$Entity, $Input.ChildClassPrefix()$Meta>)select.Execute();

			SetOld$Input.ChildClassPrefix()$Children$Input.UniqueChildSuffix()$IDs();
		}

		/// <summary>Ensures the collection $Input.ChildClassPrefix()$Children$Input.UniqueChildSuffix()$.</summary>
		public void Ensure$Input.ChildClassPrefix()$Children$Input.UniqueChildSuffix()$()
		{
			if (!this.IsNew && ArrayUtil.IsNullOrEmpty(this.$Input.ChildClassPrefix()$Children$Input.UniqueChildSuffix()$))
				DbFetch$Input.ChildClassPrefix()$Children$Input.UniqueChildSuffix()$();
		}

		/// <summary>Saves collection $Input.ChildClassPrefix()$Children$Input.UniqueChildSuffix()$ to database.</summary>
		protected void DbSave$Input.ChildClassPrefix()$Children$Input.UniqueChildSuffix()$()
		{
			this.$Input.ChildClassPrefix()$Children$Input.UniqueChildSuffix()$.SetParents(this.$Input.ChildClassPrefix()$Children$Input.UniqueChildSuffix()$.Table.$Input.FkPropertyName()$, this, /*shared*/ true);

			DALHelper.GetDao<$Input.ChildClassPrefix()$Entity>(_ConnectionProvider).SaveCollection(this.$Input.ChildClassPrefix()$Children$Input.UniqueChildSuffix()$);

			foreach (int item in this.old$Input.ChildClassPrefix()$Children$Input.UniqueChildSuffix()$IDs)
			{
				if (!ArrayUtil.Exists<$Input.ChildClassPrefix()$Entity>(this.$Input.ChildClassPrefix()$Children$Input.UniqueChildSuffix()$, x=>(int)x.GetPrimaryKeyValue()[0] == item))
				{
					$Input.ChildClassPrefix()$ bizItem = new $Input.ChildClassPrefix()$(item);
					bizItem.Delete(null);
					bizItem = null;
				}
			}

			SetOld$Input.ChildClassPrefix()$Children$Input.UniqueChildSuffix()$IDs();
		}

		/// <summary>Deletes whole collection.</summary>
		protected void DbDelete$Input.ChildClassPrefix()$Children$Input.UniqueChildSuffix()$()
		{
			$Input.ChildClassPrefix()$ bizItem;

			foreach ($Input.ChildClassPrefix()$Entity item in this.$Input.ChildClassPrefix()$Children$Input.UniqueChildSuffix()$)
			{
				bizItem = $Input.ChildClassPrefix()$.ConvertEntityToBusinessObject(item);

				if (!bizItem.IsNew)
				{
					bizItem.Delete(null);
					bizItem = null;
				}
			}
			this.$Input.ChildClassPrefix()$Children$Input.UniqueChildSuffix()$ = new EntityCollection<$Input.ChildClassPrefix()$Entity, $Input.ChildClassPrefix()$Meta>();
			this.old$Input.ChildClassPrefix()$Children$Input.UniqueChildSuffix()$IDs = new int[0];
		}

		/// <summary>Validates collection $Input.ChildClassPrefix()$Children$Input.UniqueChildSuffix()$.</summary>
		protected BusinessRuleCollection Validate$Input.ChildClassPrefix()$Children$Input.UniqueChildSuffix()$(ValidationLevel level)
		{
            BusinessRuleCollection rules = new BusinessRuleCollection();
            $Input.ChildClassPrefix()$.ConvertEntitiesToBusinessObjects(this.$Input.ChildClassPrefix()$Children$Input.UniqueChildSuffix()$);
            foreach (IBusinessObject bizobj in this.$Input.ChildClassPrefix()$Children$Input.UniqueChildSuffix()$)
                rules.Add(bizobj.Validate(level));

            return rules.GetBrokenRules();
		}

		/// <summary>Initalizes new $Input.ChildClassPrefix()$ child object. Not added to collection.</summary>
		public static $Input.ChildClassPrefix()$ New$Input.ChildClassPrefix()$Children$Input.UniqueChildSuffix()$($Input.Root.ClassPrefix()$ parent)
		{
			var newItem = new $Input.ChildClassPrefix()$();
			newItem.NullCheckEnabled = false;
			newItem.$Input.ChildPkPropertyName(0)$ = ArrayUtil.NextNegativeId<$Input.ChildClassPrefix()$Entity>(parent.$Input.ChildClassPrefix()$Children$Input.UniqueChildSuffix()$, (item) => (item.$Input.ChildPkPropertyName(0)$));
			newItem.SetParent(newItem.Table.$Input.FkPropertyName()$, parent);

			return newItem;
		}

		#endregion]]>
    </TemplateSegment>
    <TemplateSegment Id="CommaStatusActive">
      <![CDATA[, this.$Input.ChildClassPrefix()$Children$Input.UniqueChildSuffix()$.Table.Status, RecordStatus.Active]]>
    </TemplateSegment>
  </TemplateSegments>
</Template>