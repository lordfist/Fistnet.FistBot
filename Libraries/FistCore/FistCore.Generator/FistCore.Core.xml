<?xml version="1.0"?>
<doc>
    <assembly>
        <name>FistCore.Core</name>
    </assembly>
    <members>
        <member name="T:FistCore.Core.BlobEntityFiller`1">
            <summary>Builds LOB entity objects from retrieved data using provided <b>CreateEntity</b> method.</summary>
        </member>
        <member name="T:FistCore.Core.IObjectFiller">
            <summary>Builds objects from retrieved data, ie. <see cref="T:System.Data.IDataReader"/>.</summary>
        </member>
        <member name="M:FistCore.Core.IObjectFiller.FillCollection(System.Data.IDataReader,System.Collections.IList)">
            <summary>Builds objects from retrieved data.</summary>
            <param name="openedDataReader">Opened data reader that contains all fields required to build objects.</param>
            <param name="collection">A collection to fill with objects built from data.</param>
        </member>
        <member name="T:FistCore.Core.IBlobFiller">
            <summary>BLOB aware filler hint.</summary>
        </member>
        <member name="M:FistCore.Core.BlobEntityFiller`1.#ctor">
            <summary>Initializes a new instance of <b>EntityFiller</b> class.</summary>
        </member>
        <member name="M:FistCore.Core.BlobEntityFiller`1.#ctor(FistCore.Core.EntityInitializer{`0})">
            <summary>Initializes a new instance of <b>EntityFiller</b> class.</summary>
            <param name="createEntityMethod">Method delegate that creates entities.
            If <b>null</b> is provided then default implementation that uses reflection and <see cref="M:FistCore.Core.IEntity.FromObjectArray(System.Object[])"/> method will be used.</param>
        </member>
        <member name="M:FistCore.Core.BlobEntityFiller`1.FillCollection(System.Data.IDataReader,System.Collections.IList)">
            <summary>Builds objects from retrieved data.</summary>
            <param name="openedDataReader">Opened data reader that contains all fields required to build objects.</param>
            <param name="collection">A collection to fill with objects built from data.</param>
        </member>
        <member name="M:FistCore.Core.BlobEntityFiller`1.FillGenericCollection(System.Data.IDataReader,System.Collections.Generic.ICollection{`0})">
            <summary>Builds entites from retrieved data using <see cref="M:FistCore.Core.IEntity.FromObjectArray(System.Object[])"/> method.</summary>
            <param name="openedDataReader">Opened data reader that contains all fields required to initialize entities.</param>
            <param name="collection">A collection to fill with entities built from data.</param>
        </member>
        <member name="M:FistCore.Core.BlobEntityFiller`1.GetColumnNamesSortedForUsageInFromObjectArray">
            <summary>Gets table column names sorted in the same order as they are initialized in entity's <see cref="M:FistCore.Core.IEntity.FromObjectArray(System.Object[])"/> method.</summary>
            <returns>Array of columns names ordered in same way as <see cref="P:FistCore.Core.IDbTable.Columns"/> collection.</returns>
            <remarks><para>Default implementation assumes that the order of field initialization in <b>FromObjectArray</b> method
            equals the order of items in <see cref="P:FistCore.Core.IDbTable.Columns"/> collection. In case that this not true then this
            method must be overrided and it has to return column names ordered in same way as object array in the <b>FromObjectArray</b>
            are accessed.</para>
            <para>Templates shipped with FistCore generator generate code that read object array in the same order as definied
            in <see cref="P:FistCore.Core.IDbTable.Columns"/> collection.</para></remarks>
        </member>
        <member name="P:FistCore.Core.BlobEntityFiller`1.CreateEntity">
            <summary>Sets method that creates entities.</summary>
            <value>Delegate. Default is <b>null</b> which means that default implementation that uses reflection and <see cref="M:FistCore.Core.IEntity.FromObjectArray(System.Object[])"/> method will be used.</value>
        </member>
        <member name="T:FistCore.Core.ProviderComponents.GenericLikeRenderer">
            <summary>Renders LIKE predicate as SQL element.</summary>
        </member>
        <member name="T:FistCore.Core.ProviderComponents.ILikePredicateRenderer">
            <summary>Renders LIKE predicate as SQL element.</summary>
        </member>
        <member name="M:FistCore.Core.ProviderComponents.ILikePredicateRenderer.Render(FistCore.Core.LikePredicate,FistCore.Core.DbmsType,System.Text.StringBuilder,FistCore.Core.DbParameterCollection)">
            <summary>Renders LIKE predicate as SQL element.</summary>
            <param name="like">Like predicate.</param>
            <param name="dbms">Target DBMS.</param>
            <param name="output">StringBuilder to which SQL is appended.</param>
            <param name="parameters">SQL parameter collection to which the object's and its children's
            parameters are added. After the rendering is done the collection contains all parameters with unique names.</param>
        </member>
        <member name="M:FistCore.Core.ProviderComponents.GenericLikeRenderer.Render(FistCore.Core.LikePredicate,FistCore.Core.DbmsType,System.Text.StringBuilder,FistCore.Core.DbParameterCollection)">
            <summary>Renders LIKE predicate as SQL element.</summary>
            <param name="like">Like predicate.</param>
            <param name="dbms">Target DBMS.</param>
            <param name="output">StringBuilder to which SQL is appended.</param>
            <param name="parameters">SQL parameter collection to which the object's and its children's
            parameters are added. After the rendering is done the collection contains all parameters with unique names.</param>
        </member>
        <member name="T:FistCore.Core.ProviderComponents.GenericDbmsComponents">
            <summary>Provides methods that create generic/default implementation of interfaces for DBMS specific provider components.</summary>
        </member>
        <member name="M:FistCore.Core.ProviderComponents.GenericDbmsComponents.NewParameterRenderer">
            <summary>Gets default/generic implementation of <see cref="T:FistCore.Core.ProviderComponents.IParameterRenderer"/> that uses positional parameters, ie. question marks instead of paramater names.</summary>
            <returns>An instance of <see cref="T:FistCore.Core.ProviderComponents.GenericParameterRenderer"/> class.</returns>
        </member>
        <member name="M:FistCore.Core.ProviderComponents.GenericDbmsComponents.NewFunctionRenderer">
            <summary>Gets default/generic implementation of <see cref="T:FistCore.Core.ProviderComponents.IFunctionRenderer"/>.</summary>
            <returns>An instance of <see cref="T:FistCore.Core.ProviderComponents.GenericFunctionRenderer"/> class.</returns>
        </member>
        <member name="M:FistCore.Core.ProviderComponents.GenericDbmsComponents.NewAggregateFunctionRenderer">
            <summary>Gets default/generic implementation of <see cref="T:FistCore.Core.ProviderComponents.IAggregateFunctionRenderer"/>.</summary>
            <returns>An instance of <see cref="T:FistCore.Core.ProviderComponents.GenericAggregateFunctionRenderer"/> class.</returns>
        </member>
        <member name="M:FistCore.Core.ProviderComponents.GenericDbmsComponents.NewColumnRenderer">
            <summary>Gets default/generic implementation of <see cref="T:FistCore.Core.ProviderComponents.IColumnRenderer"/>. Blanks and special characters are not handled.</summary>
            <returns>An instance of <see cref="T:FistCore.Core.ProviderComponents.GenericColumnRenderer"/> class.</returns>
        </member>
        <member name="M:FistCore.Core.ProviderComponents.GenericDbmsComponents.NewTableRenderer">
            <summary>Gets default/generic implementation of <see cref="T:FistCore.Core.ProviderComponents.ITableRenderer"/>. Blanks and special characters are not handled.</summary>
            <returns>An instance of <see cref="T:FistCore.Core.ProviderComponents.GenericTableRenderer"/> class.</returns>
        </member>
        <member name="M:FistCore.Core.ProviderComponents.GenericDbmsComponents.NewContainsPredicateRenderer">
            <summary>Gets default/generic implementation of <see cref="T:FistCore.Core.ProviderComponents.IContainsPredicateRenderer"/> that generates compatibile LIKE predicates.</summary>
            <returns>An instance of <see cref="T:FistCore.Core.ProviderComponents.ContainsAsLikePredicateRenderer"/> class.</returns>
        </member>
        <member name="M:FistCore.Core.ProviderComponents.GenericDbmsComponents.NewLikePredicateRenderer">
            <summary>Gets default/generic implementation of <see cref="T:FistCore.Core.ProviderComponents.ILikePredicateRenderer"/>.</summary>
            <returns>An instance of <see cref="T:FistCore.Core.ProviderComponents.GenericLikeRenderer"/> class.</returns>
        </member>
        <member name="M:FistCore.Core.ProviderComponents.GenericDbmsComponents.NewFromClauseRenderer">
            <summary>Gets default/generic implementation of <see cref="T:FistCore.Core.ProviderComponents.IFromClauseRenderer"/>.</summary>
            <returns>An instance of <see cref="T:FistCore.Core.ProviderComponents.GenericFromClauseRenderer"/> class.</returns>
        </member>
        <member name="M:FistCore.Core.ProviderComponents.GenericDbmsComponents.NewSelectRenderer">
            <summary>Gets default/generic implementation of <see cref="T:FistCore.Core.ProviderComponents.ISelectRenderer"/> that ignores <see cref="P:FistCore.Core.SelectStatement.Top"/> property.</summary>
            <returns>An instance of <see cref="T:FistCore.Core.ProviderComponents.GenericSelectRenderer"/> class.</returns>
        </member>
        <member name="M:FistCore.Core.ProviderComponents.GenericDbmsComponents.NewUpdater">
            <summary>Gets default/generic implementation of <see cref="T:FistCore.Core.ProviderComponents.IUpdater"/> that doesn't use JOINs.</summary>
            <returns>An instance of <see cref="T:FistCore.Core.ProviderComponents.GenericUpdater"/> class.</returns>
        </member>
        <member name="M:FistCore.Core.ProviderComponents.GenericDbmsComponents.NewDeleteRenderer">
            <summary>Gets default/generic implementation of <see cref="T:FistCore.Core.ProviderComponents.IDeleteRenderer"/>.</summary>
            <returns>An instance of <see cref="T:FistCore.Core.ProviderComponents.GenericDeleteRenderer"/> class.</returns>
        </member>
        <member name="M:FistCore.Core.ProviderComponents.GenericDbmsComponents.NewHierarchicalQueryExecutor">
            <summary>Gets default/generic implementation of <see cref="T:FistCore.Core.ProviderComponents.IHierarchicalQueryExecutor"/> that issues multiple statements (one per hierarchy level) to manage records at different hierarchy level.</summary>
            <returns>An instance of <see cref="T:FistCore.Core.ProviderComponents.GenericHierarchicalQueryExecutor"/> class.</returns>
        </member>
        <member name="T:FistCore.Core.ProviderComponents.IContainsPredicateRenderer">
            <summary>Renders CONTAINS predicate as SQL element.</summary>
        </member>
        <member name="M:FistCore.Core.ProviderComponents.IContainsPredicateRenderer.Render(FistCore.Core.ContainsPredicate,FistCore.Core.DbmsType,System.Text.StringBuilder,FistCore.Core.DbParameterCollection)">
            <summary>Renders CONTAINS predicate as SQL element.</summary>
            <param name="contains">Contains predicate.</param>
            <param name="dbms">Target DBMS.</param>
            <param name="output">StringBuilder to which SQL is appended.</param>
            <param name="parameters">SQL parameter collection to which the object's and its children's
            parameters are added. After the rendering is done the collection contains all parameters with unique names.</param>
        </member>
        <member name="T:FistCore.Core.SqlServer.SqlServerConnectionProvider">
            <summary>
            IConnectionProvider implementation for SQL Server databases.
            </summary>
            <remarks>Refrain from using this class in your code. Always use <see cref="T:FistCore.Core.IConnectionProvider"/> interface 
            instead. Only classes that implement <see cref="T:FistCore.Core.ICatalog"/> interface should be aware of concrete 
            IConnectionProvider implementation. <b>ICatalog</b> acts as a factory class for IConnectionProvider instances.</remarks>
        </member>
        <member name="T:FistCore.Core.IConnectionProvider">
            <summary>
            Encapsulates a connection and transaction objects that can be shared among data-access tier objects.
            </summary>
            <example>
            The following example creates a ConnectionProvider and begins a transaction that deletes multiple rows 
            from Territories and Region tables.
            <code>
            public void DeleteRegionAndItsTerritories(int regionId)
            {
            	// Create connection to Northwind catalog.
            	Northwind.FistCore.Catalog northwindCatalog = new Northwind.FistCore.Catalog();
            	IConnectionProvider conn = northwindCatalog.CreateConnectionProvider();
            
            	try
            	{				
            		// Open connection and begin transaction.
            		conn.BeginTransaction();
            
            		// Territories that reference the specified region must be deleted first.
            		TerritoriesMeta territories = new TerritoriesMeta();
            		DeleteStatement deleteTerritories = new DeleteStatement(territories);
            		deleteTerritories.Where.Add(PredicateFactory.Compare(territories.RegionID, "=", regionId));
            		// Use the connection provider that has a pending transaction.
            		deleteTerritories.ConnectionProvider = conn;
            		deleteTerritories.Execute();
            
            		// Delete the specified region.
            		RegionMeta regions = new RegionMeta();
            		DeleteStatement deleteRegion = new DeleteStatement(regions);
            		deleteRegion.Where.Add(PredicateFactory.Compare(regions.RegionID, "=", regionId));
            		// Use the connection provider that has a pending transaction.
            		deleteRegion.ConnectionProvider = conn;
            		deleteRegion.Execute();
            
            		// All required rows have been deleted. Commit transaction.
            		conn.CommitTransaction();				
            	}
            	catch
            	{
            		// En error occured. Rollback entire transaction - no rows will be deleted.
            		conn.RollbackTransaction();
            		throw;
            	}
            	finally
            	{
            		// Close conection and return it to the connection pool.
            		// It is a good practice to explicitly close connection immediately after it is no longer required.
            		conn.CloseConnection();
            	}
            }
            </code>
            </example>
        </member>
        <member name="M:FistCore.Core.IConnectionProvider.OpenConnection">
            <summary>
            Opens the connection object.
            Throws exception if it's already open.
            </summary>
        </member>
        <member name="M:FistCore.Core.IConnectionProvider.BeginTransaction">
            <summary>
            Starts a new ADO.NET transaction using the open connection object of this class.
            Opens the connection if it isn't already open. 
            No nesting allowed, throws exception if the transaction is already pending.
            </summary>
            <remarks>Uses default <see cref="T:System.Data.IsolationLevel"/>.</remarks>
        </member>
        <member name="M:FistCore.Core.IConnectionProvider.BeginTransaction(System.Data.IsolationLevel)">
            <summary>
            Starts a new ADO.NET transaction using the open connection object of this class.
            Opens the connection if it isn't already open. 
            No nesting allowed, throws exception if the transaction is already pending.
            </summary>
            <param name="isolationLevel">The transaction isolation level.</param>
        </member>
        <member name="M:FistCore.Core.IConnectionProvider.CommitTransaction">
            <summary>
            Commits a pending transaction on the open connection object of this class.
            Throws exception if there is no pending transaction.
            </summary>
        </member>
        <member name="M:FistCore.Core.IConnectionProvider.RollbackTransaction">
            <summary>
            Rolls back a transaction from a pending state.
            Throws exception if there is no pending transaction.
            </summary>
        </member>
        <member name="M:FistCore.Core.IConnectionProvider.CloseConnection">
            <summary>
            Closes the connection to the database. This is the preferred method of closing any open connection.
            </summary>
            <remarks>
            <para>The Close method rolls back any pending transactions. It then releases the connection 
            to the connection pool, or closes the connection if connection pooling is disabled. 
            It is a good practice to explicitly close connection immediately after it is no longer required.</para>
            <para>Does nothing if the connection has already been closed.</para>
            </remarks>
        </member>
        <member name="P:FistCore.Core.IConnectionProvider.DBMS">
            <summary>
            Gets the DBMS type this provider is working with.
            </summary>
        </member>
        <member name="P:FistCore.Core.IConnectionProvider.IsTransactionPending">
            <summary>
            Gets the value which indicates whether there is a pending transaction.
            </summary>
        </member>
        <member name="P:FistCore.Core.IConnectionProvider.IsOpen">
            <summary>
            Gets the value which indicates whether the connection is open.
            </summary>
        </member>
        <member name="P:FistCore.Core.IConnectionProvider.Connection">
            <summary>
            Gets the connection object.
            </summary>
        </member>
        <member name="P:FistCore.Core.IConnectionProvider.Transaction">
            <summary>
            Gets the transaction object.
            </summary>
        </member>
        <member name="M:FistCore.Core.SqlServer.SqlServerConnectionProvider.#ctor(FistCore.Core.DbmsType,System.String)">
            <summary>
            Constructor. Sets DBMS type and connection string.
            </summary>
            <param name="dbmsType">DBMS type to which this provider connects to. Only SQL Server compatibile values are allowed.</param>
            <param name="connectionString">Connection string.</param>
        </member>
        <member name="M:FistCore.Core.SqlServer.SqlServerConnectionProvider.#ctor(FistCore.Core.DbmsType,System.String,System.Data.IsolationLevel)">
            <summary>
            Constructor. Sets DBMS type and connection string.
            </summary>
            <param name="dbmsType">DBMS type to which this provider connects to. Only SQL Server compatibile values are allowed.</param>
            <param name="connectionString">Connection string.</param>
            <param name="defaultTransactionIsolationLevel">Isolation level for transactions started by the parameterless <see cref="M:FistCore.Core.SqlServer.SqlServerConnectionProvider.BeginTransaction"/> method overload.</param>
        </member>
        <member name="M:FistCore.Core.SqlServer.SqlServerConnectionProvider.Dispose">
            <summary>
            Releases the resources used by this object.
            Closes and disposes connection and transaction objects.
            </summary>
        </member>
        <member name="M:FistCore.Core.SqlServer.SqlServerConnectionProvider.Dispose(System.Boolean)">
            <summary>
            Releases the resources used by this object.
            </summary>
        </member>
        <member name="M:FistCore.Core.SqlServer.SqlServerConnectionProvider.OpenConnection">
            <summary>
            Opens the connection object.
            Throws exception if it's already open.
            </summary>
        </member>
        <member name="M:FistCore.Core.SqlServer.SqlServerConnectionProvider.BeginTransaction">
            <summary>
            Starts a new ADO.NET transaction using the open connection object of this class.
            Opens the connection if it isn't already open. 
            No nesting allowed, throws exception if the transaction is already pending.
            </summary>
            <remarks>Uses default <see cref="T:System.Data.IsolationLevel"/>.</remarks>
        </member>
        <member name="M:FistCore.Core.SqlServer.SqlServerConnectionProvider.BeginTransaction(System.Data.IsolationLevel)">
            <summary>
            Starts a new ADO.NET transaction using the open connection object of this class.
            Opens the connection if it isn't already open. 
            No nesting allowed, throws exception if the transaction is already pending.
            </summary>
            <param name="isolationLevel">The transaction isolation level.</param>
        </member>
        <member name="M:FistCore.Core.SqlServer.SqlServerConnectionProvider.CommitTransaction">
            <summary>
            Commits a pending transaction on the open connection object of this class.
            Throws exception if there is no pending transaction.
            </summary>
        </member>
        <member name="M:FistCore.Core.SqlServer.SqlServerConnectionProvider.RollbackTransaction">
            <summary>
            Rolls back a transaction from a pending state.
            Throws exception if there is no pending transaction.
            </summary>
        </member>
        <member name="M:FistCore.Core.SqlServer.SqlServerConnectionProvider.CloseConnection">
            <summary>
            Closes the connection to the database. This is the preferred method of closing any open connection.
            </summary>
            <remarks>
            <para>The Close method rolls back any pending transactions. It then releases the connection 
            to the connection pool, or closes the connection if connection pooling is disabled. 
            It is a good practice to explicitly close connection immediately after it is no longer required.</para>
            <para>Does nothing if the connection has already been closed.</para>
            </remarks>
        </member>
        <member name="M:FistCore.Core.SqlServer.SqlServerConnectionProvider.CloseConnection(System.Boolean)">
            <summary>
            Closes the open connection and commits or rollbacks transaction as specified.
            Does nothing if the connection has already been closed.
            </summary>
            <param name="commitPendingTransaction">True will commit the current transaction, 
            false will rollback the complete current transaction.</param>		
        </member>
        <member name="P:FistCore.Core.SqlServer.SqlServerConnectionProvider.DBMS">
            <summary>
            Gets the DBMS type this provider is working with.
            </summary>
        </member>
        <member name="P:FistCore.Core.SqlServer.SqlServerConnectionProvider.IsTransactionPending">
            <summary>
            Gets the value which indicates whether there is a pending transaction.
            </summary>
        </member>
        <member name="P:FistCore.Core.SqlServer.SqlServerConnectionProvider.IsOpen">
            <summary>
            Gets the value which indicates whether the connection is open.
            </summary>
        </member>
        <member name="P:FistCore.Core.SqlServer.SqlServerConnectionProvider.Connection">
            <summary>
            Gets the connection object.
            </summary>
        </member>
        <member name="P:FistCore.Core.SqlServer.SqlServerConnectionProvider.Transaction">
            <summary>
            Gets the transaction object.
            </summary>
        </member>
        <member name="T:FistCore.Core.ProviderComponents.ContainsAsLikePredicateRenderer">
            <summary>Renders CONTAINS predicate as compatible LIKE predicate.</summary>
        </member>
        <member name="M:FistCore.Core.ProviderComponents.ContainsAsLikePredicateRenderer.Render(FistCore.Core.ContainsPredicate,FistCore.Core.DbmsType,System.Text.StringBuilder,FistCore.Core.DbParameterCollection)">
            <summary>Renders CONTAINS predicate as compatible LIKE predicate.</summary>
            <param name="contains">Contains predicate.</param>
            <param name="dbms">Target DBMS.</param>
            <param name="output">StringBuilder to which SQL is appended.</param>
            <param name="parameters">SQL parameter collection to which the object's and its children's
            parameters are added. After the rendering is done the collection contains all parameters with unique names.</param>
        </member>
        <member name="T:FistCore.Core.EntityInitializer`1">
            <summary>A method that creates new entity and initializes members for which values are defined in the array.</summary>
            <param name="table">Metadata for table/view to which the entity belongs to.</param>
            <param name="entityState">Indicates the state of entity with regard to data-source.</param>
            <param name="values">Array which contains values for all properties mapped to database columns.</param>
        </member>
        <member name="T:FistCore.Core.EntityFiller`1">
            <summary>Builds entity objects from retrieved data using provided <b>CreateEntity</b> method.</summary>
        </member>
        <member name="M:FistCore.Core.EntityFiller`1.#ctor">
            <summary>Initializes a new instance of <b>EntityFiller</b> class.</summary>
        </member>
        <member name="M:FistCore.Core.EntityFiller`1.#ctor(FistCore.Core.EntityInitializer{`0})">
            <summary>Initializes a new instance of <b>EntityFiller</b> class.</summary>
            <param name="createEntityMethod">Method delegate that creates entities.
            If <b>null</b> is provided then default implementation that uses reflection and <see cref="M:FistCore.Core.IEntity.FromObjectArray(System.Object[])"/> method will be used.</param>
        </member>
        <member name="M:FistCore.Core.EntityFiller`1.FillCollection(System.Data.IDataReader,System.Collections.IList)">
            <summary>Builds objects from retrieved data.</summary>
            <param name="openedDataReader">Opened data reader that contains all fields required to build objects.</param>
            <param name="collection">A collection to fill with objects built from data.</param>
        </member>
        <member name="M:FistCore.Core.EntityFiller`1.FillGenericCollection(System.Data.IDataReader,System.Collections.Generic.ICollection{`0})">
            <summary>Builds entites from retrieved data using <see cref="M:FistCore.Core.IEntity.FromObjectArray(System.Object[])"/> method.</summary>
            <param name="openedDataReader">Opened data reader that contains all fields required to initialize entities.</param>
            <param name="collection">A collection to fill with entities built from data.</param>
        </member>
        <member name="M:FistCore.Core.EntityFiller`1.GetColumnNamesSortedForUsageInFromObjectArray">
            <summary>Gets table column names sorted in the same order as they are initialized in entity's <see cref="M:FistCore.Core.IEntity.FromObjectArray(System.Object[])"/> method.</summary>
            <returns>Array of columns names ordered in same way as <see cref="P:FistCore.Core.IDbTable.Columns"/> collection.</returns>
            <remarks><para>Default implementation assumes that the order of field initialization in <b>FromObjectArray</b> method
            equals the order of items in <see cref="P:FistCore.Core.IDbTable.Columns"/> collection. In case that this not true then this
            method must be overrided and it has to return column names ordered in same way as object array in the <b>FromObjectArray</b>
            are accessed.</para>
            <para>Templates shipped with FistCore generator generate code that read object array in the same order as definied
            in <see cref="P:FistCore.Core.IDbTable.Columns"/> collection.</para></remarks>
        </member>
        <member name="P:FistCore.Core.EntityFiller`1.CreateEntity">
            <summary>Sets method that creates entities.</summary>
            <value>Delegate. Default is <b>null</b> which means that default implementation that uses reflection and <see cref="M:FistCore.Core.IEntity.FromObjectArray(System.Object[])"/> method will be used.</value>
        </member>
        <member name="T:FistCore.Core.Odbc.OdbcConnectionProvider">
            <summary>
            IConnectionProvider implementation for ODBC databases.
            </summary>
            <remarks>Refrain from using this class in your code. Always use <see cref="T:FistCore.Core.IConnectionProvider"/> interface 
            instead. Only classes that implement <see cref="T:FistCore.Core.ICatalog"/> interface should be aware of concrete 
            IConnectionProvider implementation. <b>ICatalog</b> acts as a factory class for IConnectionProvider instances.</remarks>
        </member>
        <member name="M:FistCore.Core.Odbc.OdbcConnectionProvider.#ctor(FistCore.Core.DbmsType,System.String)">
            <summary>
            Constructor. Sets DBMS type and connection string.
            </summary>
            <param name="dbmsType">DBMS type to which this provider connects to. Only values compatibile with ODBC databases are allowed.</param>
            <param name="connectionString">Connection string.</param>
        </member>
        <member name="M:FistCore.Core.Odbc.OdbcConnectionProvider.#ctor(FistCore.Core.DbmsType,System.String,System.Data.IsolationLevel)">
            <summary>
            Constructor. Sets DBMS type and connection string.
            </summary>
            <param name="dbmsType">DBMS type to which this provider connects to. Only values compatibile with ODBC databases are allowed.</param>
            <param name="connectionString">Connection string.</param>
            <param name="defaultTransactionIsolationLevel">Isolation level for transactions started by the parameterless <see cref="M:FistCore.Core.Odbc.OdbcConnectionProvider.BeginTransaction"/> method overload.</param>
        </member>
        <member name="M:FistCore.Core.Odbc.OdbcConnectionProvider.Dispose">
            <summary>
            Releases the resources used by this object.
            Closes and disposes connection and transaction objects.
            </summary>
        </member>
        <member name="M:FistCore.Core.Odbc.OdbcConnectionProvider.Dispose(System.Boolean)">
            <summary>
            Releases the resources used by this object.
            </summary>
        </member>
        <member name="M:FistCore.Core.Odbc.OdbcConnectionProvider.OpenConnection">
            <summary>
            Opens the connection object.
            Throws exception if it's already open.
            </summary>
        </member>
        <member name="M:FistCore.Core.Odbc.OdbcConnectionProvider.BeginTransaction">
            <summary>
            Starts a new ADO.NET transaction using the open connection object of this class.
            Opens the connection if it isn't already open. 
            No nesting allowed, throws exception if the transaction is already pending.
            </summary>
            <remarks>Uses default <see cref="T:System.Data.IsolationLevel"/>.</remarks>
        </member>
        <member name="M:FistCore.Core.Odbc.OdbcConnectionProvider.BeginTransaction(System.Data.IsolationLevel)">
            <summary>
            Starts a new ADO.NET transaction using the open connection object of this class.
            Opens the connection if it isn't already open. 
            No nesting allowed, throws exception if the transaction is already pending.
            </summary>
            <param name="isolationLevel">The transaction isolation level.</param>
        </member>
        <member name="M:FistCore.Core.Odbc.OdbcConnectionProvider.CommitTransaction">
            <summary>
            Commits a pending transaction on the open connection object of this class.
            Throws exception if there is no pending transaction.
            </summary>
        </member>
        <member name="M:FistCore.Core.Odbc.OdbcConnectionProvider.RollbackTransaction">
            <summary>
            Rolls back a transaction from a pending state.
            Throws exception if there is no pending transaction.
            </summary>
        </member>
        <member name="M:FistCore.Core.Odbc.OdbcConnectionProvider.CloseConnection">
            <summary>
            Closes the connection to the database. This is the preferred method of closing any open connection.
            </summary>
            <remarks>
            <para>The Close method rolls back any pending transactions. It then releases the connection 
            to the connection pool, or closes the connection if connection pooling is disabled. 
            It is a good practice to explicitly close connection immediately after it is no longer required.</para>
            <para>Does nothing if the connection has already been closed.</para>
            </remarks>
        </member>
        <member name="M:FistCore.Core.Odbc.OdbcConnectionProvider.CloseConnection(System.Boolean)">
            <summary>
            Closes the open connection and commits or rollbacks transaction as specified.
            Does nothing if the connection has already been closed.
            </summary>
            <param name="commitPendingTransaction">True will commit the current transaction, 
            false will rollback the complete current transaction.</param>		
        </member>
        <member name="P:FistCore.Core.Odbc.OdbcConnectionProvider.DBMS">
            <summary>
            Gets the DBMS type this provider is working with.
            </summary>
        </member>
        <member name="P:FistCore.Core.Odbc.OdbcConnectionProvider.IsTransactionPending">
            <summary>
            Gets the value which indicates whether there is a pending transaction.
            </summary>
        </member>
        <member name="P:FistCore.Core.Odbc.OdbcConnectionProvider.IsOpen">
            <summary>
            Gets the value which indicates whether the connection is open.
            </summary>
        </member>
        <member name="P:FistCore.Core.Odbc.OdbcConnectionProvider.Connection">
            <summary>
            Gets the connection object.
            </summary>
        </member>
        <member name="P:FistCore.Core.Odbc.OdbcConnectionProvider.Transaction">
            <summary>
            Gets the transaction object.
            </summary>
        </member>
        <member name="T:FistCore.Core.OleDb.OleDbConnectionProvider">
            <summary>
            IConnectionProvider implementation for OLE databases.
            </summary>
            <remarks>Refrain from using this class in your code. Always use <see cref="T:FistCore.Core.IConnectionProvider"/> interface 
            instead. Only classes that implement <see cref="T:FistCore.Core.ICatalog"/> interface should be aware of concrete 
            IConnectionProvider implementation. <b>ICatalog</b> acts as a factory class for IConnectionProvider instances.</remarks>
        </member>
        <member name="M:FistCore.Core.OleDb.OleDbConnectionProvider.#ctor(FistCore.Core.DbmsType,System.String)">
            <summary>
            Constructor. Sets DBMS type and connection string.
            </summary>
            <param name="dbmsType">DBMS type to which this provider connects to. Only values compatibile with OLE databases are allowed.</param>
            <param name="connectionString">Connection string.</param>
        </member>
        <member name="M:FistCore.Core.OleDb.OleDbConnectionProvider.#ctor(FistCore.Core.DbmsType,System.String,System.Data.IsolationLevel)">
            <summary>
            Constructor. Sets DBMS type and connection string.
            </summary>
            <param name="dbmsType">DBMS type to which this provider connects to. Only values compatibile with OLE databases are allowed.</param>
            <param name="connectionString">Connection string.</param>
            <param name="defaultTransactionIsolationLevel">Isolation level for transactions started by the parameterless <see cref="M:FistCore.Core.OleDb.OleDbConnectionProvider.BeginTransaction"/> method overload.</param>
        </member>
        <member name="M:FistCore.Core.OleDb.OleDbConnectionProvider.Dispose">
            <summary>
            Releases the resources used by this object.
            Closes and disposes connection and transaction objects.
            </summary>
        </member>
        <member name="M:FistCore.Core.OleDb.OleDbConnectionProvider.Dispose(System.Boolean)">
            <summary>
            Releases the resources used by this object.
            </summary>
        </member>
        <member name="M:FistCore.Core.OleDb.OleDbConnectionProvider.OpenConnection">
            <summary>
            Opens the connection object.
            Throws exception if it's already open.
            </summary>
        </member>
        <member name="M:FistCore.Core.OleDb.OleDbConnectionProvider.BeginTransaction">
            <summary>
            Starts a new ADO.NET transaction using the open connection object of this class.
            Opens the connection if it isn't already open. 
            No nesting allowed, throws exception if the transaction is already pending.
            </summary>
            <remarks>Uses default <see cref="T:System.Data.IsolationLevel"/>.</remarks>
        </member>
        <member name="M:FistCore.Core.OleDb.OleDbConnectionProvider.BeginTransaction(System.Data.IsolationLevel)">
            <summary>
            Starts a new ADO.NET transaction using the open connection object of this class.
            Opens the connection if it isn't already open. 
            No nesting allowed, throws exception if the transaction is already pending.
            </summary>
            <param name="isolationLevel">The transaction isolation level.</param>
        </member>
        <member name="M:FistCore.Core.OleDb.OleDbConnectionProvider.CommitTransaction">
            <summary>
            Commits a pending transaction on the open connection object of this class.
            Throws exception if there is no pending transaction.
            </summary>
        </member>
        <member name="M:FistCore.Core.OleDb.OleDbConnectionProvider.RollbackTransaction">
            <summary>
            Rolls back a transaction from a pending state.
            Throws exception if there is no pending transaction.
            </summary>
        </member>
        <member name="M:FistCore.Core.OleDb.OleDbConnectionProvider.CloseConnection">
            <summary>
            Closes the connection to the database. This is the preferred method of closing any open connection.
            </summary>
            <remarks>
            <para>The Close method rolls back any pending transactions. It then releases the connection 
            to the connection pool, or closes the connection if connection pooling is disabled. 
            It is a good practice to explicitly close connection immediately after it is no longer required.</para>
            <para>Does nothing if the connection has already been closed.</para>
            </remarks>
        </member>
        <member name="M:FistCore.Core.OleDb.OleDbConnectionProvider.CloseConnection(System.Boolean)">
            <summary>
            Closes the open connection and commits or rollbacks transaction as specified.
            Does nothing if the connection has already been closed.
            </summary>
            <param name="commitPendingTransaction">True will commit the current transaction, 
            false will rollback the complete current transaction.</param>		
        </member>
        <member name="P:FistCore.Core.OleDb.OleDbConnectionProvider.DBMS">
            <summary>
            Gets the DBMS type this provider is working with.
            </summary>
        </member>
        <member name="P:FistCore.Core.OleDb.OleDbConnectionProvider.IsTransactionPending">
            <summary>
            Gets the value which indicates whether there is a pending transaction.
            </summary>
        </member>
        <member name="P:FistCore.Core.OleDb.OleDbConnectionProvider.IsOpen">
            <summary>
            Gets the value which indicates whether the connection is open.
            </summary>
        </member>
        <member name="P:FistCore.Core.OleDb.OleDbConnectionProvider.Connection">
            <summary>
            Gets the connection object.
            </summary>
        </member>
        <member name="P:FistCore.Core.OleDb.OleDbConnectionProvider.Transaction">
            <summary>
            Gets the transaction object.
            </summary>
        </member>
        <member name="T:FistCore.Core.ProviderComponents.IColumnRenderer">
            <summary>Renders column name and alias.</summary>
        </member>
        <member name="M:FistCore.Core.ProviderComponents.IColumnRenderer.RenderColumnName(FistCore.Core.IDbColumn,System.Text.StringBuilder)">
            <summary>Renders column name .</summary>
            <param name="column">Column to render.</param>
            <param name="output">StringBuilder to which column name is appended.</param>
        </member>
        <member name="M:FistCore.Core.ProviderComponents.IColumnRenderer.RenderAlias(FistCore.Core.IDbColumn,System.Text.StringBuilder)">
            <summary>Renders column alias .</summary>
            <param name="column">Column to render.</param>
            <param name="output">StringBuilder to which the alias is appended.</param>
        </member>
        <member name="T:FistCore.Core.DbColumnCollection">
            <summary>Collection of <see cref="T:FistCore.Core.IDbColumn"/> objects.</summary>
        </member>
        <member name="M:FistCore.Core.DbColumnCollection.#ctor">
            <summary>
            Initializes a new instance of the <b>DbColumnCollection</b> class.
            </summary>
        </member>
        <member name="M:FistCore.Core.DbColumnCollection.#ctor(System.Int32)">
            <summary>
            Initializes a new instance of the <b>DbColumnCollection</b> class that is empty and has the specified initial capacity.
            </summary>
            <param name="capacity">The number of elements that the new list can initially store.</param>
        </member>
        <member name="M:FistCore.Core.DbColumnCollection.MakeReadOnly">
            <summary>Makes the collection read-only, ie. items may be no longer added to or removed from it.</summary>
            <remarks><b>Recommendation</b>: call <b>MakeReadOnly()</b> method once all required columns have been added to collection.</remarks>
        </member>
        <member name="M:FistCore.Core.DbColumnCollection.Add(FistCore.Core.IDbColumn)">
            <summary>
            Adds a column to the end of the collection.
            Does nothing if a column with the same alias already exists in the collection.
            </summary>
            <param name="column">Column. Cannot be <b>null</b>.</param>
            <remarks>Consider calling <see cref="M:FistCore.Core.DbColumnCollection.MakeReadOnly"/> once all required columns are added to collection.</remarks>
        </member>
        <member name="M:FistCore.Core.DbColumnCollection.GetAt(System.Int32)">
            <summary>
            Gets the column at the specified index.
            </summary>
            <param name="index">Index.</param>
            <returns>Column at the specified index.</returns>
        </member>
        <member name="M:FistCore.Core.DbColumnCollection.GetByAlias(System.String)">
            <summary>
            Gets the column with the specified alias.
            </summary>
            <param name="alias">Column alias.</param>
            <returns>Column or <b>null</b> if it doesn't exist.</returns>
        </member>
        <member name="M:FistCore.Core.DbColumnCollection.GetByColumnName(System.String)">
            <summary>
            Returns the first column in the collection with the specified name.
            </summary>
            <param name="name">Column name.</param>
            <returns>Column or <b>null</b> if it doesn't exist.</returns>
        </member>
        <member name="M:FistCore.Core.DbColumnCollection.GetByFullName(System.String)">
            <summary>
            Returns the first column in the collection with the specified full name.
            </summary>
            <param name="fullName">Full name.</param>
            <returns>Column or <b>null</b> if it doesn't exist.</returns>
        </member>
        <member name="M:FistCore.Core.DbColumnCollection.GetByPropertyName(System.String)">
            <summary>
            Returns the first column in the collection with the specified entity class property name.
            </summary>
            <param name="propertyName">Entity class property mapped to this column.</param>
            <returns>Column or <b>null</b> if it doesn't exist.</returns>
        </member>
        <member name="M:FistCore.Core.DbColumnCollection.ToArray">
            <summary>
            Copies the elements of the collection to a new array.
            </summary>
            <returns>Array of columns.</returns>
        </member>
        <member name="M:FistCore.Core.DbColumnCollection.IndexOf(System.String)">
            <summary>
            Returns the zero-based index of the specified column.
            </summary>
            <param name="columnName">Column name.</param>
            <returns>The zero-based index of the first occurrence of the specified column within the collection, if found; otherwise, -1.</returns>
        </member>
        <member name="M:FistCore.Core.DbColumnCollection.GetEnumerator">
            <summary>
            Gets an enumerator that can iterate through DbColumnCollection.
            </summary>
        </member>
        <member name="M:FistCore.Core.DbColumnCollection.System#Collections#Generic#IEnumerable{FistCore#Core#IDbColumn}#GetEnumerator">
            <summary>
            Gets an enumerator that can iterate through DbColumnCollection.
            </summary>
        </member>
        <member name="P:FistCore.Core.DbColumnCollection.Item(System.Int32)">
            <summary>
            Gets the column at the specified index.
            </summary>
        </member>
        <member name="P:FistCore.Core.DbColumnCollection.Count">
            <summary>
            Gets the total number of columns contained in the collection.
            </summary>
        </member>
        <member name="P:FistCore.Core.DbColumnCollection.IsReadOnly">
            <summary>Gets a value indicating whether the collection is read-only, ie. whether its contents may be modified.</summary>
        </member>
        <member name="T:FistCore.Core.IDbColumnConfiguration">
            <summary>Provides values for immutable <see cref="T:FistCore.Core.IDbColumn"/> properties.</summary>
        </member>
        <member name="P:FistCore.Core.IDbColumnConfiguration.DbType">
            <summary>
            Gets the <see cref="P:FistCore.Core.IDbColumnConfiguration.DbType"/> of the column.
            </summary>
        </member>
        <member name="P:FistCore.Core.IDbColumnConfiguration.IsNullable">
            <summary>
            Gets the value that indicates whether null values are allowed in this column.
            </summary>
        </member>
        <member name="P:FistCore.Core.IDbColumnConfiguration.AutoIncrement">
            <summary>
            Gets the value that indicates whether the column automatically increments the value for new rows added to the table.
            </summary>
        </member>
        <member name="P:FistCore.Core.IDbColumnConfiguration.ColumnName">
            <summary>
            Gets the name of the column.
            </summary>
        </member>
        <member name="P:FistCore.Core.IDbColumnConfiguration.DataType">
            <summary>
            Gets .NET type of data stored in the column.
            </summary>
        </member>
        <member name="P:FistCore.Core.IDbColumnConfiguration.DefaultValue">
            <summary>
            Gets the default value for the column when creating new rows.
            </summary>
        </member>
        <member name="P:FistCore.Core.IDbColumnConfiguration.MaxLengthIfText">
            <summary>
            Gets the maximum length of a text column.
            Has no effect it it is not a text column.
            </summary>
        </member>
        <member name="P:FistCore.Core.IDbColumnConfiguration.Ordinal">
            <summary>
            Gets the position of the column in the database table/view.
            </summary>
        </member>
        <member name="P:FistCore.Core.IDbColumnConfiguration.IsPrimaryKeyPart">
            <summary>
            Gets the value that indicates whether the column is a part of the primary key.
            </summary>
        </member>
        <member name="P:FistCore.Core.IDbColumnConfiguration.IsForeignKeyPart">
            <summary>
            Gets the value that indicates whether the column is a part of a foreign key.
            </summary>
        </member>
        <member name="P:FistCore.Core.IDbColumnConfiguration.IsUniqueConstraintPart">
            <summary>
            Gets the value that indicates whether the column is a part of a unique constraint.
            </summary>
        </member>
        <member name="P:FistCore.Core.IDbColumnConfiguration.MinValue">
            <summary>
            Gets the smallest possible value of this column.
            </summary>
        </member>
        <member name="P:FistCore.Core.IDbColumnConfiguration.MaxValue">
            <summary>
            Gets the smallest possible value of this column.
            </summary>
        </member>
        <member name="P:FistCore.Core.IDbColumnConfiguration.PropertyName">
            <summary>
            Gets the name of the generated entity class property mapped to this column.
            </summary>
        </member>
        <member name="P:FistCore.Core.IDbColumnConfiguration.IsAutoGenerated">
            <summary>
            Gets the value which indicates whether the value of the field is automatically generated by
            database (eg. timestamp or computed fields in SQL Server).
            If set to true then this field's value cannot be inserted or updated.
            </summary>
        </member>
        <member name="P:FistCore.Core.IDbColumnConfiguration.SequenceName">
            <summary>
            Gets the sequence used to increment values for this field.
            <b>Null</b> if the column is not an auto-incremented field or if sequence is not used.
            </summary>
        </member>
        <member name="P:FistCore.Core.IDbColumnConfiguration.ExtendedProperties">
            <summary>Gets the collection of customized information associated with the column.</summary>
            <value>A IPropertyCollection with all custom information. <b>null</b> if no custom information is configured.</value>
            <remarks>The ExtendedProperties property lets you configure custom information for the column such as DBMS-specific properties.</remarks>
        </member>
        <member name="T:FistCore.Core.DbColumnConfiguration">
            <summary>Provides values for immutable <see cref="T:FistCore.Core.IDbColumn"/> properties.</summary>
        </member>
        <member name="M:FistCore.Core.DbColumnConfiguration.#ctor(System.String,System.Data.DbType,System.Type,System.Boolean,System.Int32,System.Boolean,System.Object,System.Int32,System.Boolean,System.Boolean,System.Boolean,System.String,System.Object,System.Object,System.Boolean,System.String)">
            <summary>
            Initializes a new instance of the DbColumn class.
            </summary>
            <param name="columnName">Column name.</param>
            <param name="dbType">DB data type.</param>
            <param name="dataType">.NET type of data stored in the column.</param>
            <param name="nullable">Specifies whether the values of this column are nullable.</param>
            <param name="ordinal">Column's ordinal in parent table.</param>
            <param name="autoIncrement">Specifies whether the values of this column are automatically incremented.</param>
            <param name="defaultValue">Default value.</param>
            <param name="maxLengthIfText">The maximum length of a text column.</param>
            <param name="isPrimaryKeyPart">Indicates whether the column is a part of the primary key.</param>
            <param name="isForeignKeyPart">Indicates whether the column is a part of a foreign key.</param>
            <param name="isUniqueConstraintPart">Indicates whether the column is a part of a unique constraint.</param>
            <param name="propertyName">Name of the class property mapped to this column.</param>
            <param name="minValue">The smallest possible value of this column. May be <b>null</b>.</param>
            <param name="maxValue">The smallest possible value of this column. May be <b>null</b>.</param>
            <param name="isAutoGenerated">Indicates whether the value of the field is automatically generated by database (eg. timestamp in SQL Server).</param>
            <param name="sequenceName">Sequence that increments value for this field. <b>Null</b> if the field is not auto-incremented or sequence does not exist.</param>
        </member>
        <member name="M:FistCore.Core.DbColumnConfiguration.#ctor(System.String,System.Data.DbType,System.Type,System.Boolean,System.Int32,System.Boolean,System.Object,System.Int32,System.Boolean,System.Boolean,System.Boolean,System.String,System.Object,System.Object,System.Boolean,System.String,FistCore.Core.IPropertyCollection)">
            <summary>
            Initializes a new instance of the DbColumn class.
            </summary>
            <param name="columnName">Column name.</param>
            <param name="dbType">DB data type.</param>
            <param name="dataType">.NET type of data stored in the column.</param>
            <param name="nullable">Specifies whether the values of this column are nullable.</param>
            <param name="ordinal">Column's ordinal in parent table.</param>
            <param name="autoIncrement">Specifies whether the values of this column are automatically incremented.</param>
            <param name="defaultValue">Default value.</param>
            <param name="maxLengthIfText">The maximum length of a text column.</param>
            <param name="isPrimaryKeyPart">Indicates whether the column is a part of the primary key.</param>
            <param name="isForeignKeyPart">Indicates whether the column is a part of a foreign key.</param>
            <param name="isUniqueConstraintPart">Indicates whether the column is a part of a unique constraint.</param>
            <param name="propertyName">Name of the class property mapped to this column.</param>
            <param name="minValue">The smallest possible value of this column. May be <b>null</b>.</param>
            <param name="maxValue">The smallest possible value of this column. May be <b>null</b>.</param>
            <param name="isAutoGenerated">Indicates whether the value of the field is automatically generated by database (eg. timestamp in SQL Server).</param>
            <param name="sequenceName">Sequence that increments value for this field. <b>Null</b> if the field is not auto-incremented or sequence does not exist.</param>
            <param name="extendedProperties">Customized information associated with the table.</param>
        </member>
        <member name="P:FistCore.Core.DbColumnConfiguration.DbType">
            <summary>
            Gets the <see cref="P:FistCore.Core.DbColumnConfiguration.DbType"/> of the column.
            </summary>
        </member>
        <member name="P:FistCore.Core.DbColumnConfiguration.IsNullable">
            <summary>
            Gets the value that indicates whether null values are allowed in this column.
            </summary>
        </member>
        <member name="P:FistCore.Core.DbColumnConfiguration.AutoIncrement">
            <summary>
            Gets the value that indicates whether the column automatically increments the value for new rows added to the table.
            </summary>
        </member>
        <member name="P:FistCore.Core.DbColumnConfiguration.ColumnName">
            <summary>
            Gets the name of the column.
            </summary>
        </member>
        <member name="P:FistCore.Core.DbColumnConfiguration.DataType">
            <summary>
            Gets .NET type of data stored in the column.
            </summary>
        </member>
        <member name="P:FistCore.Core.DbColumnConfiguration.DefaultValue">
            <summary>
            Gets the default value for the column when creating new rows.
            </summary>
        </member>
        <member name="P:FistCore.Core.DbColumnConfiguration.MaxLengthIfText">
            <summary>
            Gets the maximum length of a text column.
            Has no effect it it is not a text column.
            </summary>
        </member>
        <member name="P:FistCore.Core.DbColumnConfiguration.Ordinal">
            <summary>
            Gets the position of the column in the database table/view.
            </summary>
        </member>
        <member name="P:FistCore.Core.DbColumnConfiguration.IsPrimaryKeyPart">
            <summary>
            Gets the value that indicates whether the column is a part of the primary key.
            </summary>
        </member>
        <member name="P:FistCore.Core.DbColumnConfiguration.IsForeignKeyPart">
            <summary>
            Gets the value that indicates whether the column is a part of a foreign key.
            </summary>
        </member>
        <member name="P:FistCore.Core.DbColumnConfiguration.IsUniqueConstraintPart">
            <summary>
            Gets the value that indicates whether the column is a part of a unique constraint.
            </summary>
        </member>
        <member name="P:FistCore.Core.DbColumnConfiguration.MinValue">
            <summary>
            Gets the smallest possible value of this column.
            </summary>
        </member>
        <member name="P:FistCore.Core.DbColumnConfiguration.MaxValue">
            <summary>
            Gets the smallest possible value of this column.
            </summary>
        </member>
        <member name="P:FistCore.Core.DbColumnConfiguration.PropertyName">
            <summary>
            Gets the name of the generated entity class property mapped to this column.
            </summary>
        </member>
        <member name="P:FistCore.Core.DbColumnConfiguration.IsAutoGenerated">
            <summary>
            Gets the value which indicates whether the value of the field is automatically generated by
            database (eg. timestamp or computed fields in SQL Server).
            If set to true then this field's value cannot be inserted or updated.
            </summary>
        </member>
        <member name="P:FistCore.Core.DbColumnConfiguration.SequenceName">
            <summary>
            Gets the sequence used to increment values for this field.
            <b>Null</b> if the column is not an auto-incremented field or if sequence is not used.
            </summary>
        </member>
        <member name="P:FistCore.Core.DbColumnConfiguration.ExtendedProperties">
            <summary>Gets the collection of customized information associated with the column.</summary>
            <value>A IPropertyCollection with all custom information. <b>null</b> if no custom information is configured.</value>
            <remarks>The ExtendedProperties property lets you configure custom information for the column such as DBMS-specific properties.</remarks>
        </member>
        <member name="T:FistCore.Core.IDbColumn">
            <summary>
            Contains database column metadata and methods.
            </summary>
        </member>
        <member name="M:FistCore.Core.IDbColumn.Validate(System.Object)">
             <summary>
             Checks whether the given value is valid for this column.
             </summary>
             <remarks>Checks whether the value contained in the given field obeys basic constraints
             (nullability, min/max value etc). Returns <see cref="T:FistCore.Core.FieldErrorCode"/> that indicates
             the type of error encountered.</remarks>
             <param name="value">Value.</param>
             <returns>Error code.</returns>
             <example>
             The folowing example tests values against the HireDate field of the Northwind's Employees table.
             HireDate is a nullable T-SQL DateTime type (SQL Server). Minimum DateTime value supported by SQL Server is January 1, 1753.
             <code>
             EmployeesMeta employees = new EmployeesMeta();
            
             // The field is nullable.
             // Validate method returns FieldErrorCode.AllOk.
             FieldErrorCode allOk = employees.HireDate.Validate(null);
            
             // Minimum DateTime value supported by SQL Server is January 1, 1753.
             // Validate method returns FieldErrorCode.OutOfRangeError.
             FieldErrorCode outOfRangeError = employees.HireDate.Validate(new DateTime(1000, 1, 1));
            
             // The field cannot accept integer values.
             // Validate method returns FieldErrorCode.NonCompatibileType.
             FieldErrorCode nonCompatibileType = employees.HireDate.Validate(0);
             </code>
             </example>
        </member>
        <member name="M:FistCore.Core.IDbColumn.NewDataColumn">
            <summary>
            Creates a new DataColumn that represents this IDbColumn in a DataTable.
            </summary>
        </member>
        <member name="M:FistCore.Core.IDbColumn.GetPrefixedAlias">
            <summary>
            Computes a string which is a combination of prefix (usually a table name) and column alias.
            Eg: Id -> MyTable_Id
            </summary>
            <returns>Prefixed alias.</returns>
        </member>
        <member name="M:FistCore.Core.IDbColumn.RenderColumnName(FistCore.Core.DbmsType,System.Text.StringBuilder)">
            <summary>
            Renders column name for the given DBMS. Handles special characters.
            </summary>
            <param name="dbms">Target DBMS.</param>
            <param name="output">StringBuilder to which column name is appended.</param>
            <remarks>Special characters are handled differently on different DBMSs.
            Eg. if column contains blanks it has to be enclosed in brackets for SQL Server (eg. [Employee ID]).</remarks>
        </member>
        <member name="M:FistCore.Core.IDbColumn.RenderFullName(FistCore.Core.DbmsType,System.Text.StringBuilder)">
            <summary>
            Renders full name for the given DBMS. Handles special characters.
            </summary>
            <param name="dbms">Target DBMS.</param>
            <param name="output">StringBuilder to which table name is appended.</param>
            <remarks>Special characters in table and column names are handled differently on different DBMSs.</remarks>
        </member>
        <member name="M:FistCore.Core.IDbColumn.RenderAlias(FistCore.Core.DbmsType,System.Text.StringBuilder)">
            <summary>
            Renders table alias for the given DBMS. Handles special characters.
            </summary>
            <param name="dbms">Target DBMS.</param>
            <param name="output">StringBuilder to which the alias is appended.</param>
            <remarks>Special characters are handled differently on different DBMSs.
            If alias contains blanks it has to be enclosed in brackets for SQL Server
            (eg. [My employees]), in quotes for Oracle (eg. "My employees") etc.</remarks>
        </member>
        <member name="P:FistCore.Core.IDbColumn.Table">
            <summary>
            Gets or sets <see cref="T:FistCore.Core.IDbTable"/> object to which this column belongs to.
            </summary>
        </member>
        <member name="P:FistCore.Core.IDbColumn.DbType">
            <summary>
            Gets the <see cref="P:FistCore.Core.IDbColumn.DbType"/> of the column.
            </summary>
        </member>
        <member name="P:FistCore.Core.IDbColumn.FullName">
            <summary>
            Gets the full name of this column in the following format: [Table].[ColumnName] or
            [ColumnName] if the <see cref="P:FistCore.Core.IDbColumn.Table"/> property is not set. Eg: [MyTable].[Id]
            </summary>
        </member>
        <member name="P:FistCore.Core.IDbColumn.Alias">
            <summary>
            Gets alias.
            </summary>
        </member>
        <member name="P:FistCore.Core.IDbColumn.Prefix">
            <summary>
            Gets alias prefix. Eg: "MyTable_". Empty string if parent table is not set.
            </summary>
        </member>
        <member name="P:FistCore.Core.IDbColumn.IsNullable">
            <summary>
            Gets the value that indicates whether null values are allowed in this column.
            </summary>
        </member>
        <member name="P:FistCore.Core.IDbColumn.AutoIncrement">
            <summary>
            Gets the value that indicates whether the column automatically increments the value for new rows added to the table.
            </summary>
        </member>
        <member name="P:FistCore.Core.IDbColumn.ColumnName">
            <summary>
            Gets the name of the column.
            </summary>
        </member>
        <member name="P:FistCore.Core.IDbColumn.DataType">
            <summary>
            Gets .NET type of data stored in the column.
            </summary>
        </member>
        <member name="P:FistCore.Core.IDbColumn.DefaultValue">
            <summary>
            Gets the default value for the column when creating new rows.
            </summary>
        </member>
        <member name="P:FistCore.Core.IDbColumn.MaxLengthIfText">
            <summary>
            Gets the maximum length of a text column.
            Has no effect it it is not a text column.
            </summary>
        </member>
        <member name="P:FistCore.Core.IDbColumn.Ordinal">
            <summary>
            Gets the position of the column in the database table/view.
            </summary>
        </member>
        <member name="P:FistCore.Core.IDbColumn.IsPrimaryKeyPart">
            <summary>
            Gets the value that indicates whether the column is a part of the primary key.
            </summary>
        </member>
        <member name="P:FistCore.Core.IDbColumn.IsForeignKeyPart">
            <summary>
            Gets the value that indicates whether the column is a part of a foreign key.
            </summary>
        </member>
        <member name="P:FistCore.Core.IDbColumn.IsUniqueConstraintPart">
            <summary>
            Gets the value that indicates whether the column is a part of a unique constraint.
            </summary>
        </member>
        <member name="P:FistCore.Core.IDbColumn.MinValue">
            <summary>
            Gets the smallest possible value of this column.
            </summary>
        </member>
        <member name="P:FistCore.Core.IDbColumn.MaxValue">
            <summary>
            Gets the smallest possible value of this column.
            </summary>
        </member>
        <member name="P:FistCore.Core.IDbColumn.PropertyName">
            <summary>
            Gets the name of the generated entity class property mapped to this column.
            </summary>
        </member>
        <member name="P:FistCore.Core.IDbColumn.IsAutoGenerated">
            <summary>
            Gets the value which indicates whether the value of the field is automatically generated by
            database (eg. timestamp or computed fields in SQL Server).
            If set to true then this field's value cannot be inserted or updated.
            </summary>
        </member>
        <member name="P:FistCore.Core.IDbColumn.SequenceName">
            <summary>
            Gets the sequence used to increment values for this field.
            <b>Null</b> if the column is not an auto-incremented field or if sequence is not used.
            </summary>
        </member>
        <member name="P:FistCore.Core.IDbColumn.ExtendedProperties">
            <summary>Gets the collection of customized information associated with the column.</summary>
            <value>A IPropertyCollection with all custom information. <b>null</b> if no custom information is configured.</value>
            <remarks>The ExtendedProperties property lets you configure custom information for the column such as DBMS-specific properties.</remarks>
        </member>
        <member name="T:FistCore.Core.ProviderComponents.IDbCommandBuilder">
            <summary>Builds <see cref="T:System.Data.IDbCommand"/> objects.</summary>
        </member>
        <member name="M:FistCore.Core.ProviderComponents.IDbCommandBuilder.BuildCommand(System.String,FistCore.Core.DbParameterCollection,System.Data.CommandType,System.Int32)">
            <summary>Creates DB command.</summary>
            <param name="cmdText">Command text.</param>
            <param name="parameters">Command parameters.</param>
            <param name="cmdType">Command type (Text, Stored procedure).</param>
            <param name="cmdTimeout">Set timeout for specified command.</param>
            <returns>DB command.</returns>
        </member>
        <member name="T:FistCore.Core.ProviderComponents.IDataAdapterBuilder">
            <summary>Builds <see cref="T:System.Data.IDataAdapter"/> objects.</summary>
        </member>
        <member name="M:FistCore.Core.ProviderComponents.IDataAdapterBuilder.BuildAdapter(System.Data.IDbCommand)">
            <summary>Creates data adapter.</summary>
            <param name="cmd">Command object that can be casted to command supported by output adapter.</param>
            <returns>Data adapter.</returns>
        </member>
        <member name="T:FistCore.Core.Odbc.OdbcDataAdapterBuilder">
            <summary>Builds <see cref="T:System.Data.Odbc.OdbcDataAdapter"/> objects.</summary>
        </member>
        <member name="T:FistCore.Core.OleDb.OleDbDataAdapterBuilder">
            <summary>Builds <see cref="T:System.Data.OleDb.OleDbDataAdapter"/> objects.</summary>
        </member>
        <member name="T:FistCore.Core.CommandExecutionStatistics">
            <summary>
            Execution statistics for SQL commands sent from application to database.
            </summary>
            <remarks>Use only for debuging and tracing purposses to examine the SQL command that was
            actually executed on the data-source. The behavior may change in future releases.</remarks>
        </member>
        <member name="M:FistCore.Core.CommandExecutionStatistics.#ctor">
            <summary>
            Initializes a new instance of <b>CommandExecutionStatistics</b> class.
            </summary>
        </member>
        <member name="M:FistCore.Core.CommandExecutionStatistics.#ctor(System.Object)">
            <summary>
            Initializes a new instance of <b>CommandExecutionStatistics</b> class.
            </summary>
            <param name="command">Reference to the command that was executed on the data-source. 
            <b>Nullable</b>. Typically a string or an <b>SqlStatementBase</b> object.</param>
        </member>
        <member name="M:FistCore.Core.CommandExecutionStatistics.StopTime">
            <summary>
            Sets the EndTime property to the DateTime.Now value.
            </summary>
        </member>
        <member name="P:FistCore.Core.CommandExecutionStatistics.StartTime">
            <summary>
            Gets or sets the time before the command is executed.
            </summary>
        </member>
        <member name="P:FistCore.Core.CommandExecutionStatistics.EndTime">
            <summary>
            Gets or sets the time after the command is executed.
            </summary>
        </member>
        <member name="P:FistCore.Core.CommandExecutionStatistics.Duration">
            <summary>
            Gets the total duration of command execution.
            </summary>
            <remarks>Includes the time required to send the command to the data-source, time to execute
            the command on the data-source and time to return query results back to the application.</remarks>
        </member>
        <member name="P:FistCore.Core.CommandExecutionStatistics.Command">
            <summary>
            Gets ot sets the reference to the command that was executed on the data-source. 
            <b>Nullable</b>. Typically a string or an <b>SqlStatementBase</b> object.
            </summary>
        </member>
        <member name="T:FistCore.Core.IDataAccessObject">
            <summary>
            Common interface for all data-access objects. 
            Specifies that compatibile data-access objects must be able to share connection and transaction context.
            </summary>
        </member>
        <member name="P:FistCore.Core.IDataAccessObject.ConnectionProvider">
            <summary>
            Connection provider used for database interaction.
            </summary>
        </member>
        <member name="P:FistCore.Core.IDataAccessObject.LastExecutedCommandInfo">
            <summary>
            Gets the information for the last command generated and executed by the current DAO on the data-source. <b>Nullable</b>.
            </summary>
            <remarks>Use only for debuging and tracing purposses to examine the SQL command that was actually 
            executed on the data-source. In some situations DAOs may not set or update the statistics.</remarks>
        </member>
        <member name="T:FistCore.Core.DaoBase">
            <summary>
            Base class for all data-access objects. Inherited DAO classes may share connection and transaction objects.
            </summary>
        </member>
        <member name="F:FistCore.Core.DaoBase.connectionIsCreatedLocal">
            <summary>
            Indicates whether the connection is openned locally or is it shared with other objects.
            If true then Dispose method will dispose ConnectionProvider, otherwise it will leave it intact.
            </summary>
        </member>
        <member name="F:FistCore.Core.DaoBase.connectionProvider">
            <summary>
            ConnectionProvider object used for database interaction.
            </summary>
        </member>
        <member name="F:FistCore.Core.DaoBase.lastExecutedCommandInfo">
            <summary>
            Information for the last command generated and executed by the current DAO on the data-source.
            </summary>
        </member>
        <member name="F:FistCore.Core.DaoBase.dbCatalog">
            <summary>Catalog that creates connection providers on 1st demand.</summary>
        </member>
        <member name="M:FistCore.Core.DaoBase.#ctor(FistCore.Core.ICatalog)">
            <summary>
            Initializes a new instance of the DaoBase class.
            </summary>
            <param name="dbCatalog">Database catalog to which the connection will be provided by this instance.</param>
        </member>
        <member name="M:FistCore.Core.DaoBase.#ctor(FistCore.Core.IConnectionProvider)">
            <summary>
            Initializes a new instance of the DaoBase class. 
            </summary>
            <param name="conn">Connection provider the DAO will use to perform data-access operations. Null is not allowed.</param>
        </member>
        <member name="F:FistCore.Core.DaoBase.isDisposed">
            <summary>
            Indicates whether the object has been disposed.
            </summary>
        </member>
        <member name="M:FistCore.Core.DaoBase.Dispose">
            <summary>
            Releases the resources used by this object.
            </summary>
        </member>
        <member name="M:FistCore.Core.DaoBase.Dispose(System.Boolean)">
            <summary>
            Releases the resources used by this object.
            </summary>
        </member>
        <member name="P:FistCore.Core.DaoBase.ConnectionProvider">
            <summary>
            Gets or sets the ConnectionProvider used for database interaction. Nulls are not allowed.
            </summary>
        </member>
        <member name="P:FistCore.Core.DaoBase.LastExecutedCommandInfo">
            <summary>
            Gets the information for the last command generated and executed by the current DAO on the data-source. <b>Nullable.</b>
            </summary>
            <remarks>Use only for debuging and tracing purposses to examine the SQL command that was actually 
            executed on the data-source. In some situations DAOs may not set or update the statistics.</remarks>
        </member>
        <member name="T:FistCore.Core.DbmsType">
            <summary>
            Enumeration of supported relational database management systems.
            </summary>
        </member>
        <member name="F:FistCore.Core.DbmsType.SqlServer_7">
            <summary>SQL Server 7. Different AUTO IDENTITY retrieval than newer versions.</summary>
        </member>
        <member name="F:FistCore.Core.DbmsType.SqlServer_2000">
            <summary>SQL Server 2000.</summary>
        </member>
        <member name="F:FistCore.Core.DbmsType.SqlServer_2005">
            <summary>SQL Server 2005. Optimized hierarchical queries using recursive CTEs (WITH clause) and bulk inserts using BPC.</summary>
        </member>
        <member name="F:FistCore.Core.DbmsType.SqlServer_2008">
            <summary>SQL Server 2008 or newer. Same as SQL Server 2005.</summary>
        </member>
        <member name="F:FistCore.Core.DbmsType.Oracle_9i">
            <summary>Oracle 9i. Same as Oracle 10g and 11g.</summary>
        </member>
        <member name="F:FistCore.Core.DbmsType.Oracle_10g">
            <summary>Oracle 10g. Same as Oracle 9i and 11g.</summary>
        </member>
        <member name="F:FistCore.Core.DbmsType.Oracle_11g">
            <summary>Oracle 11g or newer. Same as Oracle 9i and 10g.</summary>
        </member>
        <member name="F:FistCore.Core.DbmsType.OdbcGeneric">
            <summary>Generic ODBC. TOP is not supported. Auto-incremented fields are not supported.</summary>
        </member>
        <member name="F:FistCore.Core.DbmsType.OleGeneric">
            <summary>Generic OLE DB. TOP is not supported. Auto-incremented fields are not supported.</summary>
        </member>
        <member name="F:FistCore.Core.DbmsType.MySql_5">
            <summary>MySQL 5.0 or newer with InnoDB or MyISAM engine. Hierarchical updates, ie. IEntityDAO.UpdateTree() methods, are not supported.</summary>
        </member>
        <member name="F:FistCore.Core.DbmsType.PostgreSql_9">
            <summary>PostgreSQL 9.0 or newer. Currently, SERIAL data-type must be used for auto-incremented fields. Stand-alone sequences are not supported in INSERT statement.</summary>
        </member>
        <member name="F:FistCore.Core.DbmsType.Firebird_2">
            <summary>Firebird 2.1 or newer. Currently, GENERATORS and TRIGGERS must be used for auto-incremented fields. Stand-alone sequences are not supported in INSERT statement.</summary>
        </member>
        <member name="F:FistCore.Core.DbmsType.SQLite_3">
            <summary>SQLite 3.0 or newer.</summary>
        </member>
        <member name="F:FistCore.Core.DbmsType.SqlServerCe_4">
            <summary>SQL Server Compact 4.0 or newer. SQL CE doesn't support subqueries in SELECT list.</summary>
        </member>
        <member name="T:FistCore.Core.DbUtil">
            <summary>
            Executes SQL commands.
            </summary>
        </member>
        <member name="M:FistCore.Core.DbUtil.CreateCommand(FistCore.Core.DbmsType,System.String,FistCore.Core.DbParameterCollection,System.Data.CommandType,System.Int32)">
            <summary>
            Creates DB command suitable for the given DBMS type.
            </summary>
            <param name="dbms">DBMS type (SqlServer, ODBC, OLE...).</param>
            <param name="cmdText">Command text.</param>
            <param name="parameters">Command parameters.</param>
            <param name="cmdType">Command type (Text, Stored procedure).</param>
            <param name="cmdTimeout">Set timeout for specified command.</param>
            <returns>DB command that works on the specified provider.</returns>
        </member>
        <member name="M:FistCore.Core.DbUtil.ExecuteQuery(FistCore.Core.IConnectionProvider,System.String,FistCore.Core.DbParameterCollection,System.Data.CommandType,System.String,System.Int32)">
            <summary>
            Creates and executes query using the given ConnectionProvider.
            </summary>
            <param name="conn">Connection provider.</param>
            <param name="cmdText">Command text.</param>
            <param name="parameters">Command parameters.</param>
            <param name="cmdType">Command type (stored procedure or text).</param>
            <param name="cmdTimeout">Set timeout for specified command.</param>
            <param name="dataTableName">Name of the datatable that will be returned. May be null.</param>
            <returns>DataTable containing retrieved data.</returns>
        </member>
        <member name="M:FistCore.Core.DbUtil.ExecuteMultiQuery(FistCore.Core.IConnectionProvider,System.String,FistCore.Core.DbParameterCollection,System.Data.CommandType,System.Int32)">
            <summary>
            Creates and executes query using the given ConnectionProvider which returns multiple result-sets.
            </summary>
            <param name="conn">Connection provider.</param>
            <param name="cmdText">Command text.</param>
            <param name="parameters">Command parameters.</param>
            <param name="cmdType">Command type (stored procedure or text).</param>
            <param name="cmdTimeout">Set timeout for specified command.</param>
            <returns>DataSet containg retrieved data.</returns>
        </member>
        <member name="M:FistCore.Core.DbUtil.ExecuteNonQuery(FistCore.Core.IConnectionProvider,System.String,FistCore.Core.DbParameterCollection,System.Data.CommandType,System.Int32)">
            <summary>
            Executes non data-retrieval stament (update, insert, delete, stored procedure).
            </summary>
            <param name="conn">Connection provider.</param>
            <param name="cmdText">Command text.</param>
            <param name="parameters">Command parameters.</param>
            <param name="cmdType">Command type (stored procedure or text).</param>
            <param name="cmdTimeout">Set timeout for specified command.</param>
            <returns>Number of rows affected by the command.</returns>
        </member>
        <member name="M:FistCore.Core.DbUtil.ExecuteReader(FistCore.Core.IConnectionProvider,System.Collections.IList,FistCore.Core.IObjectFiller,System.String,FistCore.Core.DbParameterCollection,System.Data.CommandType,System.Int32,System.Boolean)">
            <summary>Executes a query and converts data to specified objects.</summary>
            <param name="conn">Connection provider.</param>
            <param name="destination">A collection to fill with objects built from data.</param>
            <param name="objectBuilder">Builds objects directly from retrieved data.</param>
            <param name="cmdText">Command text.</param>
            <param name="parameters">Command parameters.</param>
            <param name="cmdType">Command type (stored procedure or text).</param>
            <param name="cmdTimeout">Set timeout for specified command.</param>
            <param name="useSequentalAccess">Uses CommandBehavior.SequentialAccess instead of CommandBehavior.SingleResult.</param>
            <remarks><para>The method uses provided converter to directly build specified object type from data contained in
            <see cref="T:System.Data.IDataReader"/> objects, thus skipping the need to create intermediate data structures such as <see cref="T:System.Data.DataTable"/>
            and <see cref="T:System.Data.DataSet"/> objects. This can increase performance and reduce memory consumption when working with very
            large results sets.</para></remarks>
        </member>
        <member name="T:FistCore.Core.ICatalog">
            <summary>
            Contains information about a database catalog.
            </summary>
        </member>
        <member name="M:FistCore.Core.ICatalog.CreateConnectionProvider">
            <summary>
            Creates a connection provider for this catalog.
            </summary>
            <returns>Connection provider that connects to this catalog.</returns>
        </member>
        <member name="P:FistCore.Core.ICatalog.DbmsType">
            <summary>
            Gets database type that holds the catalog.
            </summary>
        </member>
        <member name="P:FistCore.Core.ICatalog.ConnectionString">
            <summary>
            Connection string used to connect to the catalog.
            </summary>
        </member>
        <member name="T:FistCore.Core.Odbc.OdbcCommandBuilder">
            <summary>Builds <see cref="T:System.Data.Odbc.OdbcCommand"/> objects.</summary>
        </member>
        <member name="T:FistCore.Core.OleDb.OleDbCommandBuilder">
            <summary>Builds <see cref="T:System.Data.OleDb.OleDbCommand"/> objects.</summary>
        </member>
        <member name="T:FistCore.Core.SqlStatementBase">
            <summary>
            SQL statement base class. All SQL statement classes are derived from this class.
            Provides common SQL statement logic.
            </summary>
        </member>
        <member name="T:FistCore.Core.IRenderSql">
            <summary>
            An object that renders item as SQL element, clause or statement and appends the generated SQL code and parameters to shared output.
            </summary>
        </member>
        <member name="M:FistCore.Core.IRenderSql.Render(FistCore.Core.DbmsType,System.Text.StringBuilder,FistCore.Core.DbParameterCollection)">
            <summary>
            Renders item as SQL element, clause or statement.
            </summary>
            <param name="dbms">Target DBMS.</param>
            <param name="output">Output StringBuilder to which SQL code is appended.</param>
            <param name="parameters">SQL parameter collection to which the object's and its children's
            parameters are added. After the rendering is done the collection contains all parameters with unique names.</param>
        </member>
        <member name="F:FistCore.Core.SqlStatementBase.tableAlias">
            <summary>
            Alias of the table/view to which this entity belongs to.
            Required as distinct member when deserializing object to recreate member 'table'.
            </summary>
        </member>
        <member name="F:FistCore.Core.SqlStatementBase.dbTableClass">
            <summary>
            Class that holds meta data for the table/view this entity belongs to.
            Required as distinct member when deserializing object to recreate member 'table'.
            </summary>
        </member>
        <member name="F:FistCore.Core.SqlStatementBase.table">
            <summary>
            Target table.
            Not serialized because it is very big. This member should never be acessed directly.
            Use TargetTable property as it will recreate this member if it's null (eg. after deserialization).
            </summary>
        </member>
        <member name="M:FistCore.Core.SqlStatementBase.#ctor(FistCore.Core.IDbTable)">
            <summary>
            Constructor. Initializes target table and the ConnectionProvider.
            </summary>
            <param name="targetTable">Target table.</param>
        </member>
        <member name="M:FistCore.Core.SqlStatementBase.Render(FistCore.Core.DbmsType,System.Text.StringBuilder,FistCore.Core.DbParameterCollection)">
            <summary>
            Renders SQL statement.
            </summary>
            <param name="dbms">Target DBMS.</param>
            <param name="output">StringBuilder to which SQL is appended.</param>
            <param name="parameters">SQL parameter collection to which the object's and its children's
            parameters are added. After the rendering is done the collection contains all parameters with unique names.</param>
        </member>
        <member name="M:FistCore.Core.SqlStatementBase.ToString">
            <summary>
            Returns SQL code for this statement. Uses syntax for the object's ConnectionProvider.
            </summary>
            <returns>SQL command text.</returns>
        </member>
        <member name="M:FistCore.Core.SqlStatementBase.ToString(FistCore.Core.DbmsType)">
            <summary>
            Returns SQL code for this statement. Uses syntax for the given DBMS.
            </summary>
            <param name="dbms">DBMS.</param>
            <returns>SQL command text.</returns>
        </member>
        <member name="P:FistCore.Core.SqlStatementBase.TargetTable">
            <summary>
            Target table.
            </summary>
        </member>
        <member name="T:FistCore.Core.ProviderComponents.DbmsComponentFactory">
            <summary>Creates objects that implement interfaces declared in <b>FistCore.Core.ProviderComponents</b> namespace.</summary>
        </member>
        <member name="M:FistCore.Core.ProviderComponents.DbmsComponentFactory.GetComponent``1(FistCore.Core.DbmsType)">
            <summary>Gets component that implements the defined interface for the specifed DBMS.</summary>
            <param name="dbms">Target DBMS. Assembly and provider class must be registered.</param>
            <typeparam name="T">One of the interfaces declared in <b>FistCore.Core.ProviderComponents</b> namespace.</typeparam>
            <returns>Component that implements the specified interface if supported by current provider.</returns>
        </member>
        <member name="T:FistCore.Core.ProviderComponents.IDbmsComponentProvider">
            <summary>Provides DBMS specific components.</summary>
        </member>
        <member name="M:FistCore.Core.ProviderComponents.IDbmsComponentProvider.GetComponent``1">
            <summary>Gets component that implements specified interface.</summary>
            <typeparam name="T">One of the interfaces declared in <b>FistCore.Core.ProviderComponents</b> namespace.</typeparam>
            <returns>Component that implements the specified interface if supported by current provider.</returns>
        </member>
        <member name="T:FistCore.Core.Odbc.OdbcComponentProvider">
            <summary>Provides components for ODBC connection.</summary>
        </member>
        <member name="T:FistCore.Core.OleDb.OleDbComponentProvider">
            <summary>Provides components for OLE DB connections.</summary>
        </member>
        <member name="T:FistCore.Core.SpArgumentPassMode">
            <summary>Specifies how argument is handled and passed to stored procedures.</summary>
        </member>
        <member name="F:FistCore.Core.SpArgumentPassMode.ArgumentDbType">
            <summary>Standard input, output or in/out parameter supported by all databases whose type is unambigously defined by <see cref="T:System.Data.DbType"/> enumeration.</summary>
        </member>
        <member name="F:FistCore.Core.SpArgumentPassMode.DataTableFilledByAdapter">
            <summary>Output parameter represented by <see cref="T:System.Data.DataTable"/> filled by <see cref="T:System.Data.IDataAdapter"/>. Example: Oracle cursor.</summary>
        </member>
        <member name="T:FistCore.Core.DbParameter">
            <summary>
            Represents an SQL command parameter. Converted to appropriate IDbDataParameter object during the command execution.
            </summary>
        </member>
        <member name="M:FistCore.Core.DbParameter.#ctor">
            <summary>
            Initializes a new instance of the DbParameter class.
            </summary>
        </member>
        <member name="M:FistCore.Core.DbParameter.#ctor(System.String,System.Data.DbType)">
            <summary>
            Initializes a new instance of the DbParameter class.
            </summary>
            <param name="name">The name of the parameter to map. <b>Null</b> is not allowed.</param>
            <param name="dbType">One of the <see cref="P:FistCore.Core.DbParameter.DbType"/> values.</param>
        </member>
        <member name="M:FistCore.Core.DbParameter.#ctor(System.String,System.Data.DbType,System.Object,System.Data.ParameterDirection)">
            <summary>
            Initializes a new instance of the DbParameter class.
            </summary>
            <param name="name">The name of the parameter to map. <b>Null</b> is not allowed.</param>
            <param name="dbType">One of the <see cref="P:FistCore.Core.DbParameter.DbType"/> values.</param>
            <param name="value">An Object that is the value of the DbParameter.</param>
            <param name="direction">One of the <see cref="T:System.Data.ParameterDirection"/> values.</param>
        </member>
        <member name="M:FistCore.Core.DbParameter.#ctor(System.String,System.Data.DbType,System.Int32,System.Data.ParameterDirection,System.Boolean,System.Byte,System.Byte,System.String,System.Data.DataRowVersion,System.Object)">
            <summary>
            Initializes a new instance of the DbParameter class.
            </summary>
            <param name="name">The name of the parameter to map. <b>Null</b> is not allowed.</param>
            <param name="dbType">One of the <see cref="P:FistCore.Core.DbParameter.DbType"/> values.</param>
            <param name="size">The length of the parameter.</param>
            <param name="direction">One of the <see cref="T:System.Data.ParameterDirection"/> values.</param>
            <param name="isNullable">True if the value of the field can be null, otherwise false.</param>
            <param name="precision">The total number of digits to the left and right of the decimal point to which <see cref="P:FistCore.Core.DbParameter.Value"/> is resolved.</param>
            <param name="scale">The total number of decimal places to which <see cref="P:FistCore.Core.DbParameter.Value"/> is resolved.</param>
            <param name="sourceColumn">The name of the source column.</param>
            <param name="sourceVersion">One of the <see cref="T:System.Data.DataRowVersion"/> values.</param>
            <param name="value">An Object that is the value of the DbParameter.</param>
        </member>
        <member name="M:FistCore.Core.DbParameter.#ctor(System.String,System.Data.DbType,System.Int32,System.Data.ParameterDirection,System.Boolean,System.Byte,System.Byte,System.String,System.Data.DataRowVersion,System.Object,FistCore.Core.SpArgumentPassMode)">
            <summary>
            Initializes a new instance of the DbParameter class.
            </summary>
            <param name="name">The name of the parameter to map. <b>Null</b> is not allowed.</param>
            <param name="dbType">One of the <see cref="P:FistCore.Core.DbParameter.DbType"/> values.</param>
            <param name="size">The length of the parameter.</param>
            <param name="direction">One of the <see cref="T:System.Data.ParameterDirection"/> values.</param>
            <param name="isNullable">True if the value of the field can be null, otherwise false.</param>
            <param name="precision">The total number of digits to the left and right of the decimal point to which <see cref="P:FistCore.Core.DbParameter.Value"/> is resolved.</param>
            <param name="scale">The total number of decimal places to which <see cref="P:FistCore.Core.DbParameter.Value"/> is resolved.</param>
            <param name="sourceColumn">The name of the source column.</param>
            <param name="sourceVersion">One of the <see cref="T:System.Data.DataRowVersion"/> values.</param>
            <param name="value">An Object that is the value of the DbParameter.</param>
            <param name="passMode">Specifies how argument is handled and passed to stored procedures.</param>
        </member>
        <member name="M:FistCore.Core.DbParameter.Render(FistCore.Core.DbmsType,System.Text.StringBuilder,FistCore.Core.DbParameterCollection)">
            <summary>
            Renders the parameter. RenderedName property is set after this method is executed.
            </summary>
            <param name="dbms">Target DBMS.</param>
            <param name="output">StringBuilder to which DBMS dependant parameter name is appended (eg: '@Id' for SQL Server).</param>
            <param name="parameters">SQL parameter collection to which this parameter will be added.
            Another unique name is automatically given to the parameter if another parameter with the
            same name is already in the collection.</param>
        </member>
        <member name="M:FistCore.Core.DbParameter.RenderParameterName(FistCore.Core.DbmsType)">
            <summary>
            Renders the parameter name which depends on target DBMS.
            </summary>
            <param name="dbms">Target DBMS.</param>
            <returns>Rendered parameter name.</returns>
        </member>
        <member name="P:FistCore.Core.DbParameter.ParameterName">
            <summary>
            Gets or sets the name of the parameter. Setter throws exception if given value is <b>null</b>.
            </summary>
            <remarks>Note: the parameter name may be changed during the rendering phase if it's not unique.
            If there are two parameters names "MyParameter" then one of them will be changed to "MyParameter_2".</remarks>
        </member>
        <member name="P:FistCore.Core.DbParameter.DbType">
            <summary>
            Gets or sets the <see cref="T:System.Data.DbType"/> of the parameter.
            </summary>
        </member>
        <member name="P:FistCore.Core.DbParameter.Size">
            <summary>
            Gets or sets the size of the parameter.
            </summary>
        </member>
        <member name="P:FistCore.Core.DbParameter.Direction">
            <summary>
            Gets or sets a value indicating whether the parameter is input-only, output-only, bidirectional, 
            or a stored procedure return value parameter.
            </summary>
        </member>
        <member name="P:FistCore.Core.DbParameter.IsNullable">
            <summary>
            Gets or sets a value indicating whether the parameter accepts null values.
            </summary>
        </member>
        <member name="P:FistCore.Core.DbParameter.Precision">
            <summary>
            Gets or sets the number of decimal places to which <see cref="P:FistCore.Core.DbParameter.Value"/> is resolved.
            </summary>
        </member>
        <member name="P:FistCore.Core.DbParameter.Scale">
            <summary>
            Gets or sets the number of decimal places to which <see cref="P:FistCore.Core.DbParameter.Value"/> is resolved.
            </summary>
        </member>
        <member name="P:FistCore.Core.DbParameter.SourceColumn">
            <summary>
            Gets or sets the name of the source column that is mapped to the DataSet and used for loading or returning the Value.
            </summary>
        </member>
        <member name="P:FistCore.Core.DbParameter.SourceVersion">
            <summary>
            Gets or sets the <see cref="T:System.Data.DataRowVersion"/> to use when loading <see cref="P:FistCore.Core.DbParameter.Value"/>.
            </summary>
        </member>
        <member name="P:FistCore.Core.DbParameter.Value">
            <summary>
            Gets or sets the value of the parameter.
            </summary>
        </member>
        <member name="P:FistCore.Core.DbParameter.PassMode">
            <summary>
            Gets or sets how argument is handled and passed to stored procedures.
            </summary>
            <value>One of values from <see cref="T:FistCore.Core.SpArgumentPassMode"/> enumeration. Default is <see cref="F:FistCore.Core.SpArgumentPassMode.ArgumentDbType"/>.</value>
        </member>
        <member name="P:FistCore.Core.DbParameter.RenderedName">
            <summary>
            Gets the rendered parameter name which depends on target DBMS.
            Null if the parameter hasn't been rendered yet.
            </summary>
        </member>
        <member name="T:FistCore.Core.DbParameterCollection">
            <summary>
            Collection of <see cref="T:FistCore.Core.DbParameter"/> objects.
            </summary>
            <remarks>Simple parameter collection. SqlParameterCollection has to many constraints.</remarks>
        </member>
        <member name="M:FistCore.Core.DbParameterCollection.Add(FistCore.Core.DbParameter)">
            <summary>
            Adds a parameter to the collection.
            </summary>
            <param name="par">Parameter. <b>Null</b> is not allowed.</param>
        </member>
        <member name="M:FistCore.Core.DbParameterCollection.Clear">
            <summary>
            Removes all parameters from the collection.
            </summary>
        </member>
        <member name="M:FistCore.Core.DbParameterCollection.GetEnumerator">
            <summary>
            Gets an enumerator that can iterate through DbParameterCollection.
            </summary>
        </member>
        <member name="M:FistCore.Core.DbParameterCollection.System#Collections#Generic#IEnumerable{FistCore#Core#DbParameter}#GetEnumerator">
            <summary>
            Gets an enumerator that can iterate through DbParameterCollection.
            </summary>
        </member>
        <member name="P:FistCore.Core.DbParameterCollection.Item(System.Int32)">
            <summary>
            Gets or sets the parameter at the specified postion.
            Setter throws exception is the given value is <b>null</b>.
            </summary>
        </member>
        <member name="P:FistCore.Core.DbParameterCollection.Item(System.String)">
            <summary>
            Gets the parameter whith the specified name. Null if it doesn't exist.
            </summary>
        </member>
        <member name="P:FistCore.Core.DbParameterCollection.Count">
            <summary>
            Gets the total number of parameters in this collection.
            </summary>
        </member>
        <member name="T:FistCore.Core.ProviderComponents.IParameterRenderer">
            <summary>Renders DB paremeters when used inside statementes..</summary>
        </member>
        <member name="M:FistCore.Core.ProviderComponents.IParameterRenderer.RenderParameterName(FistCore.Core.DbParameter)">
            <summary>Renders parameter name.</summary>
            <param name="parameter">SQL command parameter.</param>
            <returns>Parameter name.</returns>
        </member>
        <member name="M:FistCore.Core.ProviderComponents.IParameterRenderer.GetUniqueName(System.String,System.Int32)">
            <summary>Creates uniqe name for a collection.</summary>
            <param name="originalParameterName">Parameter name before it was made unique.</param>
            <param name="parameterIndexInCollection">index of parameter in ParameterCollection.</param>
            <returns>Unique parameter name.</returns>
        </member>
        <member name="T:FistCore.Core.IEntityCollection">
            <summary>A collection of entities of the same type, ie. which are stored in the same database table.</summary>
        </member>
        <member name="M:FistCore.Core.IEntityCollection.GetRange(System.Int32,System.Int32)">
            <summary>
            Creates a shallow copy of a range of elements in the source IEntityCollection.
            </summary>
            <param name="index">The zero-based IEntityCollection index at which the range starts.</param>
            <param name="count">The number of elements in the range.</param>
        </member>
        <member name="M:FistCore.Core.IEntityCollection.Add(FistCore.Core.IEntity,System.Boolean)">
            <summary>
            Adds an entity to the end of the collection.
            </summary>
            <param name="entity">The entity to be added to the end of the EntityCollection.
            Nulls are not allowed, otherwise a NoNullAllowedException is generated.
            Entity must be an instance of a class compatible with <see cref="P:FistCore.Core.IEntityCollection.IDbTable"/>.</param>
            <param name="validateEntityType">Indicates whether the type of entity is validated to
            determine if it is an instance of a class compatible with <see cref="P:FistCore.Core.IEntityCollection.IDbTable"/>.
            Set to <b>false</b> only when absoulutely sure that the entity is compatibile.
            Setting this parameter to <b>false</b> may increase performance.</param>
        </member>
        <member name="M:FistCore.Core.IEntityCollection.GetByPK(System.Object[])">
            <summary>Gets the first entity with the given primary key value.</summary>
            <param name="primaryKeyValue">Primary key values in order as returned by <see cref="M:FistCore.Core.IEntity.GetPrimaryKeyValue"/> method.</param>
            <returns>Entity with the given key or <b>null</b> if it cannot be found.</returns>
        </member>
        <member name="M:FistCore.Core.IEntityCollection.FromDataTable(System.Data.DataTable)">
            <summary>Clears the collection and fills it with entities created from the given data.</summary>
            <param name="data">DataTable containing data for entities.</param>
        </member>
        <member name="M:FistCore.Core.IEntityCollection.FromDataTable(System.Data.DataTable,FistCore.Core.IDbTable)">
            <summary>Clears the collection and fills it with entities created from the given data.</summary>
            <param name="data">DataTable containing data for entities.</param>
            <param name="fieldMetadata"><see cref="P:FistCore.Core.IEntityCollection.IDbTable"/> meta data object which links ADO.NET row columns to entity properties.</param>
            <remarks>This method, when used in combination with <see cref="P:FistCore.Core.IEntityCollection.IDbTable"/> objects that contain columns with
            prefixed aliases (see <see cref="M:FistCore.Core.IDbTable.SetPrefixedAliases"/>), enables you to initialize multiple
            entities that belong to different tables with data from a single DataRow.</remarks>
        </member>
        <member name="M:FistCore.Core.IEntityCollection.ToDataTable">
            <summary>Converts the collection to DataTable.</summary>
            <returns>Data.</returns>
            <remarks><para>Conversion will fail if the collection contains entities whose non-nullable fields
            haven't been initialized or if it contains multiple entities with the same primary key.</para>
            <para>All rows will have <see cref="F:System.Data.DataRowState.Added"/> state.</para></remarks>
        </member>
        <member name="M:FistCore.Core.IEntityCollection.SetParents(FistCore.Core.DbRelation,FistCore.Core.IEntity)">
            <summary>Sets the parent defined by the given relation for all entities in the collection.</summary>
            <param name="foreignKey">FK.</param>
            <param name="parent">Parent entity.</param>
            <remarks>All child entities in the collection will share the same parent object instance (same reference).</remarks>
        </member>
        <member name="M:FistCore.Core.IEntityCollection.SetParents(FistCore.Core.DbRelation,FistCore.Core.IEntity,System.Boolean)">
            <summary>
            Sets the parent defined by the given relation for all entities in the collection.
            </summary>
            <param name="foreignKey">FK.</param>
            <param name="parent">Parent entity.</param>
            <param name="shareParentObject">Indicates if all child entities in the collection will share the same
            parent object instance (same reference). If set to <b>false</b>, a clone of the parent will be created
            for each child entity in the current collection.</param>
        </member>
        <member name="M:FistCore.Core.IEntityCollection.SetParents(FistCore.Core.DbRelation,System.Collections.IEnumerable)">
            <summary>
            Sets the parent defined by the given relation for all entities in the collection.
            </summary>
            <param name="foreignKey">FK.</param>
            <param name="parents">Collection of all parent entities referenced by child entities in the current
            collection. If any child references a parent which is not provided, an exception will be generated.</param>
            <remarks><p>The method will try to find a parent in the provided collection for each child entity
            in the current collection. Child whose FK is not set are skipped. If any child references a parent
            which is not provided, an exception will be generated. If a child's FK is invalid, i.e. only partially
            set, an exception will be generated.</p>
            <p>Child entities with equal FK values will share the same parent object instance (same reference).</p></remarks>
        </member>
        <member name="M:FistCore.Core.IEntityCollection.SetParents(FistCore.Core.DbRelation,System.Collections.IEnumerable,System.Boolean)">
            <summary>Sets the parent defined by the given relation for all entities in the collection.</summary>
            <param name="foreignKey">FK.</param>
            <param name="parents">Collection of all parent entities referenced by child entities in the current
            collection. If any child references a parent which is not provided, an exception will be generated.</param>
            <param name="shareParentObject">Indicates if child entities with equal FK values will share the same
            parent object instance (same reference). If set to <b>false</b>, a clone of a parent will be created
            for each child entity in the current collection.</param>
            <remarks><p>The method will try to find a parent in the provided collection for each child entity
            in the current collection. Child whose FK is not set are skipped. If any child references a parent
            which is not provided, an exception will be generated. If a child's FK is invalid, i.e. only partially
            set, an exception will be generated.</p></remarks>
        </member>
        <member name="P:FistCore.Core.IEntityCollection.Item(System.Int32)">
            <summary>Gets or sets entity at the specified zero-based index.</summary>
            <param name="index">The zero-based index of the entity to get or set. </param>
            <returns>The entity at the specified index.</returns>
        </member>
        <member name="P:FistCore.Core.IEntityCollection.IDbTable">
            <summary>Gets <see cref="P:FistCore.Core.IEntityCollection.IDbTable"/> object for table/view that stores entities from this collection.</summary>
        </member>
        <member name="T:FistCore.Core.Messages">
            <summary>
              A strongly-typed resource class, for looking up localized strings, etc.
            </summary>
        </member>
        <member name="P:FistCore.Core.Messages.ResourceManager">
            <summary>
              Returns the cached ResourceManager instance used by this class.
            </summary>
        </member>
        <member name="P:FistCore.Core.Messages.Culture">
            <summary>
              Overrides the current thread's CurrentUICulture property for all
              resource lookups using this strongly typed resource class.
            </summary>
        </member>
        <member name="P:FistCore.Core.Messages.AggregateFunctionFactory_FieldMayNotBeNull">
            <summary>
              Looks up a localized string similar to Field may not be NULL..
            </summary>
        </member>
        <member name="P:FistCore.Core.Messages.ConnectionProvider_ConnectionIsAlreadyOpen">
            <summary>
              Looks up a localized string similar to Connection is already open..
            </summary>
        </member>
        <member name="P:FistCore.Core.Messages.ConnectionProvider_ConnectionStringMayNotBeNull">
            <summary>
              Looks up a localized string similar to Connection string may not be NULL..
            </summary>
        </member>
        <member name="P:FistCore.Core.Messages.ConnectionProvider_ConnIsNotOpen">
            <summary>
              Looks up a localized string similar to Connection is not open..
            </summary>
        </member>
        <member name="P:FistCore.Core.Messages.ConnectionProvider_ThereIsNoTranPending">
            <summary>
              Looks up a localized string similar to There is no transaction pending..
            </summary>
        </member>
        <member name="P:FistCore.Core.Messages.ConnectionProvider_TranAlreadyPending">
            <summary>
              Looks up a localized string similar to Already transaction pending. Nesting not allowed..
            </summary>
        </member>
        <member name="P:FistCore.Core.Messages.ConnectionProvider_UnsupportedDbmsType">
            <summary>
              Looks up a localized string similar to Unsupported DBMS type: .
            </summary>
        </member>
        <member name="P:FistCore.Core.Messages.ContainsPredicate_FieldXIsNotTextual">
            <summary>
              Looks up a localized string similar to CONTAINS predicate may only be used with textual field. {0} is not textual..
            </summary>
        </member>
        <member name="P:FistCore.Core.Messages.ContainsPredicate_NullIsNotAllowed">
            <summary>
              Looks up a localized string similar to Null is not allowed..
            </summary>
        </member>
        <member name="P:FistCore.Core.Messages.ContainsPredicate_TermIsNotValid">
            <summary>
              Looks up a localized string similar to Provided term is not valid. It must contain at least one alphanumeric or underscore character..
            </summary>
        </member>
        <member name="P:FistCore.Core.Messages.DaoBase_ConnectionProviderMayNotBeNull">
            <summary>
              Looks up a localized string similar to ConnectionProvider may not be NULL..
            </summary>
        </member>
        <member name="P:FistCore.Core.Messages.DbColumn_CantSetSeqForXBecauseNotAutoIncrement">
            <summary>
              Looks up a localized string similar to Sequence may not be assigned to {0} column because it is not an auto-incremented column..
            </summary>
        </member>
        <member name="P:FistCore.Core.Messages.DbColumn_DbColumnIsReadOnlyDataMayNotBeAltered">
            <summary>
              Looks up a localized string similar to This DbColumn is read only. Data may not be altered..
            </summary>
        </member>
        <member name="P:FistCore.Core.Messages.DbColumnCollection_ColumnMayNotBeNull">
            <summary>
              Looks up a localized string similar to Column may not be NULL..
            </summary>
        </member>
        <member name="P:FistCore.Core.Messages.DbColumnCollection_ErrorBecauseItsReadOnly">
            <summary>
              Looks up a localized string similar to The attempted operation is invalid when the collection is in read-only state..
            </summary>
        </member>
        <member name="P:FistCore.Core.Messages.DbmsComponentFactory_DbmsXIsNotSupported">
            <summary>
              Looks up a localized string similar to Specified DBMS {0} is not supported..
            </summary>
        </member>
        <member name="P:FistCore.Core.Messages.DbParameter_NameMayNotBeNull">
            <summary>
              Looks up a localized string similar to ParameterName may not be NULL..
            </summary>
        </member>
        <member name="P:FistCore.Core.Messages.DbParameterCollection_ParamMayNotBeNull">
            <summary>
              Looks up a localized string similar to Given parameter may not be null..
            </summary>
        </member>
        <member name="P:FistCore.Core.Messages.DbRelation_ChildFkMayNotBeNull">
            <summary>
              Looks up a localized string similar to Child&apos;s foreign key may not be null..
            </summary>
        </member>
        <member name="P:FistCore.Core.Messages.DbRelation_FieldTypesDontMatchXIsNotEqualToY">
            <summary>
              Looks up a localized string similar to Field types don&apos;t match: parentPrimaryKey[{0}].DbType != childForeignKey[{1}].DbType.
            </summary>
        </member>
        <member name="P:FistCore.Core.Messages.DbRelation_ParentAndChildKeysMustHaveEqualLen">
            <summary>
              Looks up a localized string similar to Parent and child keys must have equal number of columns..
            </summary>
        </member>
        <member name="P:FistCore.Core.Messages.DbRelation_ParentPkMayNotBeNull">
            <summary>
              Looks up a localized string similar to Parent&apos;s primary key may not be null..
            </summary>
        </member>
        <member name="P:FistCore.Core.Messages.DbRelationCollection_TableAliasMayNotBeNull">
            <summary>
              Looks up a localized string similar to Table alias may not be null..
            </summary>
        </member>
        <member name="P:FistCore.Core.Messages.DbTable_GetChildRelationsNotImplemented">
            <summary>
              Looks up a localized string similar to GetChildRelations() method must be implemented in derived classes..
            </summary>
        </member>
        <member name="P:FistCore.Core.Messages.DbTable_GetChildTablesNotImplemented">
            <summary>
              Looks up a localized string similar to GetChildTables() method must be implemented in derived classes..
            </summary>
        </member>
        <member name="P:FistCore.Core.Messages.EntityBase_AtLeaseOneFieldMustBeSetToPerformUpdate">
            <summary>
              Looks up a localized string similar to At least one field has to be set to perform update..
            </summary>
        </member>
        <member name="P:FistCore.Core.Messages.EntityBase_CannotAutoDeterminParentTableInRecursiveMnRelation">
            <summary>
              Looks up a localized string similar to Cannot automatically decide which table is used as a parent table in a recursive many-to-many relation..
            </summary>
        </member>
        <member name="P:FistCore.Core.Messages.EntityBase_ConnectionProviderMayNotBeNull">
            <summary>
              Looks up a localized string similar to ConnectionProvider may not be NULL..
            </summary>
        </member>
        <member name="P:FistCore.Core.Messages.EntityBase_CurrTableMustBeParentExpectedXButGotY">
            <summary>
              Looks up a localized string similar to Current entity&apos;s table must be defined as a child table in the given FK. Expected {0}, but {1} was provided..
            </summary>
        </member>
        <member name="P:FistCore.Core.Messages.EntityBase_DaoFactoryMayNotBeNull">
            <summary>
              Looks up a localized string similar to DAO creation strategies may not be null..
            </summary>
        </member>
        <member name="P:FistCore.Core.Messages.EntityBase_FieldXDoesNotBelongToChildTable">
            <summary>
              Looks up a localized string similar to The specified field {0} does not belong to the child table..
            </summary>
        </member>
        <member name="P:FistCore.Core.Messages.EntityBase_InvalidParentExpectedXButGotY">
            <summary>
              Looks up a localized string similar to Invalid parent table. Expected {0}, but {1} was provided..
            </summary>
        </member>
        <member name="P:FistCore.Core.Messages.EntityBase_NegativeValueIsNotAllowed">
            <summary>
              Looks up a localized string similar to Negative value is not allowed..
            </summary>
        </member>
        <member name="P:FistCore.Core.Messages.EntityBase_PkFieldsNotSet">
            <summary>
              Looks up a localized string similar to Primary key field(s) of this entity are not set..
            </summary>
        </member>
        <member name="P:FistCore.Core.Messages.EntityBase_PkIsNotDefinedForTable">
            <summary>
              Looks up a localized string similar to Primary key is not defined for the parent table/view..
            </summary>
        </member>
        <member name="P:FistCore.Core.Messages.EntityBase_PkOfCurrParentEntityNotSet">
            <summary>
              Looks up a localized string similar to Primary key of the current (parent) entity is not set..
            </summary>
        </member>
        <member name="P:FistCore.Core.Messages.EntityBase_SearchConditionMayNotBeNullOrEmpty">
            <summary>
              Looks up a localized string similar to Search condition may not be NULL or empty..
            </summary>
        </member>
        <member name="P:FistCore.Core.Messages.EntityBase_UnsupportedMnParentValue">
            <summary>
              Looks up a localized string similar to Unsupported ManyToManyParent value: .
            </summary>
        </member>
        <member name="P:FistCore.Core.Messages.EntityBase_UpdateListMayBotBeNullOrEmpty">
            <summary>
              Looks up a localized string similar to Update list may not be NULL or empty..
            </summary>
        </member>
        <member name="P:FistCore.Core.Messages.EntityBuilder_ReaderIsClosed">
            <summary>
              Looks up a localized string similar to Data reader is closed..
            </summary>
        </member>
        <member name="P:FistCore.Core.Messages.EntityCollection_NullsNotAllowed">
            <summary>
              Looks up a localized string similar to Nulls are not allowed in the EntityCollection..
            </summary>
        </member>
        <member name="P:FistCore.Core.Messages.EntityCollection_OnlyXOrDerivedClassesAreAllowed">
            <summary>
              Looks up a localized string similar to Only {0} or derived objects are allowed in the collection..
            </summary>
        </member>
        <member name="P:FistCore.Core.Messages.EntityCollection_SetParents_InvalidFk">
            <summary>
              Looks up a localized string similar to An entity in the current collection references a parent which is not found in the given collection..
            </summary>
        </member>
        <member name="P:FistCore.Core.Messages.EntityDAO_AtLeastOneFieldMustBeSetToExecUpdate">
            <summary>
              Looks up a localized string similar to At least one field has to be set to perform update..
            </summary>
        </member>
        <member name="P:FistCore.Core.Messages.EntityDAO_CantAutoDecideWhichTableIsParentInMnRelation">
            <summary>
              Looks up a localized string similar to Cannot automatically decide which table is used as a parent table in a recursive many-to-many relation..
            </summary>
        </member>
        <member name="P:FistCore.Core.Messages.EntityDAO_CurrEntityTableMustBeParentExpectedXGotY">
            <summary>
              Looks up a localized string similar to Current entity&apos;s table must be defined as a parent table in the given relation. Expected {0}, but {1} was provided..
            </summary>
        </member>
        <member name="P:FistCore.Core.Messages.EntityDAO_CurrTableMustBeParentExpectedXButGotY">
            <summary>
              Looks up a localized string similar to Current entity&apos;s table must be defined as a child table in the given FK. Expected {0}, but {1} was provided..
            </summary>
        </member>
        <member name="P:FistCore.Core.Messages.EntityDAO_DaoFactoryMayNotBeNull">
            <summary>
              Looks up a localized string similar to DAO factory may not be null..
            </summary>
        </member>
        <member name="P:FistCore.Core.Messages.EntityDAO_EntityMayNotBeNull">
            <summary>
              Looks up a localized string similar to Entity to work with may not be null..
            </summary>
        </member>
        <member name="P:FistCore.Core.Messages.EntityDAO_InvalidParentTableExpectedXGotY">
            <summary>
              Looks up a localized string similar to Invalid parent table. Expected {0}, but {1} was provided..
            </summary>
        </member>
        <member name="P:FistCore.Core.Messages.EntityDAO_NegativeValueIsNotAllowed">
            <summary>
              Looks up a localized string similar to Negative value is not allowed..
            </summary>
        </member>
        <member name="P:FistCore.Core.Messages.EntityDAO_PkMustBeDefinedAndInited">
            <summary>
              Looks up a localized string similar to PK must be defined for entity&apos;s table and PK properties must be initialized..
            </summary>
        </member>
        <member name="P:FistCore.Core.Messages.EntityDAO_PkNotDefinedForTable">
            <summary>
              Looks up a localized string similar to Primary key is not defined for the entity&apos;s table/view..
            </summary>
        </member>
        <member name="P:FistCore.Core.Messages.EntityDAO_PkNotSet">
            <summary>
              Looks up a localized string similar to Primary key field(s) of the entity are not set..
            </summary>
        </member>
        <member name="P:FistCore.Core.Messages.EntityDAO_PkOfCurrParentEntityIsNotSet">
            <summary>
              Looks up a localized string similar to Primary key of the current (parent) entity is not set..
            </summary>
        </member>
        <member name="P:FistCore.Core.Messages.EntityDAO_RelationCountMustBeEqualToCollectionCount">
            <summary>
              Looks up a localized string similar to The count and order of relations must match the count and order of collections..
            </summary>
        </member>
        <member name="P:FistCore.Core.Messages.EntityDAO_SearchConditionMayNotBeNullOrEmpty">
            <summary>
              Looks up a localized string similar to Search condition may not be NULL or empty..
            </summary>
        </member>
        <member name="P:FistCore.Core.Messages.EntityDAO_SpecifiedFieldXDoesntBelongToChildTable">
            <summary>
              Looks up a localized string similar to The specified field ({0}) does not belong to the child table..
            </summary>
        </member>
        <member name="P:FistCore.Core.Messages.EntityDAO_UnsupportedManyToManyParentValue">
            <summary>
              Looks up a localized string similar to Unsupported ManyToManyParent value: .
            </summary>
        </member>
        <member name="P:FistCore.Core.Messages.EntityDAO_UpdateListMayNotBeNullOrEmpty">
            <summary>
              Looks up a localized string similar to Update list may not be NULL or empty..
            </summary>
        </member>
        <member name="P:FistCore.Core.Messages.EntityDaoFactory_DefaultStrategyMayNotBeNull">
            <summary>
              Looks up a localized string similar to Default strategy may not be null..
            </summary>
        </member>
        <member name="P:FistCore.Core.Messages.EntityFiller_ReaderIsClosed">
            <summary>
              Looks up a localized string similar to Reader is closed..
            </summary>
        </member>
        <member name="P:FistCore.Core.Messages.EntityModelBase_EntityNotFromSameTableExpextedXButGotY">
            <summary>
              Looks up a localized string similar to Given entity doesn&apos;t belong to same table as current entity. Expected {0} but {1} was provided..
            </summary>
        </member>
        <member name="P:FistCore.Core.Messages.EntityModelBase_SpecFieldDoesntExistInEntity">
            <summary>
              Looks up a localized string similar to Specified field doesn&apos;t exist in this entity..
            </summary>
        </member>
        <member name="P:FistCore.Core.Messages.EntityModelBase_TableDoesntContainSpecifiedColumn">
            <summary>
              Looks up a localized string similar to DataTable doesn&apos;t contain the specified column: .
            </summary>
        </member>
        <member name="P:FistCore.Core.Messages.EntityModelBase_TableProviderMustBeStaticMethod">
            <summary>
              Looks up a localized string similar to The provided method must be static..
            </summary>
        </member>
        <member name="P:FistCore.Core.Messages.ExistsPredicate_OnlySubqueriesAreAllowed">
            <summary>
              Looks up a localized string similar to Exists predicate accepts only SqlItemType.SubQuery items..
            </summary>
        </member>
        <member name="P:FistCore.Core.Messages.GenericEntityCollection_OnlyXOrDerivedClassesAreAllowed">
            <summary>
              Looks up a localized string similar to Only {0} or derived objects are allowed in the collection..
            </summary>
        </member>
        <member name="P:FistCore.Core.Messages.GenericHierarchicalQueryExecutor_EndLevelMustBeGreaterThanBeginLevel">
            <summary>
              Looks up a localized string similar to End level must be greater than begin level..
            </summary>
        </member>
        <member name="P:FistCore.Core.Messages.GenericHierarchicalQueryExecutor_MaxLevelReachedFormat">
            <summary>
              Looks up a localized string similar to The maximum (sub)tree level has been reached. The maximum level may not be higher than {0}. This can be changed by configuring &apos;FistCore.Core.GenericHierarchicalQueryExecutor.MaxLevel&apos; entry in appSettings section of application&apos;s configuration file. The configured value may not be greater than 65535..
            </summary>
        </member>
        <member name="P:FistCore.Core.Messages.GenericHierarchicalQueryExecutor_MustBePositiveInteger">
            <summary>
              Looks up a localized string similar to Must be a positive integer..
            </summary>
        </member>
        <member name="P:FistCore.Core.Messages.GenericHierarchicalQueryExecutor_OnyNumberMayBeSummedColXTypeIsY">
            <summary>
              Looks up a localized string similar to Only numbers can be summed. Column &apos;{0}&apos; type is: {1}.
            </summary>
        </member>
        <member name="P:FistCore.Core.Messages.GenericHierarchicalQueryExecutor_RecursiveRelationIsRequired">
            <summary>
              Looks up a localized string similar to A recursive relation is required..
            </summary>
        </member>
        <member name="P:FistCore.Core.Messages.GenericUpdater_SetListIsEmpty">
            <summary>
              Looks up a localized string similar to The SET list is empty..
            </summary>
        </member>
        <member name="P:FistCore.Core.Messages.InPredicate_AtLeastOneValueIsRequired">
            <summary>
              Looks up a localized string similar to At least one value is required for InPredicate..
            </summary>
        </member>
        <member name="P:FistCore.Core.Messages.InPredicate_NullsAreNotAllowedInArray">
            <summary>
              Looks up a localized string similar to Given list may not contain NULLs..
            </summary>
        </member>
        <member name="P:FistCore.Core.Messages.InsertList_MayNotContainNulls">
            <summary>
              Looks up a localized string similar to InsertList may not contain nulls..
            </summary>
        </member>
        <member name="P:FistCore.Core.Messages.InsertStatement_ColMayNoBeNull">
            <summary>
              Looks up a localized string similar to Column may not be NULL..
            </summary>
        </member>
        <member name="P:FistCore.Core.Messages.ManyToManyRelation_RelationsSpecifyDiffJunctionTables">
            <summary>
              Looks up a localized string similar to Relations specify different junction tables..
            </summary>
        </member>
        <member name="P:FistCore.Core.Messages.OrderByClause_ColumnNameMayNotBeNullOrEmpty">
            <summary>
              Looks up a localized string similar to Column name may not be NULL or empty string..
            </summary>
        </member>
        <member name="P:FistCore.Core.Messages.OrderByClause_FieldMayNotBeNull">
            <summary>
              Looks up a localized string similar to Field may not be NULL..
            </summary>
        </member>
        <member name="P:FistCore.Core.Messages.PkUtil_FkMustBeCompleteOrNull">
            <summary>
              Looks up a localized string similar to FK values in the child entity are invalid. Either all, or none of the FK properties must be set..
            </summary>
        </member>
        <member name="P:FistCore.Core.Messages.PredicateFactory_ObjReferenceIsNull">
            <summary>
              Looks up a localized string similar to Object reference not set to an instance of an object..
            </summary>
        </member>
        <member name="P:FistCore.Core.Messages.PredicateItem_UnsupportedItemType">
            <summary>
              Looks up a localized string similar to Unsupported item type: .
            </summary>
        </member>
        <member name="P:FistCore.Core.Messages.RecursiveCteExecutor_EndLevelMustBeGreaterThanBeginLevel">
            <summary>
              Looks up a localized string similar to End level must be greater than begin level..
            </summary>
        </member>
        <member name="P:FistCore.Core.Messages.RecursiveCteExecutor_MustBePositiveInteger">
            <summary>
              Looks up a localized string similar to Must be a positive integer..
            </summary>
        </member>
        <member name="P:FistCore.Core.Messages.RecursiveCteExecutor_RecursiveRelationIsRequired">
            <summary>
              Looks up a localized string similar to A recursive relation is required..
            </summary>
        </member>
        <member name="P:FistCore.Core.Messages.RecursiveCteExecutor_StatementWichUsesCteIsNotYetSet">
            <summary>
              Looks up a localized string similar to A statement which uses the CTE is not yet set..
            </summary>
        </member>
        <member name="P:FistCore.Core.Messages.RecursiveCteExecutor_UpdateStatementWichUsesCteIsNotYetSet">
            <summary>
              Looks up a localized string similar to Update statement which uses CTE is not set..
            </summary>
        </member>
        <member name="P:FistCore.Core.Messages.RelationBucket_AlreadyConnectsXAndYTables">
            <summary>
              Looks up a localized string similar to The bucket already contains a relation that connects the {0} and {1} tables..
            </summary>
        </member>
        <member name="P:FistCore.Core.Messages.RelationBucket_DataSetNotCompatible">
            <summary>
              Looks up a localized string similar to Target DataSet structure is not compatible with this RelationBucket. Missing table: .
            </summary>
        </member>
        <member name="P:FistCore.Core.Messages.RelationBucket_None">
            <summary>
              Looks up a localized string similar to NONE.
            </summary>
        </member>
        <member name="P:FistCore.Core.Messages.RelationBucket_NotAllTablesAreConnectedTheseAreConnected">
            <summary>
              Looks up a localized string similar to Relations in the RelationBucket do not connect all tables. Make sure that all relations required to connect the table have been provided. If table aliases are used then check that relations properly use them. The following tables have been successfully added to the FROM clause:.
            </summary>
        </member>
        <member name="P:FistCore.Core.Messages.SealedDbTable_GetChildRelationsNotImplemented">
            <summary>
              Looks up a localized string similar to GetChildRelations() method must be implemented in derived classes..
            </summary>
        </member>
        <member name="P:FistCore.Core.Messages.SealedDbTable_GetChildTablesNotImplemented">
            <summary>
              Looks up a localized string similar to GetChildTables() method must be implemented in derived classes..
            </summary>
        </member>
        <member name="P:FistCore.Core.Messages.SearchCondition_PredicateMayNotBeNull">
            <summary>
              Looks up a localized string similar to Predicate may not be NULL..
            </summary>
        </member>
        <member name="P:FistCore.Core.Messages.SearchCondition_SubConditionMayNotBeNull">
            <summary>
              Looks up a localized string similar to Sub-condition may not be NULL or empty..
            </summary>
        </member>
        <member name="P:FistCore.Core.Messages.SelectItem_UnsuportedItemType">
            <summary>
              Looks up a localized string similar to Unsupported item type:.
            </summary>
        </member>
        <member name="P:FistCore.Core.Messages.SelectItemCollection_ObjRefIsNull">
            <summary>
              Looks up a localized string similar to Object reference not set to an instance of an object..
            </summary>
        </member>
        <member name="P:FistCore.Core.Messages.SqlUpdater_SetListIsEmpty">
            <summary>
              Looks up a localized string similar to The SET list is empty..
            </summary>
        </member>
        <member name="P:FistCore.Core.Messages.UpdateExpression_UnsupportedItemType">
            <summary>
              Looks up a localized string similar to Unsupported item type: .
            </summary>
        </member>
        <member name="P:FistCore.Core.Messages.UpdateExpression_ValMayNotBeNull">
            <summary>
              Looks up a localized string similar to Value cannot be null..
            </summary>
        </member>
        <member name="P:FistCore.Core.Messages.UpdateList_ColMayNotBeNull">
            <summary>
              Looks up a localized string similar to Column may not be NULL..
            </summary>
        </member>
        <member name="T:FistCore.Core.Properties.Resources">
            <summary>
              A strongly-typed resource class, for looking up localized strings, etc.
            </summary>
        </member>
        <member name="P:FistCore.Core.Properties.Resources.ResourceManager">
            <summary>
              Returns the cached ResourceManager instance used by this class.
            </summary>
        </member>
        <member name="P:FistCore.Core.Properties.Resources.Culture">
            <summary>
              Overrides the current thread's CurrentUICulture property for all
              resource lookups using this strongly typed resource class.
            </summary>
        </member>
        <member name="T:FistCore.Core.DbRelation">
            <summary>
            Represents a parent/child relationship between two <see cref="T:FistCore.Core.IDbTable"/> objects.
            <seealso cref="T:FistCore.Core.RelationBucket"/>
            </summary>
            <example>
            The following examples creates a relation between Employees table (parent) and EmployeeTerritories table (child).
            <code>
            EmployeesMeta employees = new EmployeesMeta();
            EmployeeTerritoriesMeta empTerritories = new EmployeeTerritoriesMeta();
            DbRelation relation = new DbRelation(employees, empTerritories, empTerritories.EmployeeID);
            </code>
            </example>
        </member>
        <member name="F:FistCore.Core.DbRelation.name">
            <summary>
            Relation name.
            </summary>
        </member>
        <member name="F:FistCore.Core.DbRelation.parent">
            <summary>
            Parent table.
            </summary>
        </member>
        <member name="F:FistCore.Core.DbRelation.parentPK">
            <summary>
            Parent table's primary key fields.
            </summary>
        </member>
        <member name="F:FistCore.Core.DbRelation.child">
            <summary>
            Child table.
            </summary>
        </member>
        <member name="F:FistCore.Core.DbRelation.childFK">
            <summary>
            Child table's foreing key fields which connect it with the parent table.
            </summary>
        </member>
        <member name="M:FistCore.Core.DbRelation.#ctor(FistCore.Core.IDbTable,FistCore.Core.IDbTable,FistCore.Core.IDbColumn,System.String)">
            <summary>
            Initializes a new instance of the DbRelation class.
            </summary>
            <remarks>Creates a relation between two tables.</remarks>
            <param name="parent">Parent/master table.</param>
            <param name="child">Child/data table.</param>
            <param name="childForeignKey">Child foreign key.</param>
            <param name="name">Relation name. If <b>null</b> then a default name is created.</param>
        </member>
        <member name="M:FistCore.Core.DbRelation.#ctor(FistCore.Core.IDbTable,FistCore.Core.IDbTable,FistCore.Core.IDbColumn)">
            <summary>
            Initializes a new instance of the DbRelation class.
            </summary>
            <remarks>Creates a relation between two tables with a default name.</remarks>
            <param name="parent">Parent/master table.</param>
            <param name="child">Child/data table.</param>
            <param name="childForeignKey">Child foreign key.</param>
        </member>
        <member name="M:FistCore.Core.DbRelation.#ctor(FistCore.Core.IDbTable,FistCore.Core.IDbColumn[],FistCore.Core.IDbTable,FistCore.Core.IDbColumn[],System.String)">
            <summary>
            Initializes a new instance of the DbRelation class.
            </summary>
            <remarks>Creates a relation between two tables with a default name.</remarks>
            <param name="parent">Parent/master table.</param>
            <param name="parentPrimaryKey">Parent primary key.</param>
            <param name="child">Child/data table.</param>
            <param name="childForeignKey">Child foreign key.</param>
            <param name="relationName">Relation name. If <b>null</b> then a default name is created.</param>
        </member>
        <member name="M:FistCore.Core.DbRelation.Init(FistCore.Core.IDbTable,FistCore.Core.IDbColumn[],FistCore.Core.IDbTable,FistCore.Core.IDbColumn[],System.String)">
            <summary>
            Initializes object.
            </summary>
            <param name="parent">Parent/master table.</param>
            <param name="parentPrimaryKey">Parent primary key.</param>
            <param name="child">Child/data table.</param>
            <param name="childForeignKey">Child foreign key. The collection must exactly match the order and 
            the types of parent's primary key fields.</param>
            <param name="name">Relation name. If <b>null</b> then a default name is created.</param>
        </member>
        <member name="M:FistCore.Core.DbRelation.GenerateName(FistCore.Core.IDbTable,FistCore.Core.IDbTable)">
            <summary>
            Generates a default name.
            </summary>
            <param name="parent">Parent/master table.</param>
            <param name="child">Child/data table.</param>
            <returns>Relation name.</returns>
        </member>
        <member name="M:FistCore.Core.DbRelation.ValidateKeys(FistCore.Core.IDbColumn[],FistCore.Core.IDbColumn[])">
            <summary>
            Validates whether the parent's primary key is compatible with the child's foreing key.
            Throws exception on error.
            </summary>
            <param name="parentPrimaryKey">Parant table's primary key.</param>
            <param name="childForeignKey">Child table's foreign key.</param>
        </member>
        <member name="M:FistCore.Core.DbRelation.Connects(FistCore.Core.IDbTable,FistCore.Core.IDbTable)">
            <summary>
            Checks whether the relation connects the given tables.
            </summary>
            <param name="first">1st table.</param>
            <param name="second">2nd table.</param>
            <returns>True if tables are connected with this relation, false otherwise.</returns>
        </member>
        <member name="M:FistCore.Core.DbRelation.HasEqualForeignKeyFieldsAs(FistCore.Core.DbRelation)">
            <summary>
            Checks whether the two relations use the same child FK fields.
            </summary>
            <param name="otherRelation">Other relation.</param>
            <returns>True if all FK fields have been matched; false otherwise.</returns>
        </member>
        <member name="M:FistCore.Core.DbRelation.System#ICloneable#Clone">
            <summary>
            Creates a deep copy clone of current instance.
            </summary>
        </member>
        <member name="M:FistCore.Core.DbRelation.Clone">
            <summary>
            Creates a deep copy of current instance.
            </summary>
        </member>
        <member name="M:FistCore.Core.DbRelation.Clone(System.Boolean,System.Boolean)">
            <summary>
            Creates a deep copy of current instance.
            </summary>
            <param name="setPrefixedAliasesForChildColumns">Specifies whether child columns in cloned relation will have prefixed aliases. 
            This parameter overrides the value set in <see cref="P:FistCore.Core.IDbTable.ColumnAliasesArePrefixed"/> property.</param>
            <param name="setPrefixedAliasesForParentColumns">Specifies whether parent columns in cloned relation will have prefixed aliases. 
            This parameter overrides the value set in <see cref="P:FistCore.Core.IDbTable.ColumnAliasesArePrefixed"/> property.</param>
        </member>
        <member name="M:FistCore.Core.DbRelation.Clone(System.String,System.Boolean,System.String,System.Boolean)">
            <summary>
            Creates a deep copy of current instance.
            </summary>
            <param name="childAlias">New child table alias. If <b>null</b> then current alias is used.</param>
            <param name="setPrefixedAliasesForChildColumns">Specifies whether child columns in cloned relation will have prefixed aliases. 
            This parameter overrides the value set in <see cref="P:FistCore.Core.IDbTable.ColumnAliasesArePrefixed"/> property.</param>
            <param name="parentAlias">New parent table alias. If <b>null</b> then current alias is used.</param>
            <param name="setPrefixedAliasesForParentColumns">Specifies whether parent columns in cloned relation will have prefixed aliases. 
            This parameter overrides the value set in <see cref="P:FistCore.Core.IDbTable.ColumnAliasesArePrefixed"/> property.</param>
        </member>
        <member name="P:FistCore.Core.DbRelation.Parent">
            <summary>
            Gets the parent table.
            </summary>
        </member>
        <member name="P:FistCore.Core.DbRelation.Child">
            <summary>
            Gets the child table.
            </summary>
        </member>
        <member name="P:FistCore.Core.DbRelation.ParentPrimaryKey">
            <summary>
            Gets parent table's primary key fields.
            </summary>
        </member>
        <member name="P:FistCore.Core.DbRelation.ChildForeignKey">
            <summary>
            Gets the child table's foreign key fields which connects it to the parent table.
            </summary>
        </member>
        <member name="P:FistCore.Core.DbRelation.Name">
            <summary>
            Gets or sets relation name.
            </summary>
        </member>
        <member name="T:FistCore.Core.DbRelationCollection">
            <summary>
            Collection of <see cref="T:FistCore.Core.DbRelation"/> objects.
            </summary>
        </member>
        <member name="M:FistCore.Core.DbRelationCollection.Add(FistCore.Core.DbRelation)">
            <summary>
            Adds a relation with a unique name to the collection.
            If a relation with the same name already exists, a new name is automatically set.
            </summary>
            <param name="relation">New relation.</param>
        </member>
        <member name="M:FistCore.Core.DbRelationCollection.GetByName(System.String)">
            <summary>
            Gets the relation with the specified name.
            </summary>
            <param name="name">Relation name.</param>
            <returns>Relation or <b>null</b> if it doesn't exist.</returns>
        </member>
        <member name="M:FistCore.Core.DbRelationCollection.ToArray">
            <summary>
            Converts the collection to an array of DbRelation object.
            </summary>
            <returns>An array of DbRelation object</returns>
        </member>
        <member name="M:FistCore.Core.DbRelationCollection.GetEnumerator">
            <summary>
            Gets an enumerator that can iterate through DbColumnCollection.
            </summary>
        </member>
        <member name="P:FistCore.Core.DbRelationCollection.Item(FistCore.Core.IDbTable,FistCore.Core.IDbTable)">
            <summary>
            Gets the relation that connects the specified tables. <b>Null</b> if it doesn't exist.
            </summary>
        </member>
        <member name="P:FistCore.Core.DbRelationCollection.Item(System.Int32)">
            <summary>
            Gets the relation at the specifed index.
            </summary>
        </member>
        <member name="P:FistCore.Core.DbRelationCollection.Count">
            <summary>
            Gets the number of relations in the colection.
            </summary>
        </member>
        <member name="P:FistCore.Core.DbRelationCollection.Tables">
            <summary>
            Gets the tables used by relations in this collection.
            </summary>
        </member>
        <member name="T:FistCore.Core.FromClause">
            <summary>FROM clause.</summary>
        </member>
        <member name="P:FistCore.Core.FromClause.FromTable">
            <summary>FROM table.</summary>
        </member>
        <member name="P:FistCore.Core.FromClause.Joins">
            <summary>JOIN clauses.</summary>
        </member>
        <member name="P:FistCore.Core.FromClause.JoinCount">
            <summary>Number of JOIN clauses.</summary>
        </member>
        <member name="T:FistCore.Core.JoinClause">
            <summary>JOIN clause.</summary>
        </member>
        <member name="P:FistCore.Core.JoinClause.Relation">
            <summary>DB relation.</summary>
        </member>
        <member name="P:FistCore.Core.JoinClause.JoinedTable">
            <summary>Joined table.</summary>
        </member>
        <member name="P:FistCore.Core.JoinClause.IsLeftOuterJoin">
            <summary>Indicates whether this is a LEFT OUTER joint.</summary>
        </member>
        <member name="T:FistCore.Core.ProviderComponents.GenericFromClauseRenderer">
            <summary>Renders SQL FROM clause.</summary>
        </member>
        <member name="T:FistCore.Core.ProviderComponents.IFromClauseRenderer">
            <summary>Renders SQL FROM clause.</summary>
        </member>
        <member name="M:FistCore.Core.ProviderComponents.IFromClauseRenderer.Render(FistCore.Core.FromClause,FistCore.Core.DbmsType,System.Text.StringBuilder)">
            <summary>
            Renders SQL FROM clause.
            </summary>
            <param name="from">FROM clause.</param>
            <param name="dbms">Target DBMS:</param>
            <param name="output">StringBuilder to which SQL is appended.</param>
        </member>
        <member name="M:FistCore.Core.ProviderComponents.GenericFromClauseRenderer.Render(FistCore.Core.FromClause,FistCore.Core.DbmsType,System.Text.StringBuilder)">
            <summary>
            Renders SQL FROM clause.
            </summary>
            <param name="from">FROM clause.</param>
            <param name="dbms">Target DBMS:</param>
            <param name="output">StringBuilder to which SQL is appended.</param>
        </member>
        <member name="M:FistCore.Core.ProviderComponents.GenericFromClauseRenderer.RenderOnStatement(FistCore.Core.DbRelation,FistCore.Core.DbmsType,System.Text.StringBuilder)">
            <summary>
            Renders SQL ON clause.
            Eg: 'ON Countries.Id = Cities.IdCountry'
            </summary>
            <param name="rel">Relation to render as ON clause.</param>
            <param name="dbms">Target DBMS.</param>
            <param name="output">StringBuilder to which ON statement is appended.</param>
        </member>
        <member name="T:FistCore.Core.PrimaryTableIndex">
            <summary>
            Identifies primary table in a many-to-many relation.
            <seealso cref="T:FistCore.Core.ManyToManyRelation"/>
            </summary>
        </member>
        <member name="F:FistCore.Core.PrimaryTableIndex.FirstPrimaryTable">
            <summary>
            Identifies the first primary table in an M:N relation.
            </summary>
        </member>
        <member name="F:FistCore.Core.PrimaryTableIndex.SecondPrimaryTable">
            <summary>
            Identifies the second primary table in an M:N relation.
            </summary>
        </member>
        <member name="T:FistCore.Core.ManyToManyRelation">
            <summary>
            Models a many-to-many relation using two one-to-many relations through a junction table.
            <seealso cref="M:FistCore.Core.EntityBase.FetchChildren(FistCore.Core.DbRelation)"/><seealso cref="T:FistCore.Core.PrimaryTableIndex"/>
            </summary>
            <remarks>In a many-to-many (M:N) relationship, a row in one table can have many matching rows in antoher table, 
            and vice versa. These two tables are primary tables of a many-to-many relation. An M:N relationship between 
            two primary tables is created by using a third table, called a junction table, whose primary key consists of 
            the foreign keys from both primary tables.</remarks>
            <example>
            The following example fetches children entities using a many-to-many relation.
            <code>
            public DataTable FetchEmployeeTerritories(EmployeesEntity employee)
            {			
            	// Fetch territories that the given employee is in charge of.
            
            	// An employee can be in charge of multiple territories.
            	// Multiple employees can be in charge of a single territory.
            	// Employees and Territories table are related by creating junction rows in EmployeeTerritories table.
            	// EmployeeTerritories table has a primary key which is composed of two foreign keys.
            	// These two one-to-many (1:N) relations can be modeled as a one many-to-many (M:N) relation.
            
            	EmployeeTerritoriesMeta junctionTable = new EmployeeTerritoriesMeta();
            	ManyToManyRelation mnRelation = new ManyToManyRelation(junctionTable.FK_EmployeeID, junctionTable.FK_TerritoryID);
            
            	DataTable territories = employee.GetChildren(mnRelation);
            	return territories;
            }
            </code>
            </example>
        </member>
        <member name="M:FistCore.Core.ManyToManyRelation.#ctor(FistCore.Core.DbRelation,FistCore.Core.DbRelation)">
            <summary>
            Initializes a new instance of the ManyToManyRelation class.
            </summary>
            <param name="firstTableToJunction">Relation between the junction table and the first primary table.</param>
            <param name="secondTableToJunction">Relation between the junction table and the second primary table.</param>
        </member>
        <member name="P:FistCore.Core.ManyToManyRelation.FirstPrimaryTable">
            <summary>
            Gets the first primary table of the M:N relation.
            </summary>
        </member>
        <member name="P:FistCore.Core.ManyToManyRelation.FirstTableToJunction">
            <summary>
            Gets the relation between the junction table and the first primary table.
            </summary>
        </member>
        <member name="P:FistCore.Core.ManyToManyRelation.SecondPrimaryTable">
            <summary>
            Gets the second primary table of the M:N relation.
            </summary>
        </member>
        <member name="P:FistCore.Core.ManyToManyRelation.SecondTableToJunction">
            <summary>
            Gets the relation between the junction table and the second primary table.
            </summary>
        </member>
        <member name="P:FistCore.Core.ManyToManyRelation.JunctionTable">
            <summary>
            Gets the junction table of the M:N relation.
            </summary>
        </member>
        <member name="P:FistCore.Core.ManyToManyRelation.IsRecursive">
            <summary>
            Gets a value indicating whether the M:N relation is recursive, i.e. if a single database table is used
            as both the first and the second primary table.
            </summary>
        </member>
        <member name="P:FistCore.Core.ManyToManyRelation.JunctionRowsFilter">
            <summary>
            Gets or sets the <see cref="T:FistCore.Core.SearchCondition"/> that filters out junction rows.
            Only junction table fields may be used in the filter.
            </summary>
            <remarks><p>Default value is <b>null</b>, which means that all junction rows represent a valid link between two tables.</p>
            <p>Database is often designed so that the junction rows are never deleted from the database but are marked 
            as deleted instead. The JunctionRowsFilter may be used to filter out the rows which are marked as inactive.</p>
            <p>Use only simple filters. The search condition may only reference table fields from the junction table; 
            otherwise an error will occur. Use <see cref="T:FistCore.Core.SelectStatement"/> when complex filtering is required.</p></remarks>
            <example>
            The following example creates an M:N relation and a JunctionRowsFilter that allows only junction rows
            whose STATUS field is set to 1.
            <code>
            EmployeeTerritoriesMeta junctionTable = new EmployeeTerritoriesMeta();
            ManyToManyRelation mnRelation = new ManyToManyRelation(junctionTable.FK_EmployeeID, junctionTable.FK_TerritoryID);
            mnRelation.JunctionRowsFilter = new SearchCondition(PredicateFactory.Compare(junctionTable.Status, "=", 1));
            </code>
            </example>
        </member>
        <member name="T:FistCore.Core.RelationBucket">
            <summary>
            Contains relations and additional information required to build a complete join path.
            </summary>
            <remarks><para>Data-access tier objects use RelationBucket to automatically build a FROM clause.
            Algorithm ensures that joins are always rendered in the the correct order regardles of the order 
            in which the relations have been added to the bucket. Outer joins are propagated if necessary.</para>
            <para>RelationBucket also provides an easy way to create complex <see cref="T:System.Data.DataSet"/> objects 
            (see <see cref="M:FistCore.Core.RelationBucket.NewDataSet"/>).</para></remarks>
            <example>
            The following example creates a RelationBucket object that connects Employees, EmployeeTerritories, Territories and Region tables.
            <code>
            EmployeesMeta employees = new EmployeesMeta();
            EmployeeTerritoriesMeta empTerritories = new EmployeeTerritoriesMeta();
            TerritoriesMeta territories = new TerritoriesMeta();
            RegionMeta regions = new RegionMeta();
            
            RelationBucket relations = new RelationBucket();
            relations.Add(employees, empTerritories, empTerritories.EmployeeID);
            relations.Add(territories, empTerritories, empTerritories.TerritoryID);
            relations.Add(regions, territories, territories.RegionID);
            </code>
            </example>
        </member>
        <member name="F:FistCore.Core.RelationBucket.relations">
            <summary>
            Relations.
            </summary>
        </member>
        <member name="F:FistCore.Core.RelationBucket.joinModes">
            <summary>
            Additional JOIN info (inner/outer parent/child) for each relation.
            Indexes of the join modes equal the relation indices.
            </summary>
        </member>
        <member name="M:FistCore.Core.RelationBucket.#ctor">
            <summary>
            Initializes a new instance of the RelationBucket class.
            </summary>
        </member>
        <member name="M:FistCore.Core.RelationBucket.#ctor(FistCore.Core.DbRelation)">
            <summary>
            Initializes a new instance of the RelationBucket class.
            </summary>
            <param name="firstRelation">First/initial relation added to the bucket using <see cref="M:FistCore.Core.RelationBucket.Add(FistCore.Core.DbRelation)"/> method.</param>
        </member>
        <member name="M:FistCore.Core.RelationBucket.#ctor(FistCore.Core.IDbTable,FistCore.Core.IDbTable,FistCore.Core.IDbColumn)">
            <summary>
            Initializes a new instance of the RelationBucket class and adds an initial relation to the bucket using <see cref="M:FistCore.Core.RelationBucket.Add(FistCore.Core.DbRelation)"/> method.
            </summary>	
            <param name="parent">Parent/master table.</param>
            <param name="child">Child/data table.</param>
            <param name="childForeignKey">Child foreign key.</param>
        </member>
        <member name="M:FistCore.Core.RelationBucket.#ctor(FistCore.Core.DbRelation[])">
            <summary>
            Initializes a new instance of the RelationBucket class.
            </summary>
            <param name="relations">Relations to add to the bucket using <see cref="M:FistCore.Core.RelationBucket.Add(FistCore.Core.DbRelation)"/> method.</param>
        </member>
        <member name="M:FistCore.Core.RelationBucket.Add(FistCore.Core.DbRelation,System.Boolean,System.Boolean)">
            <summary>
            Adds a relation to the bucket.
            </summary>
            <remarks>If parallel relations are used then tables must use aliases, otherwise an error will occur.</remarks>
            <param name="relation">Relation.</param>
            <param name="parentAsOuter">Specifies whether the parent table is connected as outer.</param>
            <param name="childrenAsOuter">Specifies whether the child table is connected as outer.</param>
            <remarks>Child table is connected as outer. Parent table is connected as outer if foreign 
            key is made of exactly one nullable column. If parallel relations are used then tables must 
            use aliases, otherwise an error will occur.</remarks>
            <exception cref="T:System.ArgumentException">is generated if the bucket already contains a relation
            which contains the same tables with the same aliases as the new relation.</exception>
        </member>
        <member name="M:FistCore.Core.RelationBucket.Add(FistCore.Core.DbRelation)">
            <summary>
            Adds a relation to the bucket. 
            </summary>
            <param name="relation">Relation.</param>
            <remarks>Child table is connected as outer. Parent table is connected as outer if foreign 
            key is made of exactly one nullable column. If parallel relations are used then tables must 
            use aliases, otherwise an error will occur.</remarks>
            <exception cref="T:System.ArgumentException">is generated if the bucket already contains a relation
            which contains the same tables with the same aliases as the new relation.</exception>
        </member>
        <member name="M:FistCore.Core.RelationBucket.Add(FistCore.Core.IDbTable,FistCore.Core.IDbTable,FistCore.Core.IDbColumn)">
            <summary>
            Adds a relation to the bucket.
            </summary>
            <param name="parent">Parent/master table.</param>
            <param name="child">Child/data table.</param>
            <param name="childForeignKey">Child foreign key.</param>
            <remarks>Child table is connected as outer. Parent table is connected as outer if foreign 
            key is made of exactly one nullable column. If parallel relations are used then tables must 
            use aliases, otherwise an error will occur.</remarks>
            <exception cref="T:System.ArgumentException">is generated if the bucket already contains a relation
            which contains the same tables with the same aliases as the new relation.</exception>
        </member>
        <member name="M:FistCore.Core.RelationBucket.Merge(FistCore.Core.RelationBucket)">
            <summary>
            Merges a specified RelationBucket object into the current RelationBucket so that there are no duplicate relations.
            </summary>
            <param name="bucket">The RelationBucket that will be merged.</param>
        </member>
        <member name="M:FistCore.Core.RelationBucket.NewDataSet">
            <summary>
            Creates a new empty <see cref="T:System.Data.DataSet"/> with the table structure, relations and constraints defined in the RelationBucket.
            </summary>
            <returns>New DataSet.</returns>
            <example>
            The following example create a new DataSet that contains four tables, relations between them and all constraints.
            <code>
            public DataSet CreateDataSet()
            {
            	EmployeesMeta employees = new EmployeesMeta();
            	EmployeeTerritoriesMeta empTerritories = new EmployeeTerritoriesMeta();
            	TerritoriesMeta territories = new TerritoriesMeta();
            	RegionMeta regions = new RegionMeta();
            
            	// Create relations between tables.
            	RelationBucket relations = new RelationBucket();
            	relations.Add(employees, empTerritories, empTerritories.EmployeeID);
            	relations.Add(territories, empTerritories, empTerritories.TerritoryID);
            	relations.Add(regions, territories, territories.RegionID);
            
            	// Create a DataSet object with relations between DataTables and constraints 
            	// (primary key, foreign key and unique constraints.
            	DataSet ds = relations.NewDataSet();
            	return ds;
            }
            </code>
            </example>
        </member>
        <member name="M:FistCore.Core.RelationBucket.NewDataSet(System.String,System.Boolean,System.Boolean,System.Boolean)">
            <summary>
            Creates a new empty <see cref="T:System.Data.DataSet"/> with the table structure, relations and constraints defined in the RelationBucket.
            </summary>
            <param name="dataSetName">The name of the DataSet.</param>
            <param name="createPrimaryKeys">A value indicating whether to create primary keys.</param>
            <param name="createRelations">A value indicating whether to create <see cref="T:System.Data.DataRelation"/> objects.</param>
            <param name="createConstraints">A value indicating whether to create constraints.</param>
            <returns>New DataSet.</returns>
            <example>
            The following example create a new DataSet that contains four tables, relations between them and all constraints.
            <code>
            public DataSet CreateDataSet()
            {
            	EmployeesMeta employees = new EmployeesMeta();
            	EmployeeTerritoriesMeta empTerritories = new EmployeeTerritoriesMeta();
            	TerritoriesMeta territories = new TerritoriesMeta();
            	RegionMeta regions = new RegionMeta();
            
            	// Create relations between tables.
            	RelationBucket relations = new RelationBucket();
            	relations.Add(employees, empTerritories, empTerritories.EmployeeID);
            	relations.Add(territories, empTerritories, empTerritories.TerritoryID);
            	relations.Add(regions, territories, territories.RegionID);
            
            	// Create a DataSet object with relations between DataTables and constraints 
            	// (primary key, foreign key and unique constraints.
            	DataSet ds = relations.NewDataSet("EmployeeData", true, true, true);
            	return ds;
            }
            </code>
            </example>
        </member>
        <member name="M:FistCore.Core.RelationBucket.CreateDataSetConstraints(System.Data.DataSet,System.Boolean,System.Boolean,System.Boolean)">
            <summary>
            Creates ADO.NET constraints on the target <see cref="T:System.Data.DataSet"/>.
            </summary>
            <param name="targetDataSet">DataSet to which the constraints are to be applied.</param>
            <param name="createPrimaryKeys">A value indicating whether to create primary keys.</param>
            <param name="createRelations">A value indicating whether to create <see cref="T:System.Data.DataRelation"/> objects.</param>
            <param name="createConstraints">A value indicating whether to create constraints.</param>
            <remarks><para>DataSet needs to have the same table structure as the RelationBucket; otherwise an
            Exception is generated.</para>
            <para>The method doesn't check if the DataSet already contains any constraints. An error might occur 
            when applying duplicate constraints.</para></remarks>
        </member>
        <member name="M:FistCore.Core.RelationBucket.Clone">
            <summary>
            Creates a deep copy of current instance.
            </summary>
            <returns>DbRelationBucket that is a coppy of current instance.</returns>
        </member>
        <member name="M:FistCore.Core.RelationBucket.RenderFromClause(FistCore.Core.IDbTable,FistCore.Core.DbmsType,System.Text.StringBuilder)">
            <summary>
            Renders SQL FROM clause starting with the specified table.
            Automatically determines the correct order of JOIN clauses and modes (inner/left outer) for all tables.
            </summary>
            <param name="firstTable">1st table in the FROM clause.</param>
            <param name="dbms">DBMS. Required because table names with special characters are handled differently on different DBMSs.</param>
            <param name="output">StringBuilder to which SQL is appended.</param>
            <returns>FROM clause.</returns>
        </member>
        <member name="P:FistCore.Core.RelationBucket.Count">
            <summary>
            Gets the number of relations in the bucket.
            </summary>
        </member>
        <member name="P:FistCore.Core.RelationBucket.Relations">
            <summary>
            Gets the <see cref="T:FistCore.Core.DbRelation"/> objects contained in the bucket.
            </summary>
        </member>
        <member name="P:FistCore.Core.RelationBucket.Tables">
            <summary>
            Gets the <see cref="T:FistCore.Core.IDbTable"/> objects connected by relations in this bucket.
            </summary>
        </member>
        <member name="T:FistCore.Core.TableWithJoinMode">
            <summary>Contains a table and a flag which specifies whether it is outer joined. Requiried for rendering algorithm.</summary>
        </member>
        <member name="F:FistCore.Core.TableWithJoinMode.Table">
            <summary>
            Table.
            </summary>
        </member>
        <member name="F:FistCore.Core.TableWithJoinMode.JoinAsOuter">
            <summary>
            Specifies whether a table is outer joined.
            </summary>
        </member>
        <member name="T:FistCore.Core.JoinMode">
            <summary>Defines wheter parent or child table is joined as outer.</summary>
        </member>
        <member name="F:FistCore.Core.JoinMode.ParentAsOuter">
            <summary>
            Specifies whether the parent table is connected as outer.
            </summary>
        </member>
        <member name="F:FistCore.Core.JoinMode.ChildrenAsOuter">
            <summary>
            Specifies whether the child table is connected as outer.
            </summary>
        </member>
        <member name="T:FistCore.Core.DbTable">
             <summary>
             Contains database table/view metadata and methods.
             Factory class for related IEntity, EntityCollection and ADO.NET objects.
             </summary>
             <remarks>Provides methods for the creation of the compatibile ADO.NET objects (see <see cref="M:FistCore.Core.DbTable.NewDataTable"/>)
             and contains metadata for the table/view it represents such as:
             <list type="bullet">
            	<item>Catalog data to which to which the table belongs to.</item>
            	<item>Table name and optional alias.</item>
            	<item>Fields owned by the table.</item>
            	<item>Primary key data.</item>
            	<item>Foreign keys.</item>
             </list>
             <seealso cref="T:FistCore.Core.IDbColumn"/><seealso cref="T:FistCore.Core.DbRelation"/><seealso cref="T:FistCore.Core.RelationBucket"/>
             </remarks>
             <example>
             The following example demonstrates how to use FistCore metadata classes to create ADO.NET DataColumn,
             DataTable, DataRelation, DataSet and Constraint objects.
             <code>
             EmployeesMeta employees = new EmployeesMeta();
             EmployeeTerritoriesMeta empTerritories = new EmployeeTerritoriesMeta();
             TerritoriesMeta territories = new TerritoriesMeta();
             RegionMeta regions = new RegionMeta();
            
             // Create relations between tables.
             RelationBucket relations = new RelationBucket();
             relations.Add(employees, empTerritories, empTerritories.EmployeeID);
             relations.Add(territories, empTerritories, empTerritories.TerritoryID);
             relations.Add(regions, territories, territories.RegionID);
            
             // Create a DataSet object with relations between DataTables and constraints
             // (primary key, foreign key and unique constraints.
             DataSet ds = relations.NewDataSet("EmployeeData", true, true, true);
             </code>
             </example>
        </member>
        <member name="T:FistCore.Core.IDbTable">
            <summary>
            Contains database table/view metadata and methods.
            Factory object for related IEntity, EntityCollection and ADO.NET objects.
            </summary>
        </member>
        <member name="M:FistCore.Core.IDbTable.GetColumnConfiguration(System.Int32)">
            <summary>
            Gets configuration, ie. immutable properties, of column at the specified index.
            </summary>
            <param name="index">Index of column in <see cref="P:FistCore.Core.IDbTable.Columns"/> collection.</param>
            <returns>Column configuration.</returns>
        </member>
        <member name="M:FistCore.Core.IDbTable.GetColumnConfiguration(System.String)">
            <summary>
            Gets configuration, ie. immutable properties, of column with the specified name.
            </summary>
            <param name="columnName">Name of the column.</param>
            <returns>Column configuration or <b>null</b> if not found.</returns>
        </member>
        <member name="M:FistCore.Core.IDbTable.NewEntity">
            <summary>
            Returns a new empty entity that belongs to this table/view.
            </summary>
            <returns>New entity.</returns>
        </member>
        <member name="M:FistCore.Core.IDbTable.NewEntityCollection">
            <summary>
            Returns a new empty <see cref="T:FistCore.Core.EntityCollection`2"/> compatibile with this table/view.
            </summary>
            <returns>Empty EntityCollection.</returns>
            <remarks><see cref="P:FistCore.Core.EntityCollection`2.IDbTable"/> object must have the same alias as the current IDbTable instance.</remarks>
        </member>
        <member name="M:FistCore.Core.IDbTable.NewEntityFiller">
            <summary>
            Returns object that builds entities directly from retrieved data, ie. <see cref="T:System.Data.IDataReader"/>.
            </summary>
            <returns>Entity filler.</returns>
        </member>
        <member name="M:FistCore.Core.IDbTable.Clone(System.String)">
            <summary>
            Creates another IDbTable object for the same table/view.
            </summary>
            <param name="cloneAlias">Clone alias.</param>
            <returns>Clone.</returns>
        </member>
        <member name="M:FistCore.Core.IDbTable.Clone(System.String,System.Boolean)">
            <summary>
            Creates another IDbTable object for the same table/view.
            </summary>
            <param name="cloneAlias">Clone alias.</param>
            <param name="setPrefixedAliases">Specifies whether cloned columns will have prefixed aliases.</param>
            <returns>Clone.</returns>
        </member>
        <member name="M:FistCore.Core.IDbTable.NewDataTable">
            <summary>
            Creates a new <see cref="T:System.Data.DataTable"/> with all the columns and primary key defined by the IDbTable object.
            </summary>
            <returns>DataTable.</returns>
            <remarks><see cref="P:System.Data.DataTable.TableName"/> property of the new DataTable must be equal to <see cref="P:FistCore.Core.DbTable.Alias"/> property of the current DbTable instance.</remarks>
        </member>
        <member name="M:FistCore.Core.IDbTable.HasEqualAliasAndNameAs(FistCore.Core.IDbTable)">
            <summary>
            Checks whether the two tables have equal aliases and names.
            </summary>
            <param name="otherTable">Other table.</param>
            <returns>True if the alias and name are equal. False otherwise.</returns>
        </member>
        <member name="M:FistCore.Core.IDbTable.RenderTableName(FistCore.Core.DbmsType,System.Text.StringBuilder)">
            <summary>
            Renders table name for the given DBMS. Handles special characters.
            </summary>
            <param name="dbms">Target DBMS.</param>
            <param name="output">StringBuilder to which table name is appended.</param>
            <remarks>Special characters are handled differently on different DBMSs.
            If table contains blanks it has to be enclosed in brackets for SQL Server
            (eg. [My employees]), in quotes for Oracle (eg. "My employees") etc.</remarks>
        </member>
        <member name="M:FistCore.Core.IDbTable.RenderAlias(FistCore.Core.DbmsType,System.Text.StringBuilder)">
            <summary>
            Renders table alias for the given DBMS. Handles special characters.
            </summary>
            <param name="dbms">Target DBMS.</param>
            <param name="output">StringBuilder to which the alias is appended.</param>
            <remarks>Special characters are handled differently on different DBMSs.
            If alias contains blanks it has to be enclosed in brackets for SQL Server
            (eg. [My employees]), in quotes for Oracle (eg. "My employees") etc.</remarks>
        </member>
        <member name="M:FistCore.Core.IDbTable.SetPrefixedAliases">
            <summary>
            Changes aliases of all columns so that they start with prefix (usually table name).
            Eg: Id -> MyTable_Id
            </summary>
            <remarks>Avoid using SetPrefixedAliases() as it changes internal state of table objects.
            Use Clone(string, bool) method and generated constructor overloads to instantiate a new object, instead.
            The method will be removed in a future release.</remarks>
        </member>
        <member name="M:FistCore.Core.IDbTable.GetParentProperty(FistCore.Core.DbRelation,FistCore.Core.IDbColumn)">
            <summary>
            Gets the full property path for the specified parent entity field.
            </summary>
            <param name="fk">Relation to the parent entity.</param>
            <param name="parentColumn">Parent entity field. If null only property name generated for parent entity is returned.</param>
            <returns>Parent entity property name followed by dot operator and parent field property name if <b>parentColumn</b> is defined; otherwise only parent entity property name.</returns>
            <remarks>Eg. the following code snippet returns "RegionParent.RegionDescription" property path.
            <code>
            public string GetRegionDescriptionPropertyForDataBinder()
            {
            	TerritoriesMeta territories = new TerritoriesMeta();
            	RegionMeta regions = new RegionMeta();
            	return territories.GetParentProperty(territories.FK_RegionID, regions.RegionDescription);
            }
            </code>
            </remarks>
        </member>
        <member name="M:FistCore.Core.IDbTable.GetChildTables">
            <summary>Gets tables which reference the current table.</summary>
            <returns>Array of tables or empty array if the current table is not referenced by other objects.</returns>
        </member>
        <member name="M:FistCore.Core.IDbTable.GetChildRelations">
            <summary>Gets relations where current table acts as a parent.</summary>
            <returns>Array of relations or empty array if the current table is not referenced by other objects.</returns>
        </member>
        <member name="P:FistCore.Core.IDbTable.Catalog">
            <summary>
            Gets catalog information to which the table/view belongs to.
            </summary>
        </member>
        <member name="P:FistCore.Core.IDbTable.TableName">
            <summary>
            Gets table name.
            </summary>
        </member>
        <member name="P:FistCore.Core.IDbTable.Alias">
            <summary>
            Gets object alias. By default it is equal to the table name.
            </summary>
        </member>
        <member name="P:FistCore.Core.IDbTable.Columns">
            <summary>
            Gets table fields.
            </summary>
        </member>
        <member name="P:FistCore.Core.IDbTable.PrimaryKey">
            <summary>
            Gets primary key fields.
            </summary>
        </member>
        <member name="P:FistCore.Core.IDbTable.ForeignKeys">
            <summary>
            Gets the relations used by foreign keys.
            Empty array if no foreign key relations have been defined.
            </summary>
        </member>
        <member name="P:FistCore.Core.IDbTable.EntityDaoCreationStrategy">
            <summary>
            Gets DAO creation strategy/algorithm. Default is <b>null</b>. Inherited classes may override behavior.
            </summary>
            <remarks><p>Inherited classes may override this property to specify a specific DAO creation strategy.
            <see cref="T:FistCore.Core.DefaultEntityDaoCreationStrategy"/> checks this property to see if there is a specific
            <see cref="T:FistCore.Core.IEntityDAO"/> implementation for an entity.</p>
            <p>Generated code may use specific DAO with stored procedures to optimize performance. Algorithm that
            knows how to instantiate such DAOs is specified here. <b>DefaultEntityDaoCreationStrategy</b> will
            then create optimized DAOs instead of generic <see cref="T:FistCore.Core.EntityDAO"/> object that uses dynamic queries.
            </p></remarks>
        </member>
        <member name="P:FistCore.Core.IDbTable.ParentEntityProperties">
            <summary>
            Gets the names of the properties generated for the parent entities.
            </summary>
        </member>
        <member name="P:FistCore.Core.IDbTable.ColumnAliasesArePrefixed">
            <summary>
            Gets the value that specifies whether columns' aliases are prefixed and changed whenever the table alias is changed.
            </summary>
            <remarks>Usually columns aliases are prefixed with a table name/alias. This ensures the uniqueness
            of column aliases when selecting two columns with the same name from two different tables.</remarks>
        </member>
        <member name="P:FistCore.Core.IDbTable.ExtendedProperties">
            <summary>Gets the collection of customized information associated with the table.</summary>
            <value>A IPropertyCollection with all custom information. <b>null</b> if no custom information is configured.</value>
            <remarks>The ExtendedProperties property lets you configure custom information for the table such as DBMS-specific properties.</remarks>
        </member>
        <member name="F:FistCore.Core.DbTable.tableName">
            <summary>
            Table name.
            </summary>
        </member>
        <member name="F:FistCore.Core.DbTable.alias">
            <summary>
            Object alias. By default it is equal to table name.
            </summary>
        </member>
        <member name="F:FistCore.Core.DbTable.columns">
            <summary>
            Table fields.
            </summary>
        </member>
        <member name="F:FistCore.Core.DbTable.primaryKeyFields">
            <summary>
            Primary key fields.
            </summary>
        </member>
        <member name="F:FistCore.Core.DbTable.columnAliasesArePrefixed">
            <summary>
            Specifies whether columns' aliases are prefixed and changed whenever the table alias is changed.
            </summary>
        </member>
        <member name="M:FistCore.Core.DbTable.#ctor(System.String,System.String,FistCore.Core.DbColumnCollection,System.String[],System.Boolean)">
            <summary>
            Initializes a new instance of the DbTable class.
            </summary>
            <param name="name">Table name.</param>
            <param name="alias">Object alias. If <b>null</b> then it will be equal to table name.</param>
            <param name="columns">Table fields.</param>
            <param name="primaryKey">Primary key fields.</param>
            <param name="setPrefixedColumnAliases">Specifies whether columns' aliases are prefixed with a table alias.</param>
        </member>
        <member name="M:FistCore.Core.DbTable.Init(System.String,System.String,FistCore.Core.DbColumnCollection,System.String[],System.Boolean)">
            <summary>
            Initializes object. Inherited class may set members via Init method.
            </summary>
            <param name="name">Table name.</param>
            <param name="alias">Object alias. If <b>null</b> then it will be equal to the table name.</param>
            <param name="columns">Table fields.</param>
            <param name="primaryKey">Primary key fields.</param>
            <param name="setPrefixedColumnAliases">Specifies whether columns' aliases are prefixed with a table alias.</param>
        </member>
        <member name="M:FistCore.Core.DbTable.NewEntity">
            <summary>
            When implemented in inherited classes it should return a new empty entity compatibile with this IDbTable.
            </summary>
            <returns>New entity.</returns>
        </member>
        <member name="M:FistCore.Core.DbTable.NewEntityCollection">
            <summary>
            When implemented in inherited classes it should return a new empty <see cref="T:FistCore.Core.EntityCollection`2"/> compatibile with this IDbTable.
            </summary>
            <returns>Empty EntityCollection.</returns>
            <remarks><see cref="P:FistCore.Core.EntityCollection`2.IDbTable"/> object must have the same alias as the current DbTable instance.</remarks>
        </member>
        <member name="M:FistCore.Core.DbTable.NewEntityFiller">
            <summary>
            When implemented in inherited classes it should return object that builds entities directly from retrieved data, ie. <see cref="T:System.Data.IDataReader"/>.
            </summary>
            <returns>Entity filler.</returns>
        </member>
        <member name="M:FistCore.Core.DbTable.NewDataTable">
            <summary>
            Creates a new <see cref="T:System.Data.DataTable"/> with all the columns and primary key defined by the IDbTable object.
            </summary>
            <returns>DataTable.</returns>
            <remarks><see cref="P:System.Data.DataTable.TableName"/> property of the new DataTable must be equal to <see cref="P:FistCore.Core.DbTable.Alias"/> property of the current DbTable instance.</remarks>
        </member>
        <member name="M:FistCore.Core.DbTable.Clone(System.String)">
            <summary>
            When implemented in inherited classes it should create another IDbTable object for the same table/view.
            </summary>
            <param name="cloneAlias">Clone alias. May be <b>null</b>.</param>
            <returns>Clone.</returns>
        </member>
        <member name="M:FistCore.Core.DbTable.Clone(System.String,System.Boolean)">
            <summary>
            Creates another IDbTable object for the same table/view.
            </summary>
            <param name="cloneAlias">Clone alias.</param>
            <param name="setPrefixedAliases">Specifies whether cloned columns will have prefixed aliases.</param>
            <returns>Clone.</returns>
        </member>
        <member name="M:FistCore.Core.DbTable.HasEqualAliasAndNameAs(FistCore.Core.IDbTable)">
            <summary>
            Checks whether the two tables have equal aliases and names.
            </summary>
            <param name="otherTable">Other table.</param>
            <returns>True if aliases and names are equal. False otherwise.</returns>
        </member>
        <member name="M:FistCore.Core.DbTable.RenderTableName(FistCore.Core.DbmsType,System.Text.StringBuilder)">
            <summary>
            Renders table name for the given DBMS. Handles special characters.
            </summary>
            <param name="dbms">Target DBMS.</param>
            <param name="output">StringBuilder to which table name is appended.</param>
            <remarks>Special characters are handled differently on different DBMSs.
            If table contains blanks it has to be enclosed in brackets for SQL Server
            (eg. [My employees]), in quotes for Oracle (eg. "My employees") etc.</remarks>
        </member>
        <member name="M:FistCore.Core.DbTable.RenderAlias(FistCore.Core.DbmsType,System.Text.StringBuilder)">
            <summary>
            Renders table alias for the given DBMS. Handles special characters.
            </summary>
            <param name="dbms">Target DBMS.</param>
            <param name="output">StringBuilder to which the alias is appended.</param>
            <remarks>Special characters are handled differently on different DBMSs.
            If alias contains blanks it has to be enclosed in brackets for SQL Server
            (eg. [My employees]), in quotes for Oracle (eg. "My employees") etc.</remarks>
        </member>
        <member name="M:FistCore.Core.DbTable.SetPrefixedAliases">
            <summary>
            Changes aliases of all columns so that they start with prefix (usually table name).
            Eg: Id -> MyTable_Id
            </summary>
            <remarks>Avoid using SetPrefixedAliases() as it changes internal state of table objects.
            Use Clone(string, bool) method and constructor overloads to instantiate a new object, instead.
            The method will be marked as obsolete in a future release and eventually it may be removed alltogether.</remarks>
        </member>
        <member name="M:FistCore.Core.DbTable.GetColumnConfiguration(System.Int32)">
            <summary>
            Gets configuration, ie. immutable properties, of column at the specified index.
            </summary>
            <param name="index">Index of column in <see cref="P:FistCore.Core.DbTable.Columns"/> collection.</param>
            <returns>Column configuration.</returns>
        </member>
        <member name="M:FistCore.Core.DbTable.GetColumnConfiguration(System.String)">
            <summary>
            Gets configuration, ie. immutable properties, of column with the specified name.
            </summary>
            <param name="columnName">Name of the column.</param>
            <returns>Column configuration or <b>null</b> if not found.</returns>
        </member>
        <member name="M:FistCore.Core.DbTable.GetChildTables">
            <summary>Gets tables which reference the current table.</summary>
            <returns>Array of tables or empty array if the current table is not referenced by other objects.</returns>
            <remarks>The GetChildTables method must be implemented in derived class.</remarks>
        </member>
        <member name="M:FistCore.Core.DbTable.GetChildRelations">
            <summary>Gets relations where current table acts as a parent.</summary>
            <returns>Array of relations or empty array if the current table is not referenced by other objects.</returns>
            <remarks>The GetChildRelations method must be implemented in derived class.</remarks>
        </member>
        <member name="M:FistCore.Core.DbTable.InitForeignKeys">
            <summary>
            Initializes an array of relations used by foreign keys.
            Inherited classes must implement this method.
            The method is called when property <see cref="P:FistCore.Core.DbTable._ForeignKeys"/> is accessed for the first time.
            </summary>
            <remarks>It is not wise to call this method in a constructor. If a recursive relation is defined,
            or there is a circular path between multiple tables, an endless loop of InitForeignKeys might occur.
            It is best to call the method only when relations are required, i.e. accessed.</remarks>
        </member>
        <member name="M:FistCore.Core.DbTable.SetParentEntityProperties(System.String[])">
            <summary>
            Sets the names of the properties generated for the parent entities.
            </summary>
            <param name="propertyNames">Property names.</param>
        </member>
        <member name="M:FistCore.Core.DbTable.GetParentProperty(System.Int32,FistCore.Core.IDbColumn)">
            <summary>
            Gets the full property path for the specified parent entity field.
            </summary>
            <param name="parentIndex">Index of parent property name in the <see cref="P:FistCore.Core.DbTable.ParentEntityProperties"/> array.</param>
            <param name="parentColumn">Parent entity field. If null only property name generated for parent entity is returned.</param>
            <returns>Parent entity property name followed by dot operator and parent field property name if <b>parentColumn</b> is defined; otherwise only parent entity property name.</returns>
        </member>
        <member name="M:FistCore.Core.DbTable.GetParentProperty(FistCore.Core.DbRelation,FistCore.Core.IDbColumn)">
            <summary>
            Gets the full property path for the specified parent entity field.
            </summary>
            <param name="fk">Relation to the parent entity.</param>
            <param name="parentColumn">Parent entity field. If null only property name generated for parent entity is returned.</param>
            <returns>Parent entity property name followed by dot operator and parent field property name if <b>parentColumn</b> is defined; otherwise only parent entity property name.</returns>
            <remarks>Eg. the following code snippet returns "RegionParent.RegionDescription" property path.
            <code>
            public string GetRegionDescriptionPropertyForDataBinder()
            {
            	TerritoriesMeta territories = new TerritoriesMeta();
            	RegionMeta regions = new RegionMeta();
            	return territories.GetParentProperty(territories.FK_RegionID, regions.RegionDescription);
            }
            </code>
            </remarks>
        </member>
        <member name="P:FistCore.Core.DbTable.Catalog">
            <summary>
            Gets catalog information to which the table/view belongs to.
            </summary>
        </member>
        <member name="P:FistCore.Core.DbTable.TableName">
            <summary>
            Gets table name.
            </summary>
        </member>
        <member name="P:FistCore.Core.DbTable.Alias">
            <summary>
            Gets object alias. By default it is equal to the table name.
            </summary>
        </member>
        <member name="P:FistCore.Core.DbTable.Columns">
            <summary>
            Gets table fields.
            </summary>
        </member>
        <member name="P:FistCore.Core.DbTable.PrimaryKey">
            <summary>
            Gets primary key fields.
            </summary>
        </member>
        <member name="P:FistCore.Core.DbTable.ColumnAliasesArePrefixed">
            <summary>
            Gets the value that specifies whether columns' aliases are prefixed and changed whenever the table alias is changed.
            </summary>
            <remarks>Usually columns aliases are prefixed with a table name/alias. This ensures the uniqueness
            of column aliases when selecting two columns with the same name from two different tables.</remarks>
        </member>
        <member name="P:FistCore.Core.DbTable.ForeignKeys">
            <summary>
            Gets the relations used by foreign keys.
            Empty array if no foreign key relations have been defined.
            </summary>
        </member>
        <member name="P:FistCore.Core.DbTable.EntityDaoCreationStrategy">
            <summary>
            Gets DAO creation strategy/algorithm. Default is <b>null</b>.
            </summary>
            <remarks><p>Inherited classes may override this property to specify a specific DAO creation strategy.
            <see cref="T:FistCore.Core.DefaultEntityDaoCreationStrategy"/> checks this property to see if there is a specific
            <see cref="T:FistCore.Core.IEntityDAO"/> implementation for an entity.</p>
            <p>Generated code may use specific DAOs with stored procedures to optimize performance. Algorithm that
            knows how to instantiate such DAOs is specified here. <b>DefaultEntityDaoCreationStrategy</b> will
            then create optimized DAOs instead of generic <see cref="T:FistCore.Core.EntityDAO"/> object that uses dynamic queries.
            </p></remarks>
        </member>
        <member name="P:FistCore.Core.DbTable.ExtendedProperties">
            <summary>Gets the collection of customized information associated with the table such.</summary>
            <value>A IPropertyCollection with custom information if overriden in derived classes. <b>null</b> if no custom information is configured.</value>
            <remarks>The ExtendedProperties property must be overriden in derived class to configure custom information for the table such as DBMS-specific properties.</remarks>
        </member>
        <member name="P:FistCore.Core.DbTable._ForeignKeys">
            <summary>
            Relations used by foreign keys.
            </summary>
        </member>
        <member name="P:FistCore.Core.DbTable.ParentEntityProperties">
            <summary>
            Gets the names of the properties generated for the parent entities.
            </summary>
        </member>
        <member name="T:FistCore.Core.IDbTableConfiguration">
            <summary>Provides values for immutable <see cref="T:FistCore.Core.IDbTable"/> properties.</summary>
        </member>
        <member name="P:FistCore.Core.IDbTableConfiguration.Catalog">
            <summary>Gets catalog information to which the table/view belongs to.</summary>
        </member>
        <member name="P:FistCore.Core.IDbTableConfiguration.TableName">
            <summary>Gets table name.</summary>
        </member>
        <member name="P:FistCore.Core.IDbTableConfiguration.ColumnConfiguration">
            <summary>Gets column configuration.</summary>
        </member>
        <member name="P:FistCore.Core.IDbTableConfiguration.PrimaryKeyColumnIndexes">
            <summary>Gets primary key column indexes in <see cref="P:FistCore.Core.IDbTableConfiguration.ColumnConfiguration"/> array.</summary>
        </member>
        <member name="P:FistCore.Core.IDbTableConfiguration.EmptyDataTable">
            <summary>Gets emtpy <see cref="T:System.Data.DataTable"/> with structure defined by meta-data for this table.</summary>
        </member>
        <member name="P:FistCore.Core.IDbTableConfiguration.ParentEntityProperties">
            <summary>Gets the names parent entity properties in generated <see cref="T:FistCore.Core.IEntity"/> class.</summary>
        </member>
        <member name="P:FistCore.Core.IDbTableConfiguration.ExtendedProperties">
            <summary>Gets the collection of customized information associated with the table.</summary>
            <value>A IPropertyCollection with all custom information. <b>null</b> if no custom information is configured.</value>
            <remarks>The ExtendedProperties property lets you configure custom information for the table such as DBMS-specific properties.</remarks>
        </member>
        <member name="T:FistCore.Core.DbTableConfiguration">
            <summary>Provides values for immutable <see cref="T:FistCore.Core.IDbTable"/> properties.</summary>
        </member>
        <member name="M:FistCore.Core.DbTableConfiguration.#ctor(System.String,FistCore.Core.ICatalog,FistCore.Core.DbColumnConfiguration[],System.Int32[],System.String[])">
            <summary>
            Initializes a new instance of the DbTableConfiguration class.
            </summary>
            <param name="tableName">Table name.</param>
            <param name="catalog">Catalog to which the table/view belongs to.</param>
            <param name="columnConfiguration">Column configuration</param>
            <param name="primaryKeyColumnIndexes">Primary key column indexes in <b>columnConfiguration</b> array.</param>
            <param name="parentEntityProperties">Names of parent entity properties in generated <see cref="T:FistCore.Core.IEntity"/> class.</param>
        </member>
        <member name="M:FistCore.Core.DbTableConfiguration.#ctor(System.String,FistCore.Core.ICatalog,FistCore.Core.DbColumnConfiguration[],System.Int32[],System.String[],FistCore.Core.IPropertyCollection)">
            <summary>
            Initializes a new instance of the DbTableConfiguration class.
            </summary>
            <param name="tableName">Table name.</param>
            <param name="catalog">Catalog to which the table/view belongs to.</param>
            <param name="columnConfiguration">Column configuration</param>
            <param name="primaryKeyColumnIndexes">Primary key column indexes in <b>columnConfiguration</b> array.</param>
            <param name="parentEntityProperties">Names of parent entity properties in generated <see cref="T:FistCore.Core.IEntity"/> class.</param>
            <param name="extendedProperties">Customized information associated with the table.</param>
        </member>
        <member name="P:FistCore.Core.DbTableConfiguration.TableName">
            <summary>Gets table name.</summary>
        </member>
        <member name="P:FistCore.Core.DbTableConfiguration.Catalog">
            <summary>Gets catalog information to which the table/view belongs to.</summary>
        </member>
        <member name="P:FistCore.Core.DbTableConfiguration.ColumnConfiguration">
            <summary>Gets column configuration.</summary>
        </member>
        <member name="P:FistCore.Core.DbTableConfiguration.PrimaryKeyColumnIndexes">
            <summary>Gets primary key column indexes in <see cref="P:FistCore.Core.DbTableConfiguration.ColumnConfiguration"/> array.</summary>
        </member>
        <member name="P:FistCore.Core.DbTableConfiguration.ParentEntityProperties">
            <summary>Gets the names of parent entity properties in generated <see cref="T:FistCore.Core.IEntity"/> class.</summary>
        </member>
        <member name="P:FistCore.Core.DbTableConfiguration.EmptyDataTable">
            <summary>Gets emtpy <see cref="T:System.Data.DataTable"/> with structure defined by meta-data for this table. Used to create new DataTable and DataRow instances.</summary>
        </member>
        <member name="P:FistCore.Core.DbTableConfiguration.ExtendedProperties">
            <summary>Gets the collection of customized information associated with the table.</summary>
            <value>A IPropertyCollection with all custom information. <b>null</b> if no custom information is configured.</value>
            <remarks>The ExtendedProperties property lets you configure custom information for the table such as DBMS-specific properties.</remarks>
        </member>
        <member name="T:FistCore.Core.ProviderComponents.ITableRenderer">
            <summary>Renders table/view name and alias.</summary>
        </member>
        <member name="M:FistCore.Core.ProviderComponents.ITableRenderer.RenderTableName(FistCore.Core.IDbTable,System.Text.StringBuilder)">
            <summary>Renders table/view name.</summary>
            <param name="table">Table/view to render.</param>
            <param name="output">StringBuilder to which the name is appended.</param>
        </member>
        <member name="M:FistCore.Core.ProviderComponents.ITableRenderer.RenderAlias(FistCore.Core.IDbTable,System.Text.StringBuilder)">
            <summary>Renders table/view alias.</summary>
            <param name="table">Table/view to render.</param>
            <param name="output">StringBuilder to which the alias is appended.</param>
        </member>
        <member name="T:FistCore.Core.DeleteStatement">
             <summary>
             Removes rows from a table.
             </summary>
             <example>
             <para>
             The following example deletes all rows from the Employees table.
             <code>
             DeleteStatement deleteAllEmployees = new DeleteStatement(new EmployeesMeta());
             deleteAllEmployees.Execute();
             </code>
             </para>
             The following example deletes all employees that are not referenced in the EmployeeTerritories table.
             <para>
             <code>
             public void DeleteNonReferencedEmployees()
             {
             	// This is the equivalent SQL code that does the same task.
            
             	//	DELETE FROM Employees
             	//	WHERE NOT EXISTS
             	//		(SELECT *
             	//		FROM EmployeeTerritories
             	//		WHERE (EmployeeTerritories.EmployeeID = Employees.EmployeeID))
            
             	EmployeesMeta employees = new EmployeesMeta();
             	EmployeeTerritoriesMeta empTerritories = new EmployeeTerritoriesMeta();
            
             	// Subquery that returns all referenced employees. The subquery is used by the NOT EXIST predicate.
             	SelectStatement referencedEmployees = new SelectStatement(empTerritories);
             	referencedEmployees.Where.Add(PredicateFactory.Compare(empTerritories.EmployeeID, "=", employees.EmployeeID));
            
             	DeleteStatement delete = new DeleteStatement(employees);
             	// NOT EXISTS predicate is created when the parameter negate of the PredicateFactory.Exists is set to true.
             	delete.Where.Add(PredicateFactory.Exists(referencedEmployees, true));
             	delete.Execute();
             }
             </code>
             </para>
             </example>
        </member>
        <member name="M:FistCore.Core.DeleteStatement.#ctor(FistCore.Core.IDbTable)">
            <summary>
            Creates a new DELETE statement that deletes rows from the given table.
            </summary>
            <param name="fromTable">The table from which the rows are to be removed.</param>
        </member>
        <member name="M:FistCore.Core.DeleteStatement.Render(FistCore.Core.DbmsType,System.Text.StringBuilder,FistCore.Core.DbParameterCollection)">
            <summary>
            Renders DELETE statement.
            </summary>
            <param name="dbms">Target DBMS.</param>
            <param name="output">StringBuilder to which SQL is appended.</param>
            <param name="parameters">SQL parameter collection to which the object's and its children's
            parameters are added. After the rendering is done the collection contains all parameters with unique names.</param>
        </member>
        <member name="M:FistCore.Core.DeleteStatement.Execute(System.Int32)">
            <summary>
            Executes the DELETE command.
            </summary>
            <param name="cmdTimeout">Sets timeout for SQL command delete statment.</param>
            <returns>The number of rows affected.</returns>
            <remarks>Uses class' <see cref="T:FistCore.Core.IConnectionProvider"/> object.</remarks>
        </member>
        <member name="M:FistCore.Core.DeleteStatement.Execute(FistCore.Core.IConnectionProvider)">
            <summary>
            Executes the DELETE command.
            </summary>
            <param name="conn"><see cref="T:FistCore.Core.IConnectionProvider"/> that will be used.</param>
            <returns>The number of rows affected.</returns>
        </member>
        <member name="P:FistCore.Core.DeleteStatement.FromTable">
            <summary>
            Gets the table from which the rows are to be removed.
            </summary>
        </member>
        <member name="P:FistCore.Core.DeleteStatement.Where">
            <summary>
            Gets or sets the <see cref="T:FistCore.Core.SearchCondition"/> which limits the number of rows that are deleted.
            </summary>
        </member>
        <member name="T:FistCore.Core.ProviderComponents.GenericDeleteRenderer">
            <summary>Renders DELETE statement.</summary>
        </member>
        <member name="T:FistCore.Core.ProviderComponents.IDeleteRenderer">
            <summary>Renders DELETE statement.</summary>
        </member>
        <member name="M:FistCore.Core.ProviderComponents.IDeleteRenderer.Render(FistCore.Core.DeleteStatement,FistCore.Core.DbmsType,System.Text.StringBuilder,FistCore.Core.DbParameterCollection)">
            <summary>
            Renders DELETE statement.
            </summary>
            <param name="delete">DELETE statement to render.</param>
            <param name="dbms">Target DBMS.</param>
            <param name="output">StringBuilder to which SQL is appended.</param>
            <param name="parameters">SQL parameter collection to which the object's and its children's
            parameters are added. After the rendering is done the collection contains all parameters with unique names.</param>
        </member>
        <member name="M:FistCore.Core.ProviderComponents.GenericDeleteRenderer.Render(FistCore.Core.DeleteStatement,FistCore.Core.DbmsType,System.Text.StringBuilder,FistCore.Core.DbParameterCollection)">
            <summary>
            Renders DELETE statement.
            </summary>
            <param name="delete">DELETE statement to render.</param>
            <param name="dbms">Target DBMS.</param>
            <param name="output">StringBuilder to which SQL is appended.</param>
            <param name="parameters">SQL parameter collection to which the object's and its children's
            parameters are added. After the rendering is done the collection contains all parameters with unique names.</param>
        </member>
        <member name="T:FistCore.Core.EntityCollection`2">
            <summary>Strongly typed entity collection.</summary>
            <typeparam name="TEntity">Type of entities which are stored in the collection.</typeparam>
            <typeparam name="TTable">Table/view metadata and object factory for entities stored in the collection.</typeparam>
            <remarks>In .NET 2.0 or newer, instead of using generated collections, you may want to use this
            generic <b>EntityCollection&lt;TEntity, TTable&gt;</b> implementation. It makes it easier to define
            new strong-typed collections which contain objects derived from generated entity classes.</remarks>
        </member>
        <member name="F:FistCore.Core.EntityCollection`2.tableAlias">
            <summary>
            Alias of the table/view to which this entity belongs to.
            Required as distinct member when deserializing object to recreate member 'table'.
            </summary>
        </member>
        <member name="F:FistCore.Core.EntityCollection`2.table">
            <summary>
            Holds meta data for the table/view this entity belongs to.
            Not serialized because it is very big. This member should never be acessed directly.
            Use _Table property as it will recreate this member if it's null (eg. after deserialization).
            </summary>
        </member>
        <member name="M:FistCore.Core.EntityCollection`2.#ctor">
            <summary>
            Initializes a new instance of the EntityCollection class.
            </summary>
            <remarks>Creates a new EntityCollection for storing entities compatible with the specified table type.</remarks>
        </member>
        <member name="M:FistCore.Core.EntityCollection`2.#ctor(System.Int32)">
            <summary>
            Initializes a new instance of the EntityCollection class.
            </summary>
            <param name="capacity">The number of elements that the new list can initially store.</param>
            <remarks>Creates a new EntityCollection for storing entities compatible with the specified table type.</remarks>
        </member>
        <member name="M:FistCore.Core.EntityCollection`2.#ctor(System.Collections.Generic.IList{`0})">
            <summary>
            Initializes a new instance of the EntityCollection class.
            </summary>
            <param name="list">The list that is wrapped by the new collection.</param>
        </member>
        <member name="M:FistCore.Core.EntityCollection`2.#ctor(`1)">
            <summary>
            Initializes a new instance of the EntityCollection class.
            </summary>
            <param name="dbTable">Contains metadata about entities stored in the EntityCollection.</param>
            <remarks>Creates a new EntityCollection for storing entities compatible with the specified table.</remarks>
        </member>
        <member name="M:FistCore.Core.EntityCollection`2.#ctor(`1,System.Int32)">
            <summary>
            Initializes a new instance of the EntityCollection class.
            </summary>
            <param name="dbTable">Contains metadata about entities stored in the EntityCollection.</param>
            <param name="capacity">The number of elements that the new list can initially store.</param>
            <remarks>Creates a new EntityCollection for storing entities compatible with the specified table.</remarks>
        </member>
        <member name="M:FistCore.Core.EntityCollection`2.#ctor(`1,System.Collections.Generic.IList{`0})">
            <summary>
            Initializes a new instance of the EntityCollection class.
            </summary>
            <param name="dbTable">Contains metadata about entities stored in the EntityCollection.</param>
            <param name="list">The list that is wrapped by the new collection.</param>
            <remarks>Creates a new EntityCollection for storing entities compatible with the specified table.</remarks>
        </member>
        <member name="M:FistCore.Core.EntityCollection`2.#ctor(System.Data.DataTable)">
            <summary>
            Initializes a new instance of the EntityCollection class.
            </summary>
            <param name="data">Contains entity data. Must be compatibile with entities stored in the collection.</param>
            <remarks>Creates a new EntityCollection for storing entities compatibile with the specified table type and
            populates it with data from the given DataTable.</remarks>
        </member>
        <member name="M:FistCore.Core.EntityCollection`2.#ctor(`1,System.Data.DataTable)">
            <summary>
            Initializes a new instance of the EntityCollection class.
            </summary>
            <param name="dbTable">Contains metadata about entities stored in the EntityCollection.</param>
            <param name="data">Contains entity data. Must be compatibile with entities stored in the collection.</param>
        </member>
        <member name="M:FistCore.Core.EntityCollection`2.Add(`0)">
            <summary>Adds an entity to the end of the collection.</summary>
            <param name="item">The entity to be added to the end of the EntityCollection. <b>null</b> is not allowed.</param>
        </member>
        <member name="M:FistCore.Core.EntityCollection`2.Clear">
            <summary>Removes all elements from the collection.</summary>
        </member>
        <member name="M:FistCore.Core.EntityCollection`2.Contains(`0)">
            <summary>Determines whether an element is in the collection.</summary>
            <param name="item">The object to locate in the collection.</param>
            <returns><b>true</b> if item is found in the collection; otherwise, <b>false</b>.</returns>
        </member>
        <member name="M:FistCore.Core.EntityCollection`2.CopyTo(`0[],System.Int32)">
            <summary>Copies the entire collection to a compatible one-dimensional Array, starting at the specified index of the target array.</summary>
            <param name="array">The one-dimensional Array that is the destination of the elements copied from collection. The Array must have zero-based indexing.</param>
            <param name="arrayIndex">The zero-based index in array at which copying begins.</param>
        </member>
        <member name="M:FistCore.Core.EntityCollection`2.GetEnumerator">
            <summary>Returns an enumerator that iterates through the collection.</summary>
            <returns>An IEnumerator for the collection.</returns>
        </member>
        <member name="M:FistCore.Core.EntityCollection`2.IndexOf(`0)">
            <summary>Searches for the specified object and returns the zero-based index of the first occurrence within the entire collection.</summary>
            <param name="item">The object to locate in the collection.</param>
            <returns>The zero-based index of the first occurrence of item within the entire collection, if found; otherwise, -1.</returns>
        </member>
        <member name="M:FistCore.Core.EntityCollection`2.Insert(System.Int32,`0)">
            <summary>Inserts an element into the collection at the specified index.</summary>
            <param name="index">The zero-based index at which item should be inserted.</param>
            <param name="item">The object to insert. <b>null</b> is not allowed.</param>
        </member>
        <member name="M:FistCore.Core.EntityCollection`2.Remove(`0)">
            <summary>Removes the first occurrence of a specific object from the collection.</summary>
            <param name="item">The object to remove from the collection.</param>
            <returns>true if item is successfully removed; otherwise, false. This method also returns false if item was not found in the original collection.</returns>
        </member>
        <member name="M:FistCore.Core.EntityCollection`2.RemoveAt(System.Int32)">
            <summary>Removes the element at the specified index of the collection.</summary>
            <param name="index">The zero-based index of the element to remove.</param>
        </member>
        <member name="M:FistCore.Core.EntityCollection`2.System#Collections#IList#Add(System.Object)">
            <summary>Adds an item to the IList.</summary>
            <param name="value">The object to add to the IList.</param>
            <returns>The position into which the new element was inserted.</returns>
        </member>
        <member name="M:FistCore.Core.EntityCollection`2.System#Collections#IList#Contains(System.Object)">
            <summary>Determines whether an element is in the collection.</summary>
            <param name="value">The object to locate in the collection.</param>
            <returns><b>true</b> if item is found in the collection; otherwise, <b>false</b>.</returns>
        </member>
        <member name="M:FistCore.Core.EntityCollection`2.CopyTo(System.Array,System.Int32)">
            <summary>Copies the entire collection to a compatible one-dimensional Array, starting at the specified index of the target array.</summary>
            <param name="array">The one-dimensional Array that is the destination of the elements copied from collection. The Array must have zero-based indexing.</param>
            <param name="index">The zero-based index in array at which copying begins.</param>
        </member>
        <member name="M:FistCore.Core.EntityCollection`2.System#Collections#IEnumerable#GetEnumerator">
            <summary>Returns an enumerator that iterates through the collection.</summary>
            <returns>An IEnumerator for the collection.</returns>
        </member>
        <member name="M:FistCore.Core.EntityCollection`2.System#Collections#IList#IndexOf(System.Object)">
            <summary>Searches for the specified object and returns the zero-based index of the first occurrence within the entire collection.</summary>
            <param name="item">The object to locate in the collection.</param>
            <returns>The zero-based index of the first occurrence of item within the entire collection, if found; otherwise, -1.</returns>
        </member>
        <member name="M:FistCore.Core.EntityCollection`2.System#Collections#IList#Insert(System.Int32,System.Object)">
            <summary>Inserts an element into the collection at the specified index.</summary>
            <param name="index">The zero-based index at which item should be inserted.</param>
            <param name="value">The object to insert. <b>null</b> is not allowed.</param>
        </member>
        <member name="M:FistCore.Core.EntityCollection`2.System#Collections#IList#Remove(System.Object)">
            <summary>Removes the first occurrence of a specific object from the IList.</summary>
            <param name="value">The Object to remove from the IList.</param>
        </member>
        <member name="M:FistCore.Core.EntityCollection`2.GetRange(System.Int32,System.Int32)">
            <summary>
            Creates a shallow copy of a range of elements in the source EntityCollection{TEntity, TTable}.
            </summary>
            <param name="index">The zero-based IEntityCollection index at which the range starts.</param>
            <param name="count">The number of elements in the range.</param>
        </member>
        <member name="M:FistCore.Core.EntityCollection`2.FistCore#Core#IEntityCollection#Add(FistCore.Core.IEntity,System.Boolean)">
            <summary>
            Adds an entity to the end of the collection.
            </summary>
            <param name="entity">The entity to be added to the end of the EntityCollection.
            Nulls are not allowed, otherwise a NoNullAllowedException is generated.
            Entity must be an instance of a class compatible with <see cref="P:FistCore.Core.EntityCollection`2.IDbTable"/>.</param>
            <param name="validateEntityType">Indicates whether the type of entity is validated to
            determine if it is an instance of a class compatible with <see cref="P:FistCore.Core.EntityCollection`2.IDbTable"/>.
            Set to <b>false</b> only when absoulutely sure that the entity is compatibile.
            Setting this parameter to <b>false</b> may increase performance.</param>
        </member>
        <member name="M:FistCore.Core.EntityCollection`2.FistCore#Core#IEntityCollection#GetByPK(System.Object[])">
            <summary>Gets the first entity with the given primary key value.</summary>
            <param name="primaryKeyValue">Primary key values in order as returned by <see cref="M:FistCore.Core.IEntity.GetPrimaryKeyValue"/> method.</param>
            <returns>Entity with the given key or <b>null</b> if it cannot be found.</returns>
        </member>
        <member name="M:FistCore.Core.EntityCollection`2.GetByPK(System.Object[])">
            <summary>
            Gets the first entity with the given primary key value.
            </summary>
            <param name="primaryKeyValue">Primary key values in order as returned by <see cref="M:FistCore.Core.IEntity.GetPrimaryKeyValue"/> method.</param>
            <returns>Entity with the given key or <b>null</b> if it cannot be found.</returns>
        </member>
        <member name="M:FistCore.Core.EntityCollection`2.op_Explicit(System.Data.DataTable)~FistCore.Core.EntityCollection{`0,`1}">
            <summary>
            Converts the given DataTable to EntityCollection.
            </summary>
            <param name="data">Contains entity data. Must be compatibile with entities stored in the collection.</param>
            <returns>EntityCollection.</returns>
        </member>
        <member name="M:FistCore.Core.EntityCollection`2.FromDataTable(System.Data.DataTable)">
            <summary>
            Clears the EntityCollection and fills it with entities created from the given data.
            </summary>
            <param name="data">DataTable containing data for entities.</param>
        </member>
        <member name="M:FistCore.Core.EntityCollection`2.FromDataTable(System.Data.DataTable,FistCore.Core.IDbTable)">
            <summary>
            Clears the EntityCollection and fills it with entities created from the given data.
            </summary>
            <param name="data">DataTable containing data for entities.</param>
            <param name="fieldMetadata"><see cref="P:FistCore.Core.EntityCollection`2.IDbTable"/> meta data object which links ADO.NET row columns to entity properties.</param>
            <remarks>This method, when used in combination with <see cref="P:FistCore.Core.EntityCollection`2.IDbTable"/> objects that contain columns with
            prefixed aliases (see <see cref="M:FistCore.Core.IDbTable.SetPrefixedAliases"/>), enables you to initialize multiple
            entities that belong to different tables with data from a single DataRow.</remarks>
        </member>
        <member name="M:FistCore.Core.EntityCollection`2.ToDataTable">
            <summary>
            Converts the collection to DataTable.
            </summary>
            <returns>Data.</returns>
            <remarks><para>Conversion will fail if the collection contains entities whose non-nullable fields
            haven't been initialized or if it contains multiple entities with the same primary key.</para>
            <para>All rows will have <see cref="F:System.Data.DataRowState.Added"/> state.</para></remarks>
        </member>
        <member name="M:FistCore.Core.EntityCollection`2.ToDataTable(System.Boolean)">
            <summary>
            Converts the collection to DataTable.
            </summary>
            <param name="convertEntityStatesToDataRowStates">Indicates whether the <see cref="P:System.Data.DataRow.RowState"/>
            of the rows contained in the DataTable is to be set to values compatibile to the values contained
            in the <see cref="P:FistCore.Core.IEntity.EntityState"/> properties of the entities contained in the collection.
            If set to <b>false</b> all rows will have <see cref="F:System.Data.DataRowState.Added"/> state.</param>
            <returns>Data.</returns>
            <remarks><para>Conversion will fail if the collection contains entities whose non-nullable fields
            haven't been initialized or if it contains multiple entities with the same primary key.</para>
            <list type="bullet">
            <listheader>EntityState to DataRowState conversion rules</listheader>
            <item>
            	<term><see cref="F:FistCore.Core.EntityState.Deleted"/></term>
            	<description>The row is not added to the DataTable.</description>
            </item>
            <item>
            	<term><see cref="F:FistCore.Core.EntityState.New"/></term>
            	<description><see cref="P:System.Data.DataRow.RowState"/> property is set to <see cref="F:System.Data.DataRowState.Added"/>.</description>
            </item>
            <item>
            	<term><see cref="F:FistCore.Core.EntityState.OutOfSync"/></term>
            	<description><see cref="P:System.Data.DataRow.RowState"/> property is set to <see cref="F:System.Data.DataRowState.Modified"/>.</description>
            </item>
            <item>
            	<term><see cref="F:FistCore.Core.EntityState.PendingDeletion"/></term>
            	<description><see cref="P:System.Data.DataRow.RowState"/> property is set to <see cref="F:System.Data.DataRowState.Deleted"/>.</description>
            </item>
            <item>
            	<term><see cref="F:FistCore.Core.EntityState.Synchronized"/></term>
            	<description><see cref="P:System.Data.DataRow.RowState"/> property is set to <see cref="F:System.Data.DataRowState.Unchanged"/>.</description>
            </item>
            </list></remarks>
        </member>
        <member name="M:FistCore.Core.EntityCollection`2.SetParents(FistCore.Core.DbRelation,FistCore.Core.IEntity)">
            <summary>
            Sets the parent defined by the given relation for all entities in the collection.
            </summary>
            <param name="foreignKey">FK.</param>
            <param name="parent">Parent entity.</param>
            <remarks>All child entities in the collection will share the same parent object instance (same reference).</remarks>
        </member>
        <member name="M:FistCore.Core.EntityCollection`2.SetParents(FistCore.Core.DbRelation,FistCore.Core.IEntity,System.Boolean)">
            <summary>
            Sets the parent defined by the given relation for all entities in the collection.
            </summary>
            <param name="foreignKey">FK.</param>
            <param name="parent">Parent entity.</param>
            <param name="shareParentObject">Indicates if all child entities in the collection will share the same
            parent object instance (same reference). If set to <b>false</b>, a clone of the parent will be created
            for each child entity in the current collection.</param>
        </member>
        <member name="M:FistCore.Core.EntityCollection`2.SetParents(FistCore.Core.DbRelation,System.Collections.IEnumerable)">
            <summary>
            Sets the parent defined by the given relation for all entities in the collection.
            </summary>
            <param name="foreignKey">FK.</param>
            <param name="parents">Collection of all parent entities referenced by child entities in the current
            collection. If any child references a parent which is not provided, an exception will be generated.</param>
            <remarks><p>The method will try to find a parent in the provided collection for each child entity
            in the current collection. Child whose FK is not set are skipped. If any child references a parent
            which is not provided, an exception will be generated. If a child's FK is invalid, i.e. only partially
            set, an exception will be generated.</p>
            <p>Child entities with equal FK values will share the same parent object instance (same reference).</p></remarks>
        </member>
        <member name="M:FistCore.Core.EntityCollection`2.SetParents(FistCore.Core.DbRelation,System.Collections.IEnumerable,System.Boolean)">
            <summary>
            Sets the parent defined by the given relation for all entities in the collection.
            </summary>
            <param name="foreignKey">FK.</param>
            <param name="parents">Collection of all parent entities referenced by child entities in the current
            collection. If any child references a parent which is not provided, an exception will be generated.</param>
            <param name="shareParentObject">Indicates if child entities with equal FK values will share the same
            parent object instance (same reference). If set to <b>false</b>, a clone of a parent will be created
            for each child entity in the current collection.</param>
            <remarks><p>The method will try to find a parent in the provided collection for each child entity
            in the current collection. Child whose FK is not set are skipped. If any child references a parent
            which is not provided, an exception will be generated. If a child's FK is invalid, i.e. only partially
            set, an exception will be generated.</p></remarks>
        </member>
        <member name="P:FistCore.Core.EntityCollection`2.Table">
            <summary>
            Gets metadata for entities stored in the collection.
            </summary>
        </member>
        <member name="P:FistCore.Core.EntityCollection`2.IDbTable">
            <summary>Gets IDbTable object used by this EntityCollection.</summary>
        </member>
        <member name="P:FistCore.Core.EntityCollection`2.FistCore#Core#IEntityCollection#Item(System.Int32)">
            <summary>Gets or sets entity at the specified zero-based index.</summary>
            <param name="index">The zero-based index of the element to get or set.</param>
        </member>
        <member name="P:FistCore.Core.EntityCollection`2.Count">
            <summary>Gets the number of elements actually contained in the collection</summary>
        </member>
        <member name="P:FistCore.Core.EntityCollection`2.Item(System.Int32)">
            <summary>Gets or sets entity at the specified zero-based index.</summary>
            <param name="index">The zero-based index of the element to get or set.</param>
            <value><b>null</b> is not allowed.</value>
        </member>
        <member name="P:FistCore.Core.EntityCollection`2.System#Collections#IList#IsFixedSize">
            <summary>Gets a value indicating whether the IList has a fixed size.</summary>
            <value>true if the IList has a fixed size; otherwise, false.</value>
        </member>
        <member name="P:FistCore.Core.EntityCollection`2.System#Collections#Generic#ICollection{TEntity}#IsReadOnly">
            <summary>Gets a value indicating whether the ICollection is read-only.</summary>
            <value>true if the ICollection is read-only; otherwise, false.</value>
        </member>
        <member name="P:FistCore.Core.EntityCollection`2.System#Collections#IList#IsReadOnly">
            <summary>Gets a value indicating whether the IList is read-only.</summary>
            <value>true if the ICollection is read-only; otherwise, false.</value>
        </member>
        <member name="P:FistCore.Core.EntityCollection`2.System#Collections#ICollection#IsSynchronized">
            <summary>Gets a value indicating whether access to the ICollection is synchronized (thread safe).</summary>
            <value>true if access to the ICollection is synchronized (thread safe); otherwise, false.</value>
        </member>
        <member name="P:FistCore.Core.EntityCollection`2.System#Collections#IList#Item(System.Int32)">
            <summary>Gets or sets the element at the specified index.</summary>
            <value>The element at the specified index. <b>null</b> is not allowed.</value>
        </member>
        <member name="P:FistCore.Core.EntityCollection`2.System#Collections#ICollection#SyncRoot">
            <summary>Gets an object that can be used to synchronize access to the ICollection.</summary>
            <value>An object that can be used to synchronize access to the ICollection.</value>
        </member>
        <member name="T:FistCore.Core.EntityBase">
             <summary>
             Represents a single database entity with data-access functionality.
             Class members are mapped to table fields. Provides generic methods for manipulating entity and table data.
             </summary>
             <remarks>Main features:
             <list type="bullet">
             <item>Class members are mapped to table fields. An instance of the class represents a row in the database.</item>
             <item>CRUD methods. Create, retrieve, update and delete methods that manipulate a single row in the
             database using primary key logic. All CRUD methods have a suffix <b>One.</b></item>
             <item>Tracks current entity state in regard to data-source: new, synchronised, out-of-sync, deleted.</item>
             <item>Maps relations to parent entities and uses foreign key fields to fetch them.</item>
             <item>Validation.</item>
             <item>Conversion to/from the ADO.NET <see cref="T:System.Data.DataRow"/> object.</item>
             <item>Retrieval of child entities using one-to-many and many-to-many relations.</item>
             <item>Batch manipulation and retrieval of multiple rows.</item>
             <item>Aggregate functions.</item>
             <item>Sorting of retrieved rows on database or in application.</item>
             <item>Connection and transaction sharing with other data-tier objects.</item>
             <item>Hierarchical queries and updates - methods with a suffix <b>Tree</b>.</item>
             </list>
             </remarks>
             <example>
             The following example fetches an entity from the Order Details table and uses mapped relations to navigate through database.
             All data-access operations are performed using the same openned <see cref="T:FistCore.Core.IConnectionProvider"/> object.
             <code>
             public EmployeesEntity NavigateFromOrderDetailToManager(int orderId, int productId)
             {
             	EmployeesEntity manager = null;
            
            		// Create a new OrderDetailsEntity and set its primary key fields.
             	OrderDetailsEntity item = new OrderDetailsEntity();
             	item.OrderID = orderId;
             	item.ProductID = productId;
            
             	// If the connection is not open then a data-access object will open it, retrieve data and close the connection.
             	// We want to avoid multiple openning and closing of the connection to achieve maximum performance.
            
             	// Manually open connection. This connection will be automatically shared between all
             	// data-access objects required to perform navigation from order detail to manager.
             	// Data-access objects detect that the connection has been openned elsewhere and won't close it.
             	item.ConnectionProvider.OpenConnection();
            
             	// SelectOne returns true if the item with the specified PK values exists.
             	bool itemExists = item.SelectOne();
             	if (itemExists)
             	{
             		// Navigate through Orders (use Order Details.OrderID FK), Employees (via Orders.EmployeeID FK)
             		// to managers which are also in the Employees table (via Employees.ReportsTo FK).
             		// All these objects access the database using the same IConnectionProvider object.
             		manager = item.OrdersParent.EmployeesParent.EmployeesSuperior;
             	}
            
             	// Explicitly close the connection that was openned manually and return it to the connection pool.
             	// It is a good practice to explicitly close connection immediately after it is no longer required.
             	item.ConnectionProvider.CloseConnection();
            
             	return manager;
             }
             </code>
             </example>
        </member>
        <member name="T:FistCore.Core.EntityModelBase">
            <summary>
            Models data structure and behavior of a database entity.
            </summary>
            <remarks><p>Doesn't implement any data-access operations.</p>
            <p>Features:
            <list type="bullet">
            <item>Class members are mapped to table fields. An instance of the class represents a row in the database.</item>
            <item>Tracks current entity state in regard to data-source: new, synchronised, out-of-sync, deleted.</item>
            <item>Maps relations to parent entities. Inherited classes may implement data-acces logic for automatic relationship navigation.</item>
            <item>Validation.</item>
            <item>Conversion to/from the ADO.NET <see cref="T:System.Data.DataRow"/> object.</item>
            </list></p>
            </remarks>
        </member>
        <member name="T:FistCore.Core.IEntity">
            <summary>
            Entity object models data structure and behavior of a database entity.
            </summary>
        </member>
        <member name="M:FistCore.Core.IEntity.FromDataRow(System.Data.DataRow)">
            <summary>
            Initializes entity members with data stored in the given DataRow.
            </summary>
            <param name="row">DataRow with the required columns.</param>
        </member>
        <member name="M:FistCore.Core.IEntity.FromDataRow(System.Data.DataRow,FistCore.Core.IDbTable)">
            <summary>
            Initializes entity members with data stored in the given DataRow.
            </summary>
            <param name="row">DataRow with all or some of the columns defined in meta data.</param>
            <param name="fieldMetadata"><see cref="T:FistCore.Core.IDbTable"/> meta data object which links ADO.NET row columns to entity properties.</param>
            <remarks>This method, when used in combination with <see cref="T:FistCore.Core.IDbTable"/> objects that contain columns with
            prefixed aliases (see <see cref="M:FistCore.Core.IDbTable.SetPrefixedAliases"/>), enables you to initialize multiple
            entities that belong to different tables with data from a single DataRow.</remarks>
        </member>
        <member name="M:FistCore.Core.IEntity.ToObjectArray">
            <summary>
            Creates an array of objects containing entity data suitable for copying and importing into <see cref="T:System.Data.DataTable"/>
            </summary>
            <returns>Entity values.</returns>
        </member>
        <member name="M:FistCore.Core.IEntity.FromObjectArray(System.Object[])">
            <summary>
            Initializes entity members with the given values.
            </summary>
            <param name="entityValues">Array with the required values.</param>
        </member>
        <member name="M:FistCore.Core.IEntity.GetPrimaryKeyValue">
            <summary>
            Gets the value(s) that uniquely identify an entity.
            In the order as specified in the accompanying IDbTable class.
            <b>Null</b> if the parent table/view doesn't have a primary key constraint or the required fields are not set.
            </summary>
            <returns>An object array that holds Primary Key values.</returns>
        </member>
        <member name="M:FistCore.Core.IEntity.PrimaryKeyEquals(System.Object[])">
            <summary>
            Checks if the given values are equal to the primary key value of this entity.
            </summary>
            <param name="values">Values.</param>
            <returns>True if primary key values match the given values; false otherwise or if the PK fields
            of this entity aren't set.</returns>
        </member>
        <member name="M:FistCore.Core.IEntity.ValidateAllFields">
            <summary>
            Validates all fields of an entity. Returns all encountered errors.
            </summary>
            <returns>Array of FieldError objects that describe all encountered errors. Empty array if there are no errors.</returns>
        </member>
        <member name="M:FistCore.Core.IEntity.IsValidEntity">
            <summary>
            Returns a value which indicates whether all fields of an entity contain valid values.
            </summary>
            <returns>True if all fields are valid; false otherwise.</returns>
        </member>
        <member name="M:FistCore.Core.IEntity.ValidateField(FistCore.Core.IDbColumn)">
            <summary>
            Validates specified field.
            </summary>
            <remarks>Checks whether the value contained in the given field obeys basic constraints
            (nullability, min/max value etc). Returns <see cref="T:FistCore.Core.FieldErrorCode"/> that indicates
            the type of error encountered.</remarks>
            <param name="field">Field mapped in this entity.</param>
            <returns>Error code that indicates the type of encountered error.</returns>
        </member>
        <member name="M:FistCore.Core.IEntity.IsValidField(FistCore.Core.IDbColumn)">
            <summary>
            Returns a value which indicates whether the specifified is valid.
            Checks whether the value contained in the given field obeys basic constraints (nullability, min/max value etc).
            </summary>
            <param name="field">Field mapped in this entity.</param>
            <returns>True if the field is valid; false otherwise.</returns>
        </member>
        <member name="M:FistCore.Core.IEntity.ResetField(FistCore.Core.IDbColumn)">
            <summary>
            Resets the specified field to default value.
            Behaviour should be the same as using the SetField method with a null argument.
            </summary>
            <param name="field">Field that is to be reset.</param>
        </member>
        <member name="M:FistCore.Core.IEntity.SetField(FistCore.Core.IDbColumn,System.Object)">
            <summary>
            Sets the given value into specified field.
            </summary>
            <param name="field">Field.</param>
            <param name="value">Value. If null then the field is reset to default value.</param>
        </member>
        <member name="M:FistCore.Core.IEntity.GetField(FistCore.Core.IDbColumn)">
            <summary>
            Gets the value contained in the specified field.
            </summary>
            <param name="field">Field.</param>
            <returns>Value.</returns>
        </member>
        <member name="M:FistCore.Core.IEntity.IsNull(FistCore.Core.IDbColumn)">
            <summary>
            Checks whether the specified field contains a <b>null</b> reference or it hasn't been initialized.
            </summary>
            <param name="field">Field. Throws exception if an invalid field is given.</param>
            <returns><b>true</b> if the field contains <b>null</b> not initialized; <b>false</b> otherwise.</returns>
        </member>
        <member name="M:FistCore.Core.IEntity.SetParent(FistCore.Core.DbRelation,FistCore.Core.IEntity)">
            <summary>
            Sets the given value into the member that represents the parent entity defined by the foreign key.
            </summary>
            <param name="foreignKey">FK.</param>
            <param name="entity">Parent entity.</param>
        </member>
        <member name="M:FistCore.Core.IEntity.GetParent(FistCore.Core.DbRelation)">
            <summary>
            Gets the parent entity defined by the given foreign key.
            </summary>
            <param name="foreignKey">FK.</param>
            <returns>Parent entity. <b>Null</b> if the FK fields haven't been set or if the entity with the given key values doesn't exist.</returns>
            <remarks>If a class implements data-access logic, and if the entity hasn't yet been initialized but the
            FK values are set then the method will automatically fetch it from the data source.</remarks>
        </member>
        <member name="P:FistCore.Core.IEntity.FirstPrimaryKeyValue">
            <summary>
            Gets or first primary key value. Used for grid.
            </summary>
        </member>
        <member name="P:FistCore.Core.IEntity.Tag">
            <summary>
            Gets or sets additional data used for rendering.
            </summary>
        </member>
        <member name="P:FistCore.Core.IEntity.Table">
            <summary>
            IDbTable object that contains metadata for the entity's table/view.
            </summary>
        </member>
        <member name="P:FistCore.Core.IEntity.EntityState">
            <summary>
            Gets or sets the value which indicates the state of entity in regard to data-source.
            </summary>
        </member>
        <member name="P:FistCore.Core.IEntity.NullCheckEnabled">
            <summary>
            Gets or sets a value indicating whether the real-time null-check for non-nullable fields is performed.
            </summary>
            <remarks>When set to <b>true</b> getters mapped to table fields generate an exception if accessed
            before a value has been set. When set to <b>false</b> getters return default values if accessed
            before a value has been set (eg. zero for non-nullable integer fields).</remarks>
        </member>
        <member name="P:FistCore.Core.IEntity.RelationshipNavigationEnabled">
            <summary>
            Gets or sets the value which indicates whether the entity is allowed to automatically navigate the database via relations (when not explicitly ordered).
            </summary>
            <remarks><p>Has no affect on entity classes that don't implement data-access logic.</p>
            <p>If entity relationship navigation is enabled, the <see cref="M:FistCore.Core.IEntity.GetParent(FistCore.Core.DbRelation)"/> method and
            properties mapped to parent entities (via foreign keys) will automatically try to fetch the parent
            entity if it isn't already fetched.</p>
            <p>If entity relationship navigation is disabled, the <b>GetParent</b> method and
            properties mapped to parent entities (via foreign keys) will not automatically access the data-source
            to fetch the parent entity. Thus, if the parent isn't already initialized, <b>null</b> will be returned.</p>
            <p>Default behavior is not standardized. See documentation for classes that implement the IEntity
            interface.</p></remarks>
        </member>
        <member name="F:FistCore.Core.EntityModelBase.entityState">
            <summary>
            Indicates the state of entity in regard to data-source.
            </summary>
        </member>
        <member name="F:FistCore.Core.EntityModelBase.nullCheckEnabled">
            <summary>
            Enables or disables real-time null-check for non-nullable fields. Default is <b>true</b>.
            </summary>
        </member>
        <member name="F:FistCore.Core.EntityModelBase.tableAlias">
            <summary>
            Alias of the table/view to which this entity belongs to.
            Required as distinct member when deserializing object to recreate member 'table'.
            </summary>
        </member>
        <member name="F:FistCore.Core.EntityModelBase.dbTableClass">
            <summary>
            Class that holds meta data for the table/view this entity belongs to.
            Required as distinct member when deserializing object to recreate member 'table'.
            </summary>
        </member>
        <member name="F:FistCore.Core.EntityModelBase.table">
            <summary>
            Holds meta data for the table/view this entity belongs to.
            Not serialized because it is very big. This member should never be acessed directly.
            Use _Table property as it will recreate this member if it's null (eg. after deserialization).
            </summary>
        </member>
        <member name="F:FistCore.Core.EntityModelBase.relationshipNavigationEnabled">
            <summary>
            Indicates whether the entity may automatically navigate the database (when not explicitly ordered).
            </summary>
            <remarks><p>If entity relationship navigation is enabled, the <see cref="M:FistCore.Core.EntityModelBase.GetParent(FistCore.Core.DbRelation)"/> method and
            properties mapped to parent entities (via foreign keys) will automatically try to fetch the parent
            entity if it isn't already fetched.</p>
            <p>Default is <b>true</b>.</p></remarks>
        </member>
        <member name="F:FistCore.Core.EntityModelBase.getDbTable">
            <summary>
            Optional delegate to optimized static method that builds 'table' member. Eg. used when deserializing entity object.
            </summary>
        </member>
        <member name="M:FistCore.Core.EntityModelBase.#ctor(FistCore.Core.IDbTable)">
            <summary>
            Initializes a new instance of EntityModelBase.
            </summary>
            <param name="dbTable">Metadata for table/view to which the entity belongs to.</param>
            <remarks>Sets table/view and the catalog to which this entity belongs to.</remarks>
        </member>
        <member name="M:FistCore.Core.EntityModelBase.#ctor(System.Type,System.String,FistCore.Core.DbTableProvider)">
            <summary>
            Initializes a new instance of EntityModelBase.
            </summary>
            <param name="dbTableClass">A class that implements <see cref="T:FistCore.Core.IDbTable"/> interface.</param>
            <param name="tableAlias">Optional table alias.</param>
            <param name="staticGetDbTableMethod">Optional static method that provide an instance of class specified in the <b>dbTableClass</b>.
            If <b>null</b> then default implementation using reflection is used.</param>
        </member>
        <member name="M:FistCore.Core.EntityModelBase.#ctor(FistCore.Core.IDbTable,System.Type,FistCore.Core.EntityState)">
            <summary>
            Initializes a new instance of EntityModelBase.
            </summary>
            <param name="table">Metadata for table/view to which the entity belongs to.</param>
            <param name="dbTableClass">A class that implements <see cref="T:FistCore.Core.IDbTable"/> interface. Must be same as typeof(table) but this is not checked to ensure faster performance.</param>
            <param name="entityState">Specifies the state of entity with regard to data-source.</param>
        </member>
        <member name="M:FistCore.Core.EntityModelBase.FromDataRow(System.Data.DataRow)">
            <summary>
            Initializes entity members with data stored in the given DataRow.
            </summary>
            <param name="row">DataRow with the required columns.</param>
            <remarks>FistCore Generator generates constructors that create an entity from data contained
            in a DataRow so this method is rarely invoked manually.</remarks>
            <example>
            The following example shows an example of generated constructor that creates an instance of EmployeesEntity class from a DataRow.
            <code>
            public class EmployeesEntity : EntityBase
            {
            	public EmployeesEntity(DataRow row) : base(new EmployeesMeta())
            	{
            		FromDataRow(row);
            	}
            }
            </code>
            </example>
        </member>
        <member name="M:FistCore.Core.EntityModelBase.FromDataRow(System.Data.DataRow,FistCore.Core.IDbTable)">
             <summary>
             Initializes entity members with data stored in the given DataRow.
             </summary>
             <param name="row">DataRow with all or some of the columns defined in meta data.</param>
             <param name="fieldMetadata"><see cref="T:FistCore.Core.IDbTable"/> meta data object which links ADO.NET row columns to entity properties.</param>
             <remarks><p>This method, when used in combination with <see cref="T:FistCore.Core.IDbTable"/> objects that contain columns with
             prefixed aliases (see <see cref="M:FistCore.Core.IDbTable.SetPrefixedAliases"/>), enables you to initialize multiple
             entities that belong to different tables with data from a single DataRow. This is particularly
             usefull when fetching an entity with one or more of its parent entities, since all required data can be
             retrieved in a single select statement.</p>
             <p>Generic implementation is not optimized, and should be overriden and optimized in derived classes. Latest version of FistCore generator generates
             optimized code. Generic implementation is only intended to be used for compatibility purposes, ie. if the code hasn't been regenerated.</p>
             </remarks>
             <example>The following example shows how to retrieve data required to initialize an EmployeesEntity
             and its EmployeesEntity.EmployeesSuperrior parent property.
             <code>
             public EmployeesEntity FetchEmployeesAndManager(int employeeId)
             {
             	// Parent entity is from the same table.
             	// Assign alises to tables and set prefixed aliases to all columns.
             	// SELECT statement which is sent to the database looks like this:
             	// SELECT [workers].[EmployeeID] AS [workers_EmployeeID], [workers].[LastName] AS [workers_LastName]...
             	// This ensures that all items in the select list have unique aliases,
             	// thus ensuring unique column names in the resulting ADO.NET DataRow.
            
             	EmployeesMeta workers = new EmployeesMeta("workers", /*set column aliases*/ true);
             	EmployeesMeta managers = new EmployeesMeta("managers", /*set column aliases*/ true);
             	SelectStatement select = new SelectStatement(workers);
             	select.SelectList.Add(workers.Columns);
             	select.SelectList.Add(managers.Columns);
             	select.Relations.Add(new DbRelation(managers, workers, workers.ReportsTo));
             	select.Where.Add(workers.EmployeeID, employeeId);
            
             	DataTable data = select.Execute();
             	DataRow row = (data.Rows.Count &gt; 0) ? data.Rows[0] : null;
             	if (row == null)
             		return null;
            
             	EmployeesEntity emp = new EmployeesEntity();
             	emp.FromDataRow(row, workers);
             	bool hasSuperrior = !emp.IsNull(emp.Table.ReportsTo);
             	if (hasSuperrior)
             	{
             		EmployeesEntity reportsTo = new EmployeesEntity();
             		reportsTo.FromDataRow(row, managers);
             		emp.EmployeesSuperior = reportsTo;
             	}
            
             	return emp;
             }
             </code>
             </example>
        </member>
        <member name="M:FistCore.Core.EntityModelBase.ToDataRow">
             <summary>
             Copies the data contained in the entity to a DataRow object.
             </summary>
             <returns>DataRow.</returns>
             <example>
             The following example creates an entity object, sets some of its fields and converts it to a DataRow object.
             <code>
             public DataRow EmployeeToDataRow()
             {
             	// Create a new EmployeesEntity. Set first and last name.
             	EmployeesEntity emp = new EmployeesEntity();
             	emp.FirstName = "John";
             	emp.LastName = "Smith";
            
             	// Convert the entity to a DataRow object.
             	// Columns that haven't been set contain a DBNull.Value.
             	DataRow row = emp.ToDataRow();
             	return row;
             }
             </code>
             </example>
        </member>
        <member name="M:FistCore.Core.EntityModelBase.ToObjectArray">
             <summary>
             Creates an array of objects containing entity data.
             </summary>
             <returns>Entity values.</returns>
             <example>
             The following example creates an entity object, sets some of its fields and converts it to an array of objects.
             <code>
             public object[] EmployeeToObjects()
             {
             	// Create a new EmployeesEntity. Set first and last name.
             	EmployeesEntity emp = new EmployeesEntity();
             	emp.FirstName = "John";
             	emp.LastName = "Smith";
            
             	// Convert the entity to an array of objects.
             	// Fields that haven't been set are represented with nulls.
             	object[] values = emp.ToObjectArray();
             	return values;
             }
             </code>
             </example>
        </member>
        <member name="M:FistCore.Core.EntityModelBase.FromObjectArray(System.Object[])">
            <summary>
            Initializes entity members with the given values.
            </summary>
            <param name="entityValues">Array with the required values.</param>
        </member>
        <member name="M:FistCore.Core.EntityModelBase.GetPrimaryKeyValue">
            <summary>
            Gets the value(s) that uniquely identify an entity.
            In the order as specified in the accompanying IDbTable class.
            <b>Null</b> if the parent table/view doesn't have a primary key constraint or the required fields are not set.
            </summary>
            <returns>An object array that holds Primary Key values.</returns>
        </member>
        <member name="M:FistCore.Core.EntityModelBase.PrimaryKeyEquals(System.Object[])">
            <summary>
            Checks if the given values are equal to the primary key value of this entity.
            </summary>
            <param name="values">Values.</param>
            <returns>True if primary key values match the given values; false otherwise or if the PK fields
            of this entity aren't set.</returns>
        </member>
        <member name="M:FistCore.Core.EntityModelBase.ValidateAllFields">
             <summary>
             Validates all fields of an entity. Returns all encountered errors.
             </summary>
             <returns>Array of FieldError objects that describe all encountered errors. Empty array if there are no errors.</returns>
             <example>
             The following example creates a new empty EmployeesEntity object and validates it.
             <code>
             public string ValidateEmployee()
             {
             	// Create a new empty EmployeesEntity and validate it.
             	// Employees table constraints specify that fields LastName and FirstName are not nullable.
             	// Validation will return an array that contains two errors (LastName and FirstName may not be null).
             	EmployeesEntity emp = new EmployeesEntity();
             	FieldError[] errors = emp.ValidateAllFields();
            
             	// Iterate through all errors and create a message for the user that describes the errors ecountered.
             	string message = "";
             	foreach (FieldError error in errors)
             	{
             		if (error.ErrorCode == FieldErrorCode.NullError)
             			message += error.Field.PropertyName + " property may not be null. ";
             		else
             			message += error.Field.PropertyName + " contains an invalid value. ";
             	}
            
             	return message;
             }
             </code>
             </example>
        </member>
        <member name="M:FistCore.Core.EntityModelBase.IsValidEntity">
            <summary>
            Returns a value which indicates whether all fields of an entity contain valid values.
            </summary>
            <returns>True if all fields are valid; false otherwise.</returns>
            <remarks>This method is faster than ValidateAllFields() because it stops validation when the first error is found.</remarks>
        </member>
        <member name="M:FistCore.Core.EntityModelBase.ValidateField(FistCore.Core.IDbColumn)">
            <summary>
            Validates specified field.
            </summary>
            <remarks>Checks whether the value contained in the given field obeys basic constraints
            (nullability, min/max value etc). Returns <see cref="T:FistCore.Core.FieldErrorCode"/> that indicates
            the type of error encountered.</remarks>
            <param name="field">Field mapped in this entity. Throws exception if an invalid field is given.</param>
            <returns>Error code that indicates the type of encountered error.</returns>
        </member>
        <member name="M:FistCore.Core.EntityModelBase.IsValidField(FistCore.Core.IDbColumn)">
            <summary>
            Returns a value which indicates whether the specifified is valid.
            Checks whether the value contained in the given field obeys basic constraints (nullability, min/max value etc).
            </summary>
            <param name="field">Field mapped in this entity. Throws exception if an invalid field is given.</param>
            <returns>True if the field is valid; false otherwise.</returns>
        </member>
        <member name="M:FistCore.Core.EntityModelBase.ResetField(FistCore.Core.IDbColumn)">
            <summary>
            Resets the specified field to default value. Same as using SetField method with null argument.
            </summary>
            <param name="field">Field that is to be reset. Throws exception if an invalid field is given.</param>
        </member>
        <member name="M:FistCore.Core.EntityModelBase.SetField(FistCore.Core.IDbColumn,System.Object)">
            <summary>
            Sets the given value into specified field.
            </summary>
            <param name="field">Field. Throws exception if an invalid field is given.</param>
            <param name="value">Value. If null then the field is reset to default value.</param>
        </member>
        <member name="M:FistCore.Core.EntityModelBase.GetField(FistCore.Core.IDbColumn)">
            <summary>
            Gets the value contained in the specified field.
            </summary>
            <param name="field">Field. Throws exception if an invalid field is given.</param>
            <returns>Value.</returns>
        </member>
        <member name="M:FistCore.Core.EntityModelBase.IsNull(FistCore.Core.IDbColumn)">
            <summary>
            Checks whether the specified field contains a <b>null</b> reference or it hasn't been initialized.
            </summary>
            <param name="field">Field. Throws exception if an invalid field is given.</param>
            <returns><b>true</b> if the field contains <b>null</b> not initialized; <b>false</b> otherwise.</returns>
        </member>
        <member name="M:FistCore.Core.EntityModelBase.GetParent(FistCore.Core.DbRelation)">
            <summary>
            Gets the parent entity defined by the given foreign key.
            <seealso cref="P:FistCore.Core.EntityModelBase.RelationshipNavigationEnabled"/>
            </summary>
            <param name="foreignKey">FK. Child table of the given FK must be the current entity's table;
            otherwise an exception is generated.</param>
            <returns>Parent entity. <b>Null</b> if the FK fields haven't been set or if the entity with the given key values doesn't exist.</returns>
            <remarks>If the entity hasn't been initialized yet but the FK values are set and relationship navigation
            is enabled then the method will automatically fetch it from the data source.</remarks>
        </member>
        <member name="M:FistCore.Core.EntityModelBase.SetParent(FistCore.Core.DbRelation,FistCore.Core.IEntity)">
            <summary>
            Sets the given value into the member that represents the parent entity defined by the foreign key.
            </summary>
            <param name="foreignKey">FK. Child table of the given FK must be the current entity's table;
            otherwise an exception is generated.</param>
            <param name="entity">Parent entity. Must be compatibile with the targeted member.</param>
            <remarks>Inherited classes must implement the required logic.</remarks>
        </member>
        <member name="M:FistCore.Core.EntityModelBase.Clone">
            <summary>
            Creates a deep copy clone of current instance.
            </summary>
            <remarks>Copies all class members. Parent entities are not copied by reference, but cloned (deep copy).</remarks>
        </member>
        <member name="M:FistCore.Core.EntityModelBase.FromExistingEntity(FistCore.Core.IEntity)">
            <summary>
            Initializes entity members with all data stored in the given entity.
            </summary>
            <param name="existing">Instance of IEntity. Must be compatibile with current entity; otherwise an exception is generated.</param>
            <remarks>Copies all class members. Parent entities are not copied by reference, but cloned (deep copy).</remarks>
        </member>
        <member name="M:FistCore.Core.EntityModelBase.GetHashCode">
            <summary>
            Hash code override.
            </summary>
            <returns>Hash code.</returns>
        </member>
        <member name="M:FistCore.Core.EntityModelBase.Equals(System.Object)">
            <summary>
            Basic object equality.
            </summary>
            <param name="obj">Object to compare to.</param>
            <returns>True if objects are equal.</returns>
        </member>
        <member name="M:FistCore.Core.EntityModelBase.Equals(FistCore.Core.IEntity)">
            <summary>
            Checks for equality of entities. <b>IEquatable[IEntity]</b> implementation.
            </summary>
            <param name="other">Entity to compare to.</param>
            <returns>True if all fields in objects match.</returns>
        </member>
        <member name="M:FistCore.Core.EntityModelBase.op_Equality(FistCore.Core.EntityModelBase,FistCore.Core.EntityModelBase)">
            <summary>
            Overloaded equality operator for entity model.
            </summary>
            <param name="emp1">Object compared.</param>
            <param name="emp2">Object compared.</param>
            <returns>True if both objects are the same.</returns>
        </member>
        <member name="M:FistCore.Core.EntityModelBase.op_Inequality(FistCore.Core.EntityModelBase,FistCore.Core.EntityModelBase)">
            <summary>
            Overloaded non-equality operator for entity model.
            </summary>
            <param name="emp1">Object compared.</param>
            <param name="emp2">Object compared.</param>
            <returns>True if objects are not the same.</returns>
        </member>
        <member name="P:FistCore.Core.EntityModelBase._Table">
            <summary>
            IDbTable class for the entity's table/view.
            </summary>
        </member>
        <member name="P:FistCore.Core.EntityModelBase.FirstPrimaryKeyValue">
            <summary>
            Gets or sets first primary key value. Used for grid. Overridable.
            </summary>
        </member>
        <member name="P:FistCore.Core.EntityModelBase.Tag">
            <summary>
            Gets or sets Css class associated with this row. Used for grid. Overridable.
            </summary>
        </member>
        <member name="P:FistCore.Core.EntityModelBase.FistCore#Core#IEntity#Table">
            <summary>
            Gets IDbTable object that contains metadata for the entity's table/view.
            </summary>
        </member>
        <member name="P:FistCore.Core.EntityModelBase.EntityState">
            <summary>
            Gets or sets the value which indicates the state of entity in regard to data-source.
            </summary>
        </member>
        <member name="P:FistCore.Core.EntityModelBase.NullCheckEnabled">
            <summary>
            Gets or sets a value indicating whether the real-time null-check for non-nullable fields is performed.
            </summary>
            <remarks><p>When set to <b>true</b> getters mapped to table fields generate an exception if accessed
            before a value has been set. When set to <b>false</b> getters return default values if accessed
            before a value has been set (eg. zero for non-nullable integer fields).</p>
            <p>Default value is <b>true</b>.</p></remarks>
            <example>
            The following example demonstrates null-check behavior when accessing a value type field.
            <code>
            // The following code segment will throw an exception.
            // We are trying to access a non-nullable integer field before it has been set.
            EmployeesEntity emp = new EmployeesEntity();
            emp.NullCheckEnabled = true;
            int id = emp.EmployeeID;
            </code>
            The following example demonstrates a value-type getter behavior when null-check is disabled.
            <code>
            // The following segment will set a zero in the id variable.
            // When the null-check is disabled non-nullable value getters will return a default value.
            EmployeesEntity emp = new EmployeesEntity();
            emp.NullCheckEnabled = false;
            int id = emp.EmployeeID;
            </code>
            </example>
        </member>
        <member name="P:FistCore.Core.EntityModelBase.RelationshipNavigationEnabled">
            <summary>
            Gets or sets the value which indicates whether the entity is allowed to automatically navigate the database via relations (when not explicitly ordered).
            </summary>
            <remarks><p>Has no affect on entity classes that don't implement data-access logic.</p>
            <p>If entity relationship navigation is enabled, the <see cref="M:FistCore.Core.EntityModelBase.GetParent(FistCore.Core.DbRelation)"/> method and
            properties mapped to parent entities (via foreign keys) will automatically try to fetch the parent
            entity if it isn't already fetched.</p>
            <p>If entity relationship navigation is disabled, the <b>GetParent</b> method and
            properties mapped to parent entities (via foreign keys) will not automatically access the data-source
            to fetch the parent entity. Thus, if the parent isn't already initialized, <b>null</b> will be returned.</p>
            <p>Default behavior is <b>not</b> standardized. See documentation for classes that implement the IEntity
            interface.</p></remarks>
        </member>
        <member name="T:FistCore.Core.IEntityDAO">
            <summary>
            Defines methods implemented by all database entity data-access classes.
            </summary>
            <remarks>Entity DAO requires an instance of IEntity (see <see cref="P:FistCore.Core.IEntityDAO.Entity"/>) to work.
            This is the target entity to which results of data retrieval are stored in (eg. CRUD methods). It also serves
            as a source of data for other methods (eg. <see cref="M:FistCore.Core.IEntityDAO.Find"/>).
            <p>Main features:
            <list type="bullet">
            <item>CRUD methods. Create, retrieve, update and delete methods that manipulate a single row in the
            database using primary key logic. All CRUD methods have a suffix <b>One.</b></item>
            <item>Retrieval of parent entities using foreign keys mapped in IDbTable meta classes.</item>
            <item>Retrieval of child entities using one-to-many and many-to-many relations.</item>
            <item>Batch manipulation and retrieval of multiple rows.</item>
            <item>Aggregate functions.</item>
            <item>Sorting of retrieved rows on database or in application.</item>
            <item>Connection and transaction sharing with other data-tier objects.</item>
            <item>Hierarchical queries and updates - methods with a suffix <b>Tree</b>.</item>
            </list></p></remarks>
        </member>
        <member name="M:FistCore.Core.IEntityDAO.SetSorter(FistCore.Core.OrderByClause)">
            <summary>
            Sets the sorter used by the data retrieval methods.
            </summary>
            <param name="sorter">Sort clause. May be <b>null</b>.</param>
        </member>
        <member name="M:FistCore.Core.IEntityDAO.SetSortMode(System.Boolean)">
            <summary>
            Sets the sort mode for data retrieveal methods. This is just a hint. Data retrieval methods may ignore this.
            </summary>
            <param name="sortOnDatabase">Specifies whether sorting will take place on database or in application after data has been fetched.</param>
        </member>
        <member name="M:FistCore.Core.IEntityDAO.DeleteOne">
            <summary>
            Deletes one existing row in the database based on the Primary Key.
            </summary>
            <returns>Number of rows affected.</returns>
        </member>
        <member name="M:FistCore.Core.IEntityDAO.InsertOne">
            <summary>
            Inserts one new row into the database.
            </summary>
            <returns>Autoidentity value for the inserted row. -1 if the table doesn't contain an
            autoidentity field or the DBMS specific code cannot be generated.</returns>
        </member>
        <member name="M:FistCore.Core.IEntityDAO.SelectOne">
            <summary>
            Selects one existing entity from the database based on the Primary Key and populates entity with the retrieved data.
            </summary>
            <remarks>True if select succeeded; false otherwise.</remarks>
        </member>
        <member name="M:FistCore.Core.IEntityDAO.UpdateOne">
            <summary>
            Updates one existing row in the database.
            </summary>
            <returns>Number of rows affected.</returns>
        </member>
        <member name="M:FistCore.Core.IEntityDAO.Save">
            <summary>
            Persists entity. Operation (insert, update, nothing) is chosen based on the current <see cref="T:FistCore.Core.EntityState"/>.
            </summary>
            <returns>True if entity was persisted; false otherwise.</returns>
        </member>
        <member name="M:FistCore.Core.IEntityDAO.Delete(FistCore.Core.IDbColumn,System.Object)">
            <summary>
            Deletes all rows that match the filter criteria.
            </summary>
            <param name="column">Column whose value must be equal to the given value to be deleted.</param>
            <param name="value">Value. May be <b>null</b>.</param>
            <returns>Number of rows affected.</returns>
            <remarks>The method creates a <see cref="T:FistCore.Core.SearchCondition"/> that compares the specified column
            to the given value. Only the rows where the specified column matches the given value are deleted.</remarks>
        </member>
        <member name="M:FistCore.Core.IEntityDAO.Delete(FistCore.Core.SearchCondition)">
            <summary>
            Deletes all rows that match the filter criteria.
            </summary>
            <param name="filter">The search condition which limits the number of rows that are deleted.</param>
            <returns>Number of rows affected.</returns>
        </member>
        <member name="M:FistCore.Core.IEntityDAO.Find">
            <summary>
            Selects all rows that match an automatically created filter based on all properties that have been set.
            Predicates are combined by AND operators. Data is sorted if the sorter is set.
            </summary>
            <returns>Rows that match the automatically created filter.</returns>
        </member>
        <member name="M:FistCore.Core.IEntityDAO.Find(System.Int32)">
            <summary>
            Selects all rows that match an automatically created filter based on all properties that have been set.
            Predicates are combined by AND operators. Data is sorted if the sorter is set.
            </summary>
            <param name="maxNumberOfItemsToReturn">Maximum number of items that will be returned.
            If set to zero or a negative value, all rows matching the criteria will be returned.</param>
            <returns>Rows that match the automatically created filter.</returns>
        </member>
        <member name="M:FistCore.Core.IEntityDAO.FindMatchingAnyCriteria">
            <summary>
            Selects all rows that match an automatically created filter based on all properties that have been set.
            Predicates are combined by OR operators. Data is sorted if the sorter is set.
            </summary>
            <returns>Rows that match the automatically created filter.</returns>
        </member>
        <member name="M:FistCore.Core.IEntityDAO.FindMatchingAnyCriteria(System.Int32)">
            <summary>
            Selects all rows that match an automatically created filter based on all properties that have been set.
            Predicates are combined by OR operators. Data is sorted if the sorter is set.
            </summary>
            <param name="maxNumberOfItemsToReturn">Maximum number of items that will be returned.
            If set to zero or a negative value, all rows matching criteria will be returned.</param>
            <returns>Rows that match the automatically created filter.</returns>
        </member>
        <member name="M:FistCore.Core.IEntityDAO.SelectAll">
            <summary>
            Selects all rows from the table. Data is sorted if the sorter is set.
            </summary>
            <returns>All rows.</returns>
        </member>
        <member name="M:FistCore.Core.IEntityDAO.Select(FistCore.Core.IDbColumn,System.Object)">
            <summary>
            Selects all rows that match the filter criteria. Data is sorted if the sorter is set.
            </summary>
            <param name="column">Column whose value must be equal to the given value to be selected.</param>
            <param name="value">Value. May be <b>null</b>.</param>
            <returns>Data.</returns>
            <remarks>The method creates a <see cref="T:FistCore.Core.SearchCondition"/> that compares the specified column
            to the given value. Only the rows where the specified column matches the given value are selected.</remarks>
        </member>
        <member name="M:FistCore.Core.IEntityDAO.Select(FistCore.Core.RelationBucket,FistCore.Core.SearchCondition)">
            <summary>
            Selects all rows that match the filter criteria. Data is sorted if the sorter is set.
            </summary>
            <param name="relations">Relations. May be <b>null</b> if the filter doesn't use other tables.</param>
            <param name="filter">The search condition which restricts the rows returned.</param>
            <returns>Data that matches the filter.</returns>
        </member>
        <member name="M:FistCore.Core.IEntityDAO.Select(FistCore.Core.RelationBucket,FistCore.Core.SearchCondition,System.Int32)">
            <summary>
            Selects all rows that match the filter criteria. Data is sorted if the sorter is set.
            </summary>
            <param name="relations">Relations. May be <b>null</b> if the filter doesn't use other tables.</param>
            <param name="filter">The search condition which restricts the rows returned.</param>
            <param name="maxNumberOfItemsToReturn">Maximum number of items that will be returned.
            If set to zero or a negative value, all rows matching criteria will be returned.</param>
            <returns>Data that matches the filter.</returns>
        </member>
        <member name="M:FistCore.Core.IEntityDAO.Update(FistCore.Core.IDbColumn,System.Object,System.Object)">
            <summary>
            Updates all rows that match the filter criteria.
            </summary>
            <param name="column">Column whose value must be equal to the given old value to be updated.</param>
            <param name="oldValue">Old value of the column. May be <b>null</b>.</param>
            <param name="newValue">New value of the column. May be <b>null</b>.</param>
            <returns>Number of rows affected.</returns>
            <remarks>Updates the values in the specified column. Old value is changed to new value.
            Often used to update a foreign key column.</remarks>
        </member>
        <member name="M:FistCore.Core.IEntityDAO.Update(FistCore.Core.SearchCondition)">
            <summary>
            Updates all rows that match the filter criteria.
            </summary>
            <param name="filter">The search condition which limits the number of rows that are updated.</param>
            <returns>Number of rows affected.</returns>
            <remarks>Updates all rows that match the given filter with the values contained in this entity.
            The members that haven't been set are excluded from the SET list which means that NULLs
            cannot be set with this method.</remarks>
        </member>
        <member name="M:FistCore.Core.IEntityDAO.Update(FistCore.Core.UpdateList,FistCore.Core.SearchCondition)">
            <summary>
            Updates all rows that match the filter criteria.
            </summary>
            <param name="setExpressions">The list of columns to be updated and expressions that compute/contain the new values.</param>
            <param name="filter">The search condition which limits the number of rows that are updated.</param>
            <returns>Number of rows affected.</returns>
            <remarks>Updates all rows in this table that match the specified filter with values/expressions in the given SET list.</remarks>
        </member>
        <member name="M:FistCore.Core.IEntityDAO.Count(FistCore.Core.IDbColumn,System.Object)">
            <summary>
            Counts all rows in the entity's parent table that match the filter criteria.
            </summary>
            <param name="column">Column whose value must be equal to the given value to be included in the count.</param>
            <param name="value">Value. May be <b>null</b>.</param>
            <returns>Number of rows that match the filter.</returns>
            <remarks>The method creates a <see cref="T:FistCore.Core.SearchCondition"/> that compares the specified column to
            the given value. Only the rows where the specified column matches the given value are counted.</remarks>
        </member>
        <member name="M:FistCore.Core.IEntityDAO.Count(FistCore.Core.RelationBucket,FistCore.Core.SearchCondition)">
            <summary>
            Counts all rows in the entity's parent table that match the filter criteria.
            </summary>
            <param name="relations">Relations. May be <b>null</b> if the filter doesn't use other tables.</param>
            <param name="filter">The search condition which restricts the rows counted.</param>
            <returns>Number of rows that match the filter.</returns>
        </member>
        <member name="M:FistCore.Core.IEntityDAO.Max(FistCore.Core.IDbColumn)">
            <summary>
            Retrieves the maximum value in the given column.
            </summary>
            <param name="column">Column. Must belong to the current entity's table.</param>
            <returns>Maximum value in the given column. <see cref="F:System.DBNull.Value"/> if table doesn't contain any rows or
            if all rows have a <b>null</b> value in the specified field.</returns>
        </member>
        <member name="M:FistCore.Core.IEntityDAO.Max(FistCore.Core.IDbColumn,FistCore.Core.RelationBucket,FistCore.Core.SearchCondition)">
            <summary>
            Retrieves the maximum value in the given column.
            </summary>
            <param name="column">Column. Must belong to the current entity's table.</param>
            <param name="relations">Relations. May be <b>null</b> if the filter doesn't use other tables.</param>
            <param name="filter">The search condition which restricts the rows included.</param>
            <returns>Maximum value in the given column. <see cref="F:System.DBNull.Value"/> if table doesn't contain any rows or
            if all rows that match the criteria have a <b>null</b> value in the specified field.</returns>
        </member>
        <member name="M:FistCore.Core.IEntityDAO.Min(FistCore.Core.IDbColumn)">
            <summary>
            Retrieves the minimum value in the given column.
            </summary>
            <param name="column">Column. Must belong to the current entity's table.</param>
            <returns>Minimum value in the given column. <see cref="F:System.DBNull.Value"/> if table doesn't contain any rows or
            if all rows have a <b>null</b> value in the specified field.</returns>
        </member>
        <member name="M:FistCore.Core.IEntityDAO.Min(FistCore.Core.IDbColumn,FistCore.Core.RelationBucket,FistCore.Core.SearchCondition)">
            <summary>
            Retrieves the minimum value in the given column.
            </summary>
            <param name="column">Column. Must belong to the current entity's table.</param>
            <param name="relations">Relations. May be <b>null</b> if the filter doesn't use other tables.</param>
            <param name="filter">The search condition which restricts the rows included.</param>
            <returns>Minimum value in the given column. <see cref="F:System.DBNull.Value"/> if table doesn't contain any rows or
            if all rows that match the criteria have a <b>null</b> value in the specified field.</returns>
        </member>
        <member name="M:FistCore.Core.IEntityDAO.Sum(FistCore.Core.IDbColumn)">
            <summary>
            Retrieves the sum of the values in the given column.
            </summary>
            <param name="column">Column. Must be a numeric column that belongs to the current entity's table.</param>
            <returns>The sum of the values in the given column. <see cref="F:System.DBNull.Value"/> if table doesn't contain any rows or
            if all rows have a <b>null</b> value in the specified field.</returns>
            <remarks>SUM can be used with numeric columns only. Null values are ignored.</remarks>
        </member>
        <member name="M:FistCore.Core.IEntityDAO.Sum(FistCore.Core.IDbColumn,FistCore.Core.RelationBucket,FistCore.Core.SearchCondition)">
            <summary>
            Retrieves the sum of the values in the given column.
            </summary>
            <param name="column">Column. Must be a numeric column that belongs to the current entity's table.</param>
            <param name="relations">Relations. May be <b>null</b> if the filter doesn't use other tables.</param>
            <param name="filter">The search condition which restricts the rows included.</param>
            <returns>The sum of the values in the given column. <see cref="F:System.DBNull.Value"/> if table doesn't contain any rows or
            if all rows that match the criteria have a <b>null</b> value in the specified field.</returns>
            <remarks>SUM can be used with numeric columns only. Null values are ignored.</remarks>
        </member>
        <member name="M:FistCore.Core.IEntityDAO.Avg(FistCore.Core.IDbColumn)">
            <summary>
            Retrieves the average of the values in the given column.
            </summary>
            <param name="column">Column. Must be a numeric column that belongs to the current entity's table.</param>
            <returns>The average of the values in the given column. <see cref="F:System.DBNull.Value"/> if table doesn't contain any rows or
            if all rows that match the criteria have a <b>null</b> value in the specified field.</returns>
            <remarks>AVG can be used with numeric columns only. Null values are ignored.</remarks>
        </member>
        <member name="M:FistCore.Core.IEntityDAO.Avg(FistCore.Core.IDbColumn,FistCore.Core.RelationBucket,FistCore.Core.SearchCondition)">
            <summary>
            Retrieves the average of the values in the given column.
            </summary>
            <param name="column">Column. Must be a numeric column that belongs to the current entity's table.</param>
            <param name="relations">Relations. May be <b>null</b> if the filter doesn't use other tables.</param>
            <param name="filter">The search condition which restricts the rows included.</param>
            <returns>The average of the values in the given column. <see cref="F:System.DBNull.Value"/> if table doesn't contain any rows or
            if all rows that match the criteria have a <b>null</b> value in the specified field.</returns>
            <remarks>AVG can be used with numeric columns only. Null values are ignored.</remarks>
        </member>
        <member name="M:FistCore.Core.IEntityDAO.SelectOne(System.Boolean)">
            <summary>
            Selects one existing entity from the database based on the Primary Key and populates entity with the retrieved data.
            </summary>
            <param name="fetchParentEntities">Indicates whether all parent entities defined by the foreign keys
            in the acompanying IDbTable class are to be fetched.</param>
            <returns>True if select succeeded; false otherwise.</returns>
        </member>
        <member name="M:FistCore.Core.IEntityDAO.SelectOne(FistCore.Core.DbRelation[])">
            <summary>
            Selects one existing entity from the database based on the Primary Key and populates entity with the retrieved data.
            </summary>
            <param name="parentsToFetch">Relations (foreign keys) to parents which are to be fetched. Child table
            of the given FK must be the current entity's table;  otherwise an exception is generated.</param>
            <returns>True if select succeeded; false otherwise.</returns>
        </member>
        <member name="M:FistCore.Core.IEntityDAO.FetchParent(FistCore.Core.DbRelation)">
            <summary>
            Fetches a parent entity defined by the foreign key from the data source and stores it into current entity.
            </summary>
            <param name="foreignKey">FK. Child table of the given FK must be the current entity's table;
            otherwise an exception is generated.</param>
            <returns>Parent entity. Parent entity. <b>Null</b> if the FK fields haven't been set or if the parent entity with the given key values doesn't exist.</returns>
        </member>
        <member name="M:FistCore.Core.IEntityDAO.FetchAllParents">
            <summary>
            Fetches all parent entities defined by entity's foreign keys from the data source and stores them into current entity.
            </summary>
            <returns>Parent entities. Some may be <b>null</b> if the required FK fields haven't been set or if the entities
            with the given key values don't exist.</returns>
        </member>
        <member name="M:FistCore.Core.IEntityDAO.FetchParents(FistCore.Core.DbRelation[])">
            <summary>
            Fetches parent entities defined by the given relations from the data source and stores them into current entity.
            </summary>
            <param name="parentsToFetch">Relations (foreign keys) to parents which are to be fetched. Child table
            of the given FK must be the current entity's table; otherwise an exception is generated.</param>
            <returns>Parent entities. Some may be <b>null</b> if the required FK fields haven't been set or if the entities
            with the given key values don't exist.</returns>
        </member>
        <member name="M:FistCore.Core.IEntityDAO.FetchChildren(FistCore.Core.DbRelation)">
            <summary>
            Fetches child entities that reference the current entity.
            </summary>
            <param name="relation">Relation between the current entity's table and another (child) table.</param>
            <returns>Rows from the child table whose foreign key matches this entity's primary key.</returns>
        </member>
        <member name="M:FistCore.Core.IEntityDAO.FetchChildren(FistCore.Core.DbRelation,FistCore.Core.IDbColumn,System.Object)">
            <summary>
            Fetches child entities that reference the current entity.
            </summary>
            <param name="relation">Relation between the current entity's table and another (child) table.</param>
            <param name="childField">Child field whose value must be equal the given value to be selected.</param>
            <param name="childFieldValue">Value of the given child field. May be <b>null</b>.</param>
            <returns>Rows from the child table that reference the current entity and match the given criteria.</returns>
        </member>
        <member name="M:FistCore.Core.IEntityDAO.FetchChildren(FistCore.Core.ManyToManyRelation)">
            <summary>
            Fetches child entities that reference the current entity.
            </summary>
            <param name="mnRelation">Many-to-many relation. Current entity's table acts as a parent table,
            the other primary table in the relation acts as a child. Resursive M:N relations are not allowed.</param>
            <returns>Rows form the child table that reference the current entity through junction table of the M:N relation.</returns>
            <remarks>When a single database table is used as both the first and the second primary table of an M:N
            relation then it must be explicitly specified which one is used as a parent and which one as a child table.
            This can be accomplished by using one of the overloaded FetchChildren methods that accept a <see cref="T:FistCore.Core.PrimaryTableIndex"/> parameter.</remarks>
        </member>
        <member name="M:FistCore.Core.IEntityDAO.FetchChildren(FistCore.Core.ManyToManyRelation,FistCore.Core.PrimaryTableIndex)">
            <summary>
            Fetches child entities that reference the current entity.
            </summary>
            <param name="mnRelation">Many-to-many relation. Current entity's table acts as a parent table,
            the other primary table in the relation acts as a child. May be recursive.</param>
            <param name="parent">Indicates which of the two primary tables in the M:N relation acts as a parent.</param>
            <returns>Rows form the child table that reference the current entity through junction table of the M:N relation.</returns>
            <remarks>When a single database table is used as both the first and the second primary table of an M:N
            relation then it must be explicitly specified which one is used as a parent and which one as a child table.</remarks>
        </member>
        <member name="M:FistCore.Core.IEntityDAO.FetchChildren(FistCore.Core.ManyToManyRelation,FistCore.Core.IDbColumn,System.Object)">
            <summary>
            Fetches child entities that reference the current entity.
            </summary>
            <param name="mnRelation">Many-to-many relation. Current entity's table acts as a parent table,
            the other primary table in the relation acts as a child. Resursive M:N relations are not allowed.</param>
            <param name="childField">Child field whose value must be equal the given value to be selected.</param>
            <param name="childFieldValue">Value of the given child field. May be <b>null</b>.</param>
            <returns>Rows form the child table that reference the current entity through
            junction table of the M:N relation and match the given criteria.</returns>
            <remarks><p>Only the child rows where the specified column matches the given value are selected.
            Very often database is designed so that the child entities are not deleted from the database but are
            marked as deleted instead. This method may be used when only child rows with a specific status value
            (eg. STATUS = 1) are to be fetched. In addition, a SearchCondition may be created which filters out rows from the junction table.
            See <see cref="P:FistCore.Core.ManyToManyRelation.JunctionRowsFilter"/> for more information.</p>
            <p>When a single database table is used as both the first and the second primary table of an M:N
            relation then it must be explicitly specified which one is used as a parent and which one as a child table.
            This can be accomplished by using one of the overloaded FetchChildren methods that accept a <see cref="T:FistCore.Core.PrimaryTableIndex"/> parameter.</p></remarks>
        </member>
        <member name="M:FistCore.Core.IEntityDAO.FetchChildren(FistCore.Core.ManyToManyRelation,FistCore.Core.PrimaryTableIndex,FistCore.Core.IDbColumn,System.Object)">
            <summary>
            Fetches child entities that reference the current entity.
            </summary>
            <param name="mnRelation">Many-to-many relation. Current entity's table acts as a parent table,
            the other primary table in the relation acts as a child. May be recursive.</param>
            <param name="parent">Indicates which of the two primary tables in the M:N relation acts as a parent.</param>
            <param name="childField">Child field whose value must be equal the given value to be selected.</param>
            <param name="childFieldValue">Value of the given child field. May be <b>null</b>.</param>
            <returns>Rows form the child table that reference the current entity through junction table of the M:N relation.</returns>
            <remarks><p>Only the child rows where the specified column matches the given value are selected.
            Very often database is designed so that the child entities are not deleted from the database but are
            marked as deleted instead. This method may be used when only child rows with a specific status value
            (eg. STATUS = 1) are to be fetched. In addition, a SearchCondition may be created which filters out rows from the junction table.
            See <see cref="P:FistCore.Core.ManyToManyRelation.JunctionRowsFilter"/> for more information.</p>
            <p>When a single database table is used as both the first and the second primary table of an M:N
            relation then it must be explicitly specified which one is used as a parent and which one as a child table.</p></remarks>
        </member>
        <member name="M:FistCore.Core.IEntityDAO.FetchChildren(FistCore.Core.DbRelation[])">
            <summary>
            Fetches child entities from multiple tables that reference the current entity.
            </summary>
            <param name="childrenToFetch">Relations between the current entity's table and child tables.</param>
            <returns>One DataTable per relation with child records whose foreign key values match
            the current entity's primary key.</returns>
        </member>
        <member name="M:FistCore.Core.IEntityDAO.SelectOne(FistCore.Core.DbRelation[],FistCore.Core.DbRelation[])">
            <summary>
            Selects one existing entity from the database based on the Primary Key and populates entity with the retrieved data.
            </summary>
            <param name="parents">Relations (foreign keys) to parents which are to be fetched and stored in
            the current entity. Child table of the given FK must be the current entity's table; otherwise
            an exception is generated. <b>Nullable.</b>.</param>
            <param name="children">Relations between the current entity's table and child tables. <b>Nullable.</b>.</param>
            <returns>One <see cref="T:FistCore.Core.EntityCollection`2"/> per child relation. Empty collection if child
            relations haven't been specified. <b>Null</b> if select was not succesfull.</returns>
            <remarks>The current entity object is set as a parent for all fetched children.</remarks>
        </member>
        <member name="M:FistCore.Core.IEntityDAO.FetchRelatedEntities(FistCore.Core.DbRelation[],FistCore.Core.DbRelation[])">
            <summary>
            Fetches specified parent and child entities. Parent entities are stored in the current entity.
            </summary>
            <param name="parents">Relations (foreign keys) to parents which are to be fetched. Child table of
            the given FK must be the current entity's table; otherwise an exception is generated. <b>Nullable.</b>.</param>
            <param name="children">Relations between the current entity's table and child tables. <b>Nullable.</b>.</param>
            <returns>One <see cref="T:FistCore.Core.EntityCollection`2"/> per child relation. Empty array if child
            relations haven't been specified.</returns>
            <remarks>The current entity object is set as a parent for all fetched children.</remarks>
        </member>
        <member name="M:FistCore.Core.IEntityDAO.SaveCollection(FistCore.Core.IEntityCollection)">
            <summary>
            Persists entities in the collection. Operation (insert, update, delete, nothing) is chosen based on the current <see cref="T:FistCore.Core.EntityState"/>.
            </summary>
            <param name="entitiesToSave">Entities which are to persisted.</param>
        </member>
        <member name="M:FistCore.Core.IEntityDAO.FetchParentsForCollection(FistCore.Core.IEntityCollection,FistCore.Core.DbRelation)">
            <summary>
            Fetched parent entities defined by the given relation from the data source and stores them into provided child entities.
            </summary>
            <param name="childEntities">Children whose FK properties define which parents are to be fetched.</param>
            <param name="parentsToFetch">FK. Relation to parent table from which parent records are to be fetched.</param>
            <returns>Parents retrieved from the data source.</returns>
            <remarks>Child entities with equal FK values will share the same parent object instance (same reference).</remarks>
        </member>
        <member name="M:FistCore.Core.IEntityDAO.FetchChildrenForCollection(FistCore.Core.IEntityCollection,FistCore.Core.DbRelation)">
            <summary>
            Fetches children which belong to provided parent entities as defined by the given relation.
            </summary>
            <param name="parentEntities">Parent entities referenced by children which are to be fetched.</param>
            <param name="relation">FK. Relation between parent and child tables.</param>
            <returns>Array of child collections retrieved from the data source. Child collections are in the
            same order as provided parent objects.</returns>
            <remarks>Child entities with equal FK values will share the same parent object instance (same reference).</remarks>
        </member>
        <member name="M:FistCore.Core.IEntityDAO.SaveCollection(FistCore.Core.IEntityCollection,System.Boolean)">
            <summary>
            Persists entities in the collection. Operation (insert, update, delete, nothing) is chosen based on the current <see cref="T:FistCore.Core.EntityState"/>.
            </summary>
            <param name="entitiesToSave">Entities which are to persisted.</param>
            <param name="fetchAutoIdentityValues">Indicates whether auto-identity values assigned to rows by DB are fetched for new/inserted rows.
            Setting this parameter to <b>false</b> may siginificantly improve performance.</param>
            <remarks><para>Preffer using this method instead of a sequence of <see cref="M:FistCore.Core.IEntityDAO.Save"/> method invocations.
            Future optimizers will have a better chance to speed up data access when they know in ahead what data is to be saved.</para>
            <para>If the <b>fetchAutoIdentityValues</b> parameter is set to <b>false</b> then this method overload will not try to retrieve
            IDs of the inserted records which may yield significantly better performance. If bulk saving for target DBMS is not implemented then
            the logic implemented in <see cref="M:FistCore.Core.IEntityDAO.SaveCollection(FistCore.Core.IEntityCollection)"/> method overload should be used.</para></remarks>
        </member>
        <member name="M:FistCore.Core.IEntityDAO.SelectTree(FistCore.Core.DbRelation,FistCore.Core.SearchCondition)">
            <summary>
            Selects all rows in the hierarchy starting with the current entity.
            </summary>
            <param name="recursiveRelation">Recursive relation which defines a hierarchy.</param>
            <param name="leafFilter">The search condition which restricts the rows returned. Often a criteria which filters out deactivated records.</param>
            <returns>All rows in the hierarchy under the current entity, including the current entity.</returns>
        </member>
        <member name="M:FistCore.Core.IEntityDAO.SelectTree(FistCore.Core.DbRelation,FistCore.Core.SearchCondition,System.Int32)">
            <summary>
            Selects rows in the hierarchy starting with the current entity.
            </summary>
            <param name="recursiveRelation">Recursive relation which defines a hierarchy.</param>
            <param name="leafFilter">The search condition which restricts the rows returned. Often a criteria which filters out deactivated records.</param>
            <param name="maxLevels">Maximum number of tree levels to fetch. One specifies that only current entity is fetched,
            two specifies that current entity and entities directly beneath it are fetched etc.</param>
            <returns>Rows in the hierarchy under the current entity, including the current entity.</returns>
        </member>
        <member name="M:FistCore.Core.IEntityDAO.SelectTree(FistCore.Core.DbRelation,FistCore.Core.SearchCondition,System.Int32,System.Int32)">
            <summary>
            Selects rows in the hierarchy under the current entity.
            </summary>
            <param name="recursiveRelation">Recursive relation which defines a hierarchy.</param>
            <param name="leafFilter">The search condition which restricts the rows returned. Often a criteria which filters out deactivated records.</param>
            <param name="beginAtLevel">Zero-based index of the first level to fetch. Zero indicates that fetching starts at current entity,
            one indicates that fetching starts at the level directly beneath it etc.</param>
            <param name="endAtLevel">Zero-based index of the last level to fetch. Zero indicates that fetching ends at current entity,
            one indicates that fetching ends at the level directly beneath it etc. <see cref="F:System.Int32.MaxValue"/> indicates that operation ends at leaf nodes.</param>
            <returns>Rows in the hierarchy under the current entity.</returns>
        </member>
        <member name="M:FistCore.Core.IEntityDAO.DetermineTreeDepth(FistCore.Core.DbRelation)">
            <summary>
            Counts the number of levels in the hieararchy starting with the current entity.
            </summary>
            <param name="recursiveRelation">Recursive relation which defines a hierarchy.</param>
            <returns>Sub-tree depth.</returns>
        </member>
        <member name="M:FistCore.Core.IEntityDAO.UpdateTree(FistCore.Core.DbRelation,FistCore.Core.UpdateList,FistCore.Core.SearchCondition)">
            <summary>
            Updates all rows in the hierarchy starting with the current entity.
            </summary>
            <param name="recursiveRelation">Recursive relation which defines a hierarchy.</param>
            <param name="setExpressions">The list of columns to be updated and expressions that compute/contain the new values.</param>
            <param name="leafFilter">The search condition which limits the number of rows that are updated. Often a criteria which filters out deactivated records.</param>
            <returns>Number of rows affected.</returns>
        </member>
        <member name="M:FistCore.Core.IEntityDAO.UpdateTree(FistCore.Core.DbRelation,FistCore.Core.UpdateList,FistCore.Core.SearchCondition,System.Int32)">
            <summary>
            Updates rows in the hierarchy starting with the current entity.
            </summary>
            <param name="recursiveRelation">Recursive relation which defines a hierarchy.</param>
            <param name="setExpressions">The list of columns to be updated and expressions that compute/contain the new values.</param>
            <param name="leafFilter">The search condition which limits the number of rows that are updated. Often a criteria which filters out deactivated records.</param>
            <param name="maxLevels">Maximum number of tree levels to affect. One specifies that only current entity is updated,
            two specifies that current entity and entities directly beneath it are updated etc.</param>
            <returns>Number of rows affected.</returns>
        </member>
        <member name="M:FistCore.Core.IEntityDAO.UpdateTree(FistCore.Core.DbRelation,FistCore.Core.UpdateList,FistCore.Core.SearchCondition,System.Int32,System.Int32)">
            <summary>
            Updates rows in the hierarchy under the current entity.
            </summary>
            <param name="recursiveRelation">Recursive relation which defines a hierarchy.</param>
            <param name="setExpressions">The list of columns to be updated and expressions that compute/contain the new values.</param>
            <param name="leafFilter">The search condition which limits the number of rows that are updated. Often a criteria which filters out deactivated records.</param>
            <param name="beginAtLevel">Zero-based index of the first level to update. Zero indicates that updating starts at current entity,
            one indicates that updating starts at the level directly beneath it etc.</param>
            <param name="endAtLevel">Zero-based index of the last level to update. Zero indicates that updating ends at current entity,
            one indicates that updating ends at the level directly beneath it etc. <see cref="F:System.Int32.MaxValue"/> indicates that operation ends at leaf nodes.</param>
            <returns>Number of rows affected.</returns>
        </member>
        <member name="M:FistCore.Core.IEntityDAO.CountTree(FistCore.Core.DbRelation,FistCore.Core.SearchCondition)">
            <summary>
            Counts all rows in the hierarchy starting with the current entity.
            </summary>
            <param name="recursiveRelation">Recursive relation which defines a hierarchy.</param>
            <param name="leafFilter">The search condition which restricts the rows counted. Often a criteria which filters out deactivated records.</param>
            <returns>Total row count in the hierarchy.</returns>
        </member>
        <member name="M:FistCore.Core.IEntityDAO.CountTree(FistCore.Core.DbRelation,FistCore.Core.SearchCondition,System.Int32)">
            <summary>
            Counts rows in the hierarchy starting with the current entity.
            </summary>
            <param name="recursiveRelation">Recursive relation which defines a hierarchy.</param>
            <param name="leafFilter">The search condition which restricts the rows counted. Often a criteria which filters out deactivated records.</param>
            <param name="maxLevels">Maximum number of tree levels to process. One specifies that only current entity is counted,
            two specifies that current entity and entities directly beneath it are counted etc.</param>
            <returns>Total row count in the hierarchy.</returns>
        </member>
        <member name="M:FistCore.Core.IEntityDAO.CountTree(FistCore.Core.DbRelation,FistCore.Core.SearchCondition,System.Int32,System.Int32)">
            <summary>
            Counts rows in the hierarchy under the current entity.
            </summary>
            <param name="recursiveRelation">Recursive relation which defines a hierarchy.</param>
            <param name="leafFilter">The search condition which restricts the rows counted. Often a criteria which filters out deactivated records.</param>
            <param name="beginAtLevel">Zero-based index of the first level to process. Zero indicates that counting starts at current entity,
            one indicates that counting starts at the level directly beneath it etc.</param>
            <param name="endAtLevel">Zero-based index of the last level to process. Zero indicates that counting ends at current entity,
            one indicates that counting ends at the level directly beneath it etc. <see cref="F:System.Int32.MaxValue"/> indicates that operation ends at leaf nodes.</param>
            <returns>Total row count in the hierarchy.</returns>
        </member>
        <member name="M:FistCore.Core.IEntityDAO.SumTree(FistCore.Core.IDbColumn,FistCore.Core.DbRelation,FistCore.Core.SearchCondition)">
            <summary>
            Retrieves the sum of the column values in the hierarchy starting with the current entity.
            </summary>
            <param name="column">Column. Must be a numeric column that belongs to the current entity's table.</param>
            <param name="recursiveRelation">Recursive relation which defines a hierarchy.</param>
            <param name="leafFilter">The search condition which restricts the rows processed. Often a criteria which filters out deactivated records.</param>
            <returns>Total sum of column values in the hierarchy or <see cref="F:System.DBNull.Value"/>.</returns>
        </member>
        <member name="M:FistCore.Core.IEntityDAO.SumTree(FistCore.Core.IDbColumn,FistCore.Core.DbRelation,FistCore.Core.SearchCondition,System.Int32)">
            <summary>
            Retrieves the sum of the column values in the hierarchy starting with the current entity.
            </summary>
            <param name="column">Column. Must be a numeric column that belongs to the current entity's table.</param>
            <param name="recursiveRelation">Recursive relation which defines a hierarchy.</param>
            <param name="leafFilter">The search condition which restricts the rows processed. Often a criteria which filters out deactivated records.</param>
            <param name="maxLevels">Maximum number of tree levels to process. One specifies that only current entity is summed,
            two specifies that current entity and entities directly beneath it are summed etc.</param>
            <returns>Total sum of column values in the hierarchy or <see cref="F:System.DBNull.Value"/>.</returns>
        </member>
        <member name="M:FistCore.Core.IEntityDAO.SumTree(FistCore.Core.IDbColumn,FistCore.Core.DbRelation,FistCore.Core.SearchCondition,System.Int32,System.Int32)">
            <summary>
            Retrieves the sum of the column values in the hierarchy under the current entity.
            </summary>
            <param name="column">Column. Must be a numeric column that belongs to the current entity's table.</param>
            <param name="recursiveRelation">Recursive relation which defines a hierarchy.</param>
            <param name="leafFilter">The search condition which restricts the rows processed. Often a criteria which filters out deactivated records.</param>
            <param name="beginAtLevel">Zero-based index of the first level to process. Zero indicates that summing starts at current entity,
            one indicates that summing starts at the level directly beneath it etc.</param>
            <param name="endAtLevel">Zero-based index of the last level to process. Zero indicates that summing ends at current entity,
            one indicates that summing ends at the level directly beneath it etc. <see cref="F:System.Int32.MaxValue"/> indicates that operation ends at leaf nodes.</param>
            <returns>Total sum of column values in the hierarchy or <see cref="F:System.DBNull.Value"/>.</returns>
        </member>
        <member name="M:FistCore.Core.IEntityDAO.MinInTree(FistCore.Core.IDbColumn,FistCore.Core.DbRelation,FistCore.Core.SearchCondition)">
            <summary>
            Retrieves the minimum column value in the hierarchy starting with the current entity.
            </summary>
            <param name="column">Column to compare. Must belong to the current entity's table.</param>
            <param name="recursiveRelation">Recursive relation which defines a hierarchy.</param>
            <param name="leafFilter">The search condition which restricts the rows processed. Often a criteria which filters out deactivated records.</param>
            <returns>Minimum value or <see cref="F:System.DBNull.Value"/>.</returns>
        </member>
        <member name="M:FistCore.Core.IEntityDAO.MinInTree(FistCore.Core.IDbColumn,FistCore.Core.DbRelation,FistCore.Core.SearchCondition,System.Int32)">
            <summary>
            Retrieves the minimum column value in the hierarchy starting with the current entity.
            </summary>
            <param name="column">Column to compare. Must belong to the current entity's table.</param>
            <param name="recursiveRelation">Recursive relation which defines a hierarchy.</param>
            <param name="leafFilter">The search condition which restricts the rows processed. Often a criteria which filters out deactivated records.</param>
            <param name="maxLevels">Maximum number of tree levels to process. One specifies that only current entity is compared,
            two specifies that current entity and entities directly beneath it are compared etc.</param>
            <returns>Minimum value or <see cref="F:System.DBNull.Value"/>.</returns>
        </member>
        <member name="M:FistCore.Core.IEntityDAO.MinInTree(FistCore.Core.IDbColumn,FistCore.Core.DbRelation,FistCore.Core.SearchCondition,System.Int32,System.Int32)">
            <summary>
            Retrieves the minimum column value in the hierarchy under the current entity.
            </summary>
            <param name="column">Column to compare. Must belong to the current entity's table.</param>
            <param name="recursiveRelation">Recursive relation which defines a hierarchy.</param>
            <param name="leafFilter">The search condition which restricts the rows processed. Often a criteria which filters out deactivated records.</param>
            <param name="beginAtLevel">Zero-based index of the first level to process. Zero indicates that comparison starts at current entity,
            one indicates that comparison starts at the level directly beneath it etc.</param>
            <param name="endAtLevel">Zero-based index of the last level to process. Zero indicates that comparison ends at current entity,
            one indicates that comparison ends at the level directly beneath it etc. <see cref="F:System.Int32.MaxValue"/> indicates that operation ends at leaf nodes.</param>
            <returns>Minimum value or <see cref="F:System.DBNull.Value"/>.</returns>
        </member>
        <member name="M:FistCore.Core.IEntityDAO.MaxInTree(FistCore.Core.IDbColumn,FistCore.Core.DbRelation,FistCore.Core.SearchCondition)">
            <summary>
            Retrieves the maximum column value in the hierarchy starting with the current entity.
            </summary>
            <param name="column">Column to compare. Must belong to the current entity's table.</param>
            <param name="recursiveRelation">Recursive relation which defines a hierarchy.</param>
            <param name="leafFilter">The search condition which restricts the rows processed. Often a criteria which filters out deactivated records.</param>
            <returns>Maximum value or <see cref="F:System.DBNull.Value"/>.</returns>
        </member>
        <member name="M:FistCore.Core.IEntityDAO.MaxInTree(FistCore.Core.IDbColumn,FistCore.Core.DbRelation,FistCore.Core.SearchCondition,System.Int32)">
            <summary>
            Retrieves the maximum column value in the hierarchy starting with the current entity.
            </summary>
            <param name="column">Column to compare. Must belong to the current entity's table.</param>
            <param name="recursiveRelation">Recursive relation which defines a hierarchy.</param>
            <param name="leafFilter">The search condition which restricts the rows processed. Often a criteria which filters out deactivated records.</param>
            <param name="maxLevels">Maximum number of tree levels to process. One specifies that only current entity is compared,
            two specifies that current entity and entities directly beneath it are compared etc.</param>
            <returns>Maximum value or <see cref="F:System.DBNull.Value"/>.</returns>
        </member>
        <member name="M:FistCore.Core.IEntityDAO.MaxInTree(FistCore.Core.IDbColumn,FistCore.Core.DbRelation,FistCore.Core.SearchCondition,System.Int32,System.Int32)">
            <summary>
            Retrieves the maximum column value in the hierarchy under the current entity.
            </summary>
            <param name="column">Column to compare. Must belong to the current entity's table.</param>
            <param name="recursiveRelation">Recursive relation which defines a hierarchy.</param>
            <param name="leafFilter">The search condition which restricts the rows processed. Often a criteria which filters out deactivated records.</param>
            <param name="beginAtLevel">Zero-based index of the first level to process. Zero indicates that comparison starts at current entity,
            one indicates that comparison starts at the level directly beneath it etc.</param>
            <param name="endAtLevel">Zero-based index of the last level to process. Zero indicates that comparison ends at current entity,
            one indicates that comparison ends at the level directly beneath it etc. <see cref="F:System.Int32.MaxValue"/> indicates that operation ends at leaf nodes.</param>
            <returns>Maximum value or <see cref="F:System.DBNull.Value"/>.</returns>
        </member>
        <member name="M:FistCore.Core.IEntityDAO.SelectAll(System.Collections.IList)">
            <summary>
            Selects all rows from the table. Data is sorted if the sorter is set.
            </summary>
            <param name="destination">A collection to fill with entities built from data.</param>
        </member>
        <member name="M:FistCore.Core.IEntityDAO.Select(System.Collections.IList,FistCore.Core.IDbColumn,System.Object)">
            <summary>
            Selects all rows that match the filter criteria. Data is sorted if the sorter is set.
            </summary>
            <param name="destination">A collection to fill with entities built from data.</param>
            <param name="column">Column whose value must be equal to the given value to be selected.</param>
            <param name="value">Value. May be <b>null</b>.</param>
        </member>
        <member name="M:FistCore.Core.IEntityDAO.Select(System.Collections.IList,FistCore.Core.RelationBucket,FistCore.Core.SearchCondition)">
            <summary>
            Selects all rows that match the filter criteria. Data is sorted if the sorter is set.
            </summary>
            <param name="destination">A collection to fill with entities built from data.</param>
            <param name="relations">Relations. May be <b>null</b> if the filter doesn't use other tables.</param>
            <param name="filter">The search condition which restricts the rows returned.</param>
        </member>
        <member name="M:FistCore.Core.IEntityDAO.Select(System.Collections.IList,FistCore.Core.RelationBucket,FistCore.Core.SearchCondition,System.Int32)">
            <summary>
            Selects all rows that match the filter criteria. Data is sorted if the sorter is set.
            </summary>
            <param name="destination">A collection to fill with entities built from data.</param>
            <param name="relations">Relations. May be <b>null</b> if the filter doesn't use other tables.</param>
            <param name="filter">The search condition which restricts the rows returned.</param>
            <param name="maxNumberOfItemsToReturn">Maximum number of items that will be returned.
            If set to zero or a negative value, all rows matching criteria will be returned.</param>
        </member>
        <member name="M:FistCore.Core.IEntityDAO.Find(System.Collections.IList)">
            <summary>
            Selects all rows that match an automatically created filter based on all properties that have been set.
            Predicates are combined by AND operators. Data is sorted if the sorter is set.
            </summary>
            <param name="destination">A collection to fill with entities built from data.</param>
        </member>
        <member name="M:FistCore.Core.IEntityDAO.Find(System.Collections.IList,System.Int32)">
            <summary>
            Selects all rows that match an automatically created filter based on all properties that have been set.
            Predicates are combined by AND operators. Data is sorted if the sorter is set.
            </summary>
            <param name="destination">A collection to fill with entities built from data.</param>
            <param name="maxNumberOfItemsToReturn">Maximum number of items that will be returned.
            If set to zero or a negative value, all rows matching the criteria will be returned.</param>
        </member>
        <member name="M:FistCore.Core.IEntityDAO.FindMatchingAnyCriteria(System.Collections.IList)">
            <summary>
            Selects all rows that match an automatically created filter based on all properties that have been set.
            Predicates are combined by OR operators. Data is sorted if the sorter is set.
            </summary>
            <param name="destination">A collection to fill with entities built from data.</param>
        </member>
        <member name="M:FistCore.Core.IEntityDAO.FindMatchingAnyCriteria(System.Collections.IList,System.Int32)">
            <summary>
            Selects all rows that match an automatically created filter based on all properties that have been set.
            Predicates are combined by OR operators. Data is sorted if the sorter is set.
            </summary>
            <param name="destination">A collection to fill with entities built from data.</param>
            <param name="maxNumberOfItemsToReturn">Maximum number of items that will be returned.
            If set to zero or a negative value, all rows matching criteria will be returned.</param>
        </member>
        <member name="M:FistCore.Core.IEntityDAO.FetchChildren(System.Collections.IList,FistCore.Core.DbRelation,FistCore.Core.OrderByClause)">
            <summary>
            Fetches child entities that reference the current entity.
            </summary>
            <param name="destination">A collection to fill with entities built from data. Will contain entities from the child table whose foreign key matches this entity's primary key.</param>
            <param name="relation">Relation between the current entity's table and another (child) table.
            Parent table of the given relation must be this entity's table; otherwise an exception is generated.</param>
            <param name="orderBy">Specifies the order in which the entities are added to output collection.</param>
        </member>
        <member name="M:FistCore.Core.IEntityDAO.FetchChildren(System.Collections.IList,FistCore.Core.DbRelation,FistCore.Core.IDbColumn,System.Object,FistCore.Core.OrderByClause)">
            <summary>
            Fetches child entities that reference the current entity.
            </summary>
            <param name="destination">A collection to fill with entities built from data. Will contain entities from the child table whose foreign key matches this entity's primary key.</param>
            <param name="relation">Relation between the current entity's table and another (child) table.
            Parent table of the given relation must be this entity's table; otherwise an exception is generated.</param>
            <param name="childField">Child field whose value must be equal the given value to be selected.</param>
            <param name="childFieldValue">Value of the given child field. May be <b>null</b>.</param>
            <param name="orderBy">Specifies the order in which the entities are added to output collection.</param>
            <remarks>The method creates a <see cref="T:FistCore.Core.SearchCondition"/> that compares the specified column to
            the given value. Only the child rows where the specified column matches the given value are selected.
            Very often database is designed so that the child entities are not deleted from the database but are
            marked as deleted instead. This method may be used when only child rows with a specific status value
            (eg. STATUS = 1) are to be fetched.</remarks>
        </member>
        <member name="M:FistCore.Core.IEntityDAO.FetchChildren(System.Collections.IList,FistCore.Core.ManyToManyRelation,FistCore.Core.OrderByClause)">
            <summary>
            Fetches child entities that reference the current entity.
            </summary>
            <param name="destination">A collection to fill with entities built from data. Will contain entities from the child table whose foreign key matches this entity's primary key.</param>
            <param name="mnRelation">Many-to-many relation. Current entity's table acts as a parent table,
            the other primary table in the relation acts as a child. Resursive M:N relations are not allowed.</param>
            <param name="orderBy">Specifies the order in which the entities are added to output collection.</param>
        </member>
        <member name="M:FistCore.Core.IEntityDAO.FetchChildren(System.Collections.IList,FistCore.Core.ManyToManyRelation,FistCore.Core.PrimaryTableIndex,FistCore.Core.OrderByClause)">
            <summary>
            Fetches child entities that reference the current entity.
            </summary>
            <param name="destination">A collection to fill with entities built from data. Will contain entities from the child table whose foreign key matches this entity's primary key.</param>
            <param name="mnRelation">Many-to-many relation. Current entity's table acts as a parent table,
            the other primary table in the relation acts as a child. May be recursive.</param>
            <param name="parent">Indicates which of the two primary tables in the M:N relation acts as a parent.</param>
            <param name="orderBy">Specifies the order in which the entities are added to output collection.</param>
            <remarks>When a single database table is used as both the first and the second primary table of an M:N
            relation then it must be explicitly specified which one is used as a parent and which one as a child table.</remarks>
        </member>
        <member name="M:FistCore.Core.IEntityDAO.FetchChildren(System.Collections.IList,FistCore.Core.ManyToManyRelation,FistCore.Core.IDbColumn,System.Object,FistCore.Core.OrderByClause)">
            <summary>
            Fetches child entities that reference the current entity.
            </summary>
            <param name="destination">A collection to fill with entities built from data. Will contain entities from the child table whose foreign key matches this entity's primary key.</param>
            <param name="mnRelation">Many-to-many relation. Current entity's table acts as a parent table,
            the other primary table in the relation acts as a child. Resursive M:N relations are not allowed.</param>
            <param name="childField">Child field whose value must be equal the given value to be selected.</param>
            <param name="childFieldValue">Value of the given child field. May be <b>null</b>.</param>
            <param name="orderBy">Specifies the order in which the entities are added to output collection.</param>
            <remarks><p>The method creates a <see cref="T:FistCore.Core.SearchCondition"/> that compares the specified column to
            the given value. Only the child rows where the specified column matches the given value are selected.
            Very often database is designed so that the child entities are not deleted from the database but are
            marked as deleted instead. This method may be used when only child rows with a specific status value
            (eg. STATUS = 1) are to be fetched. In addition, a SearchCondition may be created which filters out rows from the junction table.
            See <see cref="P:FistCore.Core.ManyToManyRelation.JunctionRowsFilter"/> for more information.</p>
            <p>When a single database table is used as both the first and the second primary table of an M:N
            relation then it must be explicitly specified which one is used as a parent and which one as a child table.
            This can be accomplished by using one of the overloaded FetchChildren methods that accept a <see cref="T:FistCore.Core.PrimaryTableIndex"/> parameter.</p></remarks>
        </member>
        <member name="M:FistCore.Core.IEntityDAO.FetchChildren(System.Collections.IList,FistCore.Core.ManyToManyRelation,FistCore.Core.PrimaryTableIndex,FistCore.Core.IDbColumn,System.Object,FistCore.Core.OrderByClause)">
            <summary>
            Fetches child entities that reference the current entity.
            </summary>
            <param name="destination">A collection to fill with entities built from data. Will contain entities from the child table whose foreign key matches this entity's primary key.</param>
            <param name="mnRelation">Many-to-many relation. Current entity's table acts as a parent table,
            the other primary table in the relation acts as a child. May be recursive.</param>
            <param name="parent">Indicates which of the two primary tables in the M:N relation acts as a parent.</param>
            <param name="childField">Child field whose value must be equal the given value to be selected.</param>
            <param name="childFieldValue">Value of the given child field. May be <b>null</b>.</param>
            <param name="orderBy">Specifies the order in which the entities are added to output collection.</param>
            <remarks><p>The method creates a <see cref="T:FistCore.Core.SearchCondition"/> that compares the specified column to
            the given value. Only the child rows where the specified column matches the given value are selected.
            Very often database is designed so that the child entities are not deleted from the database but are
            marked as deleted instead. This method may be used when only child rows with a specific status value
            (eg. STATUS = 1) are to be fetched. In addition, a SearchCondition may be created which filters out rows
            from the junction table. See <see cref="P:FistCore.Core.ManyToManyRelation.JunctionRowsFilter"/> for more information.</p>
            <p>When a single database table is used as both the first and the second primary table of an M:N
            relation then it must be explicitly specified which one is used as a parent and which one as a child table.</p></remarks>
        </member>
        <member name="M:FistCore.Core.IEntityDAO.FetchChildren(System.Collections.IList[],FistCore.Core.DbRelation[])">
            <summary>
            Fetches child entities from multiple tables that reference the current entity.
            </summary>
            <param name="destinationCollections">Collections to fill with entities built from data. Will contain entities from the child table whose foreign key matches this entity's primary key.</param>
            <param name="childrenToFetch">Relations between the current entity's table and child tables. The count and order must match collections.</param>
            <remarks>Preffer using this method instead of a sequence of <see cref="M:FistCore.Core.IEntityDAO.FetchChildren(FistCore.Core.DbRelation)"/>
            method invocations. Future optimizers will have a better chance to speed up data access when they know in ahead
            what data is to be fetched.</remarks>
        </member>
        <member name="M:FistCore.Core.IEntityDAO.FetchChildren``1(FistCore.Core.DbRelation,FistCore.Core.OrderByClause)">
            <summary>
            Fetches child entities that reference the current entity.
            </summary>
            <param name="relation">Relation between the current entity's table and another (child) table.
            Parent table of the given relation must be this entity's table; otherwise an exception is generated.</param>
            <param name="orderBy">Specifies the order in which the entities are added to output collection.</param>
            <returns>Entities from the child table whose foreign key matches this entity's primary key.</returns>
            <remarks>An exception is generated if the current entity's primary key value is not set.</remarks>
        </member>
        <member name="M:FistCore.Core.IEntityDAO.FetchChildren``1(FistCore.Core.DbRelation,FistCore.Core.IDbColumn,System.Object,FistCore.Core.OrderByClause)">
            <summary>
            Fetches child entities that reference the current entity.
            </summary>
            <param name="relation">Relation between the current entity's table and another (child) table.
            Parent table of the given relation must be this entity's table; otherwise an exception is generated.</param>
            <param name="childField">Child field whose value must be equal the given value to be selected.</param>
            <param name="childFieldValue">Value of the given child field. May be <b>null</b>.</param>
            <param name="orderBy">Specifies the order in which the entities are added to output collection.</param>
            <returns>Entities from the child table whose foreign key matches this entity's primary key.</returns>
            <remarks>The method creates a <see cref="T:FistCore.Core.SearchCondition"/> that compares the specified column to
            the given value. Only the child rows where the specified column matches the given value are selected.
            Very often database is designed so that the child entities are not deleted from the database but are
            marked as deleted instead. This method may be used when only child rows with a specific status value
            (eg. STATUS = 1) are to be fetched.</remarks>
        </member>
        <member name="M:FistCore.Core.IEntityDAO.FetchChildren``1(FistCore.Core.ManyToManyRelation,FistCore.Core.OrderByClause)">
            <summary>
            Fetches child entities that reference the current entity.
            </summary>
            <param name="mnRelation">Many-to-many relation. Current entity's table acts as a parent table,
            the other primary table in the relation acts as a child. Resursive M:N relations are not allowed.</param>
            <param name="orderBy">Specifies the order in which the entities are added to output collection.</param>
            <returns>Records form the child table that reference the current entity through junction table of the M:N relation.</returns>
            <remarks>When a single database table is used as both the first and the second primary table of an M:N
            relation then it must be explicitly specified which one is used as a parent and which one as a child table.
            This can be accomplished by using one of the overloaded FetchChildren methods that accept a <see cref="T:FistCore.Core.PrimaryTableIndex"/> parameter.</remarks>
        </member>
        <member name="M:FistCore.Core.IEntityDAO.FetchChildren``1(FistCore.Core.ManyToManyRelation,FistCore.Core.PrimaryTableIndex,FistCore.Core.OrderByClause)">
            <summary>
            Fetches child entities that reference the current entity.
            </summary>
            <param name="mnRelation">Many-to-many relation. Current entity's table acts as a parent table,
            the other primary table in the relation acts as a child. May be recursive.</param>
            <param name="parent">Indicates which of the two primary tables in the M:N relation acts as a parent.</param>
            <param name="orderBy">Specifies the order in which the entities are added to output collection.</param>
            <returns>Records form the child table that reference the current entity through junction table of the M:N relation.</returns>
            <remarks>When a single database table is used as both the first and the second primary table of an M:N
            relation then it must be explicitly specified which one is used as a parent and which one as a child table.</remarks>
        </member>
        <member name="M:FistCore.Core.IEntityDAO.FetchChildren``1(FistCore.Core.ManyToManyRelation,FistCore.Core.IDbColumn,System.Object,FistCore.Core.OrderByClause)">
            <summary>
            Fetches child entities that reference the current entity.
            </summary>
            <param name="mnRelation">Many-to-many relation. Current entity's table acts as a parent table,
            the other primary table in the relation acts as a child. Resursive M:N relations are not allowed.</param>
            <param name="childField">Child field whose value must be equal the given value to be selected.</param>
            <param name="childFieldValue">Value of the given child field. May be <b>null</b>.</param>
            <param name="orderBy">Specifies the order in which the entities are added to output collection.</param>
            <returns>Records form the child table that reference the current entity through junction table of the M:N relation.</returns>
            <remarks><p>The method creates a <see cref="T:FistCore.Core.SearchCondition"/> that compares the specified column to
            the given value. Only the child rows where the specified column matches the given value are selected.
            Very often database is designed so that the child entities are not deleted from the database but are
            marked as deleted instead. This method may be used when only child rows with a specific status value
            (eg. STATUS = 1) are to be fetched. In addition, a SearchCondition may be created which filters out rows from the junction table.
            See <see cref="P:FistCore.Core.ManyToManyRelation.JunctionRowsFilter"/> for more information.</p>
            <p>When a single database table is used as both the first and the second primary table of an M:N
            relation then it must be explicitly specified which one is used as a parent and which one as a child table.
            This can be accomplished by using one of the overloaded FetchChildren methods that accept a <see cref="T:FistCore.Core.PrimaryTableIndex"/> parameter.</p></remarks>
        </member>
        <member name="M:FistCore.Core.IEntityDAO.FetchChildren``1(FistCore.Core.ManyToManyRelation,FistCore.Core.PrimaryTableIndex,FistCore.Core.IDbColumn,System.Object,FistCore.Core.OrderByClause)">
            <summary>
            Fetches child entities that reference the current entity.
            </summary>
            <param name="mnRelation">Many-to-many relation. Current entity's table acts as a parent table,
            the other primary table in the relation acts as a child. May be recursive.</param>
            <param name="parent">Indicates which of the two primary tables in the M:N relation acts as a parent.</param>
            <param name="childField">Child field whose value must be equal the given value to be selected.</param>
            <param name="childFieldValue">Value of the given child field. May be <b>null</b>.</param>
            <param name="orderBy">Specifies the order in which the entities are added to output collection.</param>
            <returns>Records form the child table that reference the current entity through junction table of the M:N relation.</returns>
            <remarks><p>The method creates a <see cref="T:FistCore.Core.SearchCondition"/> that compares the specified column to
            the given value. Only the child rows where the specified column matches the given value are selected.
            Very often database is designed so that the child entities are not deleted from the database but are
            marked as deleted instead. This method may be used when only child rows with a specific status value
            (eg. STATUS = 1) are to be fetched. In addition, a SearchCondition may be created which filters out rows
            from the junction table. See <see cref="P:FistCore.Core.ManyToManyRelation.JunctionRowsFilter"/> for more information.</p>
            <p>When a single database table is used as both the first and the second primary table of an M:N
            relation then it must be explicitly specified which one is used as a parent and which one as a child table.</p></remarks>
        </member>
        <member name="P:FistCore.Core.IEntityDAO.Entity">
            <summary>
            Gets or sets entity with which DAO works.
            </summary>
            <remarks>Depending on operation DAO may only read entity, but it may also change it.
            CRUD operations both read and update entity.</remarks>
        </member>
        <member name="P:FistCore.Core.IEntityDAO.DaoFactory">
            <summary>
            Gets or sets DAO factory. Null is not allowed.
            </summary>
            <remarks>Required to build DAOs for entities used in data-access logic. This factory is passed on to
            created DAOs so that all DAOs in the chain are created using the same strategies.</remarks>
        </member>
        <member name="F:FistCore.Core.EntityBase.entityDaoCreationStrategies">
            <summary>
            Collection of <see cref="T:FistCore.Core.IEntityDaoFactory"/> objects. Required to build DAOs for entities used in
            data-access logic. This collection is passed on to created DAOs so that all DAOs in the chain are created
            using the same strategies.
            </summary>
        </member>
        <member name="M:FistCore.Core.EntityBase.#ctor(FistCore.Core.IEntity)">
            <summary>
            Initializes a new instance of EntityBase class.
            </summary>
            <param name="existing">Instance of IEntity. Must be compatibile with current entity; otherwise an exception is generated.</param>
            <remarks><p>Copy constructor. Copies all class members. Parent entities are not copied by reference,
            but cloned (deep copy).</p></remarks>
        </member>
        <member name="M:FistCore.Core.EntityBase.#ctor(FistCore.Core.IDbTable)">
            <summary>
            Initializes a new instance of EntityBase class.
            </summary>
            <param name="dbTable">Metadata for table/view to which the entity belongs to.</param>
            <remarks><p>Sets table/view and the catalog to which this entity belongs to.</p>
            <p>Uses only default DAO creation strategies (see <see cref="T:FistCore.Core.EntityDaoFactory"/>).
            This can be changed via <see cref="P:FistCore.Core.EntityBase.DaoFactory"/> property.</p></remarks>
        </member>
        <member name="M:FistCore.Core.EntityBase.#ctor(FistCore.Core.IDbTable,FistCore.Core.IEntityDaoFactory)">
            <summary>
            Initializes a new instance of EntityBase class.
            </summary>
            <param name="dbTable">Metadata for table/view to which the entity belongs to.</param>
            <param name="daoCreationStrategies">DAO creation strategies. Null is not allowed.</param>
            <remarks>Sets table/view and the catalog to which this entity belongs to.</remarks>
        </member>
        <member name="M:FistCore.Core.EntityBase.#ctor(System.Type,System.String,FistCore.Core.DbTableProvider)">
            <summary>
            Initializes a new instance of EntityModelBase.
            </summary>
            <param name="dbTableClass">A class that implements <see cref="T:FistCore.Core.IDbTable"/> interface.</param>
            <param name="tableAlias">Optional table alias or <b>null</b> if alias is not used.</param>
            <param name="staticBuildDbTableMethod">Optional static method that builds an instance of class specified in the <b>dbTableClass</b>.
            If <b>null</b> then default implementation using reflection is used.</param>
        </member>
        <member name="F:FistCore.Core.EntityBase.connectionIsCreatedLocal">
            <summary>
            Indicates whether the connection is openned locally or is it shared with other objects.
            If true then Dispose method will dispose ConnectionProvider, otherwise it will leave it intact.
            </summary>
        </member>
        <member name="F:FistCore.Core.EntityBase.connectionProvider">
            <summary>
            ConnectionProvider object used for database interaction.
            </summary>
        </member>
        <member name="F:FistCore.Core.EntityBase.lastExecutedCommandInfo">
            <summary>
            Information for the last command generated and executed by the current DAO on the data-source.
            </summary>
        </member>
        <member name="M:FistCore.Core.EntityBase.SetSorter(FistCore.Core.OrderByClause)">
            <summary>
            Sets the sorter used by the data retrieval methods.
            </summary>
            <param name="sorter">Sort clause. May be <b>null</b>.</param>
            <example>
            The following examples selects all employees sorted by their last name.
            <code>
            public DataTable SelectAllEmployeesOrderedByLastName()
            {
            	EmployeesEntity emp = new EmployeesEntity();
            	// Order by last name. Use ascending order (true).
            	emp.SetSorter(new OrderByClause(emp.Table.LastName, true));
            	DataTable allEmployees = emp.SelectAll();
            	return allEmployees;
            }
            </code>
            </example>
        </member>
        <member name="M:FistCore.Core.EntityBase.SetSortMode(System.Boolean)">
            <summary>
            Sets the sort mode for data retrieveal methods. This is just a hint. Data retrieval methods may ignore this.
            </summary>
            <param name="sortOnDatabase">Specifies whether sorting will take place on database or in DataTable after data has been fetched.</param>
        </member>
        <member name="M:FistCore.Core.EntityBase.DeleteOne">
            <summary>
            Deletes one existing row in the database based on the primary key and marks the entity as <see cref="F:FistCore.Core.EntityState.Deleted"/>.
            </summary>
            <returns>Number of rows affected.</returns>
            <remarks>Throws exception if the parent table doesn't have a primary key constraint
            or if the primary key fields of the current entity are not set.</remarks>
            <example>
            The following example deletes a row in the Employees table that has a given ID.
            <code>
            public void DeleteEmployee(int id)
            {
            	// Create an entity, set the primary key and delete it from the database.
            	EmployeesEntity emp = new EmployeesEntity();
            	emp.EmployeeID = id;
            	emp.DeleteOne();
            }
            </code>
            </example>
        </member>
        <member name="M:FistCore.Core.EntityBase.InsertOne">
             <summary>
             Inserts one new row into the database. Affects the current entity state.
             </summary>
             <returns>Autoidentity value for the inserted row. -1 if the table doesn't contain an
             autoidentity field or the DBMS specific code cannot be generated.</returns>
             <remarks><p>Marks the entity as <see cref="F:FistCore.Core.EntityState.Synchronized"/> if the insert operation
             succeeded and the auto-increment value assigned by the database has been retrieved (if such a field
             exists). The entity is marked as <see cref="F:FistCore.Core.EntityState.OutOfSync"/> if auto-increment value
             cannot be retrieved.</p>
             <p>Automatically generates the code that retrieves the new identity for supported databases.
             DBMS specific code depends on the class' IConnectionProvider.</p></remarks>
             <example>
             The following example inserts a row into the Employees table and retrieves the new auto-identity value assigned to it.
             <code>
             public int InsertEmployee(string firstName, string lastName)
             {
             	EmployeesEntity emp = new EmployeesEntity();
             	emp.FirstName = firstName;
             	emp.LastName = lastName;
            
             	// InsertOne method automatically retrieves the auto-identity value assigned to the inserted row.
             	// The EmployeeID property is automatically set, too.
             	return emp.InsertOne();
             }
             </code>
             </example>
        </member>
        <member name="M:FistCore.Core.EntityBase.SelectOne">
             <summary>
             Selects one existing entity from the database based on the Primary Key, populates entity with the
             retrieved data and marks it as <see cref="F:FistCore.Core.EntityState.Synchronized"/>.
             </summary>
             <returns>True if select succeeded; false if primary key is not defined for this table,
             if the primary key values are not set or if the entity does not exist.</returns>
             <remarks>This method does <b>not</b> prefetch parent entities.</remarks>
             <example>
             The following example fetches an employee with the given ID.
             <code>
             public EmployeesEntity SelectEmployee(int id)
             {
             	EmployeesEntity emp = new EmployeesEntity();
             	emp.EmployeeID = id;
            
             	// SelectOne() method returns true if a row with the the specified ID exists.
             	// It also initializes all members with the data retrieved.
             	bool isSuccess = emp.SelectOne();
            
             	// If SelectOne() method found a row that matches the given ID then return the entity; otherwise return null.
             	if (isSuccess)
             		return emp;
             	else
             		return null;
             }
             </code>
             </example>
        </member>
        <member name="M:FistCore.Core.EntityBase.UpdateOne">
             <summary>
             Updates one existing row in the database based on the primary key and marks the entity as <see cref="F:FistCore.Core.EntityState.Synchronized"/>.
             </summary>
             <returns>Number of rows affected.</returns>
             <remarks><p>Copies the values from this entity to the row identified by the primary key.</p>
             <p>Throws exception if parent table doesn't have a primary key constraint or if the primary key fields of this entity are not set.</p></remarks>
             <example>
             The following example fetches an existing entity from the database, changes some of it's fields and saves it back to the database.
             <code>
             public void UpdateLastName(int employeeId, string newLastName)
             {
             	// We only want to change one field (LastName).
             	// Therefore, to keep the other fields intact, original entity must be fetched.
             	EmployeesEntity emp = new EmployeesEntity();
             	emp.EmployeeID = employeeId;
             	emp.SelectOne();
            
             	// Change the last name and save the changes to database.
             	emp.LastName = newLastName;
             	emp.UpdateOne();
             }
             </code>
             Original entity values don't have to be fetched if all of the new values are known.
             The following example updates an existing entity, but it accesses the database only once.
             <code>
             public void UpdateJohnSmith()
             {
             	// Update a row that has EmployeeID of 1 with new values.
             	// The old entity doesn't have to be retrieved from the database if we know all of the new values.
             	EmployeesEntity johnSmith = new EmployeesEntity();
             	johnSmith.EmployeeID = 1;
             	johnSmith.FirstName = "Jonathan";
             	johnSmith.LastName = "Smith";
             	johnSmith.UpdateOne();
             }
             </code>
             </example>
        </member>
        <member name="M:FistCore.Core.EntityBase.Save">
            <summary>
            Persists entity. Operation (insert, update, delete, nothing) is chosen based on the current <see cref="T:FistCore.Core.EntityState"/>.
            </summary>
            <returns>True if data access operation was executed; false otherwise.</returns>
            <remarks>Executed action and returned value depends on the current <see cref="T:FistCore.Core.EntityState"/>:
            <list type="bullet">
            <item><see cref="F:FistCore.Core.EntityState.New"/>. Executes <see cref="M:FistCore.Core.EntityBase.InsertOne"/> method. Returns <b>true</b>.</item>
            <item><see cref="F:FistCore.Core.EntityState.Synchronized"/>. No action is executed. Returns <b>false</b>.</item>
            <item><see cref="F:FistCore.Core.EntityState.OutOfSync"/>. Executes <see cref="M:FistCore.Core.EntityBase.UpdateOne"/> method. Returns <b>true</b>.</item>
            <item><see cref="F:FistCore.Core.EntityState.PendingDeletion"/>. Executes <see cref="M:FistCore.Core.EntityBase.DeleteOne"/> method. Returns <b>true</b>.</item>
            <item><see cref="F:FistCore.Core.EntityState.Deleted"/>. No action is executed. Returns <b>false</b>.</item>
            </list>
            </remarks>
        </member>
        <member name="M:FistCore.Core.EntityBase.Delete(FistCore.Core.IDbColumn,System.Object)">
             <summary>
             Deletes all rows that match the filter criteria.
             </summary>
             <param name="column">Column whose value must be equal to the given value to be deleted.</param>
             <param name="value">Value. May be <b>null</b>.</param>
             <returns>Number of rows affected. -1 if the operation was aborted.</returns>
             <remarks>The method creates a <see cref="T:FistCore.Core.SearchCondition"/> that compares the specified column
             to the given value. Only the rows where the specified column matches the given value are deleted.</remarks>
             <example>
             The following example deletes a row from the Employees table and all rows in the EmployeeTerritories
             table that reference it. All commands are executed as parts of a single transaction. Thus, either
             all data is deleted or none.
             <code>
             public void DeleteEmployeeAndChildEntities(int employeeId)
             {
             	// Deletes an employee and all records from the EmployeeTerritories table bound to the
             	// specified employee. As a single transaction. Either all data is deleted or none.
            
             	EmployeesEntity employee = new EmployeesEntity();
             	employee.EmployeeID = employeeId;
            
             	try
             	{
             		// Open connection and begin transaction.
             		employee.ConnectionProvider.BeginTransaction();
            
             		// Delete all rows in EmployeeTerritories table where column "EmployeeID"
             		// contains a value equal to the given employee's ID.
             		EmployeeTerritoriesEntity empTerritories = new EmployeeTerritoriesEntity();
             		empTerritories.ConnectionProvider = employee.ConnectionProvider;
             		empTerritories.Delete(empTerritories.Table.EmployeeID, employee.EmployeeID);
            
             		// Delete employee.
             		employee.DeleteOne();
            
             		// Commit transaction.
             		employee.ConnectionProvider.CommitTransaction();
             	}
             	catch
             	{
             		// An error occured. Rollback the entire transaction and bubble up the exception that occured.
             		employee.ConnectionProvider.RollbackTransaction();
             		throw;
             	}
             	finally
             	{
             		// It is good practice to close connection if it was openned manually.
             		// The connection is returned to ADO.NET connection pool.
             		employee.ConnectionProvider.CloseConnection();
             	}
             }
             </code>
             </example>
        </member>
        <member name="M:FistCore.Core.EntityBase.Delete(FistCore.Core.SearchCondition)">
             <summary>
             Deletes all rows that match the filter criteria.
             </summary>
             <param name="filter">The search condition which limits the number of rows that are deleted.
             Throws exception if <b>null</b> or an empty SearchCondition is passed as an argument.</param>
             <returns>Number of rows affected.</returns>
             <example>
             The following example creates a SearchCondition that filters out all employees born in 1977.
             Delete method uses the SearchCondition to delete all rows that match it.
             <code>
             public void DeleteEmployeesBornIn1977()
             {
             	// Delete all employees that were born between January 1, 1977 and January 1, 1978.
             	EmployeesEntity emp = new EmployeesEntity();
             	emp.Delete(new SearchCondition(PredicateFactory.Between(emp.Table.BirthDate, new DateTime(1977,1,1), new DateTime(1978,1,1))));
             }
             </code>
             The following example creates a SearchCondition that filters out all employees that are in charge
             of the specified territory. SearchCondition contains an IN predicate that uses a subquery which
             returns all employee IDs linked to the given territory ID. Delete method uses the SearchCondition
             to delete all rows that match it.
             <code>
             public void DeleteEmployeesInChargeOfTheGivenTerritory(string territoryId)
             {
             	// This is the equivalent SQL code that does the same task.
            
             	//	DELETE FROM Employees
             	//	WHERE Employees.EmployeeID IN
             	//		(SELECT EmployeeTerritories.EmployeeID
             	//		FROM EmployeeTerritories
             	//		WHERE EmployeeTerritories.TerritoryID = @territoryId)
             	//				EmployeesEntity emp = new EmployeesEntity();
            
             	// First we construct the subquery.
             	EmployeeTerritoriesMeta empTerritories = new EmployeeTerritoriesMeta();
             	SelectStatement subQuery = new SelectStatement(empTerritories);
             	subQuery.SelectList.Add(empTerritories.EmployeeID);
             	subQuery.Where.Add(PredicateFactory.Compare(empTerritories.TerritoryID,ComparisonOperator.Equal, territoryId));
            
             	// SearchCondition uses the subquery to filter out the rows we want to delete.
             	EmployeesEntity emp = new EmployeesEntity();
             	SearchCondition inChargeOfTerritory = new SearchCondition(PredicateFactory.In(emp.Table.EmployeeID, subQuery));
             	emp.Delete(inChargeOfTerritory);
             }
             </code>
             </example>
        </member>
        <member name="M:FistCore.Core.EntityBase.Find">
            <summary>
            Selects all rows that match an automatically created filter based on all properties that have been set.
            Predicates are combined by AND operators. Data is sorted if the sorter is set.
            </summary>
            <returns>Rows that match the automatically created filter.</returns>
            <example>
            The following example select all employees whose first name is "John" and the last name is "Smith".
            <code>
            public DataTable FindAllJohnSmiths()
            {
            	EmployeesEntity emp = new EmployeesEntity();
            	emp.FirstName = "John";
            	emp.LastName = "Smith";
            	return emp.Find();
            }
            </code>
            </example>
        </member>
        <member name="M:FistCore.Core.EntityBase.Find(System.Int32)">
            <summary>
            Selects all rows that match an automatically created filter based on all properties that have been set.
            Predicates are combined by AND operators. Data is sorted if the sorter is set.
            </summary>
            <param name="maxNumberOfItemsToReturn">Maximum number of items that will be returned.
            If set to zero or a negative value, all rows matching the criteria will be returned.</param>
            <returns>Rows that match the automatically created filter.</returns>
        </member>
        <member name="M:FistCore.Core.EntityBase.FindMatchingAnyCriteria">
            <summary>
            Selects all rows that match an automatically created filter based on all properties that have been set.
            Predicates are combined by OR operators. Data is sorted if the sorter is set.
            </summary>
            <returns>Rows that match the automatically created filter.</returns>
        </member>
        <member name="M:FistCore.Core.EntityBase.FindMatchingAnyCriteria(System.Int32)">
            <summary>
            Selects all rows that match an automatically created filter based on all properties that have been set.
            Predicates are combined by OR operators. Data is sorted if the sorter is set.
            </summary>
            <param name="maxNumberOfItemsToReturn">Maximum number of items that will be returned.
            If set to zero or a negative value, all rows matching criteria will be returned.</param>
            <returns>Rows that match the automatically created filter.</returns>
        </member>
        <member name="M:FistCore.Core.EntityBase.SelectAll">
            <summary>
            Selects all rows from the table. Data is sorted if the sorter is set.
            </summary>
            <returns>All rows.</returns>
            <example>
            The following examples selects all employees sorted by their last name.
            <code>
            public DataTable SelectAllEmployeesOrderedByLastName()
            {
            	EmployeesEntity emp = new EmployeesEntity();
            	// Order by last name. Use ascending order (true).
            	emp.SetSorter(new OrderByClause(emp.Table.LastName, true));
            	DataTable allEmployees = emp.SelectAll();
            	return allEmployees;
            }
            </code>
            </example>
        </member>
        <member name="M:FistCore.Core.EntityBase.Select(FistCore.Core.IDbColumn,System.Object)">
            <summary>
            Selects all rows that match the filter criteria. Data is sorted if the sorter is set.
            </summary>
            <param name="column">Column whose value must be equal to the given value to be selected.</param>
            <param name="value">Value. May be <b>null</b>.</param>
            <returns>Data.</returns>
            <remarks>The method creates a <see cref="T:FistCore.Core.SearchCondition"/> that compares the specified column
            to the given value. Only the rows where the specified column matches the given value are selected.</remarks>
            <example>
            The following example selects all employees that live in New York.
            <code>
            public DataTable SelectNewYorkers()
            {
            	EmployeesEntity emp = new EmployeesEntity();
            	DataTable newYorkEmployees = emp.Select(emp.Table.City, "New York");
            	return newYorkEmployees;
            }
            </code>
            </example>
        </member>
        <member name="M:FistCore.Core.EntityBase.Select(FistCore.Core.RelationBucket,FistCore.Core.SearchCondition)">
             <summary>
             Selects all rows that match the filter criteria. Data is sorted if the sorter is set.
             </summary>
             <param name="relations">Relations. May be <b>null</b> if the filter doesn't use other tables.</param>
             <param name="filter">The search condition which restricts the rows returned.</param>
             <returns>Data that matches the filter.</returns>
             <example>
             The following example uses the Select method that allows advanced filtering using RelationBucket
             and SearchCondition objects. It selects all employees that are in charge of the New York territory.
             <code>
             public DataTable SelectEmployeesInChargeOfNewYorkTerritory()
             {
             	EmployeesEntity emp = new EmployeesEntity();
            
             	// Create a relation between Employees and EmployeeTerritories tables.
             	// Employees is a parent table.
             	// EmployeeTerritories is a child table.
             	// EmployeeTerritories.EmployeeID is a foreign key.
             	EmployeeTerritoriesMeta empTerritories = new EmployeeTerritoriesMeta();
             	RelationBucket relations = new RelationBucket();
             	relations.Add(new DbRelation(emp.Table, empTerritories, empTerritories.EmployeeID));
            
             	// Create a search condition with a single predicate.
             	// Comparisson predicate compares TerritoryID field to given value (New York ID)
             	// using the specified comparison operator ("=").
             	SearchCondition territoryIdEqualsNy = new SearchCondition();
             	territoryIdEqualsNy.Add(PredicateFactory.Compare(empTerritories.TerritoryID,ComparisonOperator.Equal, "10019"));
            
             	// Select all employees that are in charge of the New York territory.
             	DataTable nyEmployees = emp.Select(relations, territoryIdEqualsNy);
             	return nyEmployees;
             }
             </code>
             </example>
        </member>
        <member name="M:FistCore.Core.EntityBase.Select(FistCore.Core.RelationBucket,FistCore.Core.SearchCondition,System.Int32)">
             <summary>
             Selects all rows that match the filter criteria. Data is sorted if the sorter is set.
             </summary>
             <param name="relations">Relations. May be <b>null</b> if the filter doesn't use other tables.</param>
             <param name="filter">The search condition which restricts the rows returned.</param>
             <param name="maxNumberOfItemsToReturn">Maximum number of items that will be returned.
             If set to zero or a negative value, all rows matching criteria will be returned.</param>
             <returns>Data that matches the filter.</returns>
             <example>
             The following example uses the Select method that allows advanced filtering using RelationBucket
             and SearchCondition objects. It selects all employees that are in charge of the New York territory.
             <code>
             public DataTable SelectEmployeesInChargeOfNewYorkTerritory()
             {
             	EmployeesEntity emp = new EmployeesEntity();
            
             	// Create a relation between Employees and EmployeeTerritories tables.
             	// Employees is a parent table.
             	// EmployeeTerritories is a child table.
             	// EmployeeTerritories.EmployeeID is a foreign key.
             	EmployeeTerritoriesMeta empTerritories = new EmployeeTerritoriesMeta();
             	RelationBucket relations = new RelationBucket();
             	relations.Add(new DbRelation(emp.Table, empTerritories, empTerritories.EmployeeID));
            
             	// Create a search condition with a single predicate.
             	// Comparisson predicate compares TerritoryID field to given value (New York ID)
             	// using the specified comparison operator ("=").
             	SearchCondition territoryIdEqualsNy = new SearchCondition();
             	territoryIdEqualsNy.Add(PredicateFactory.Compare(empTerritories.TerritoryID,ComparisonOperator.Equal, "10019"));
            
             	// Select all employees that are in charge of the New York territory.
             	DataTable nyEmployees = emp.Select(relations, territoryIdEqualsNy, 0);
             	return nyEmployees;
             }
             </code>
             </example>
        </member>
        <member name="M:FistCore.Core.EntityBase.SelectAll(System.Collections.IList)">
             <summary>
             Selects all rows from the table. Data is sorted if the sorter is set.
             </summary>
             <param name="destination">A collection to fill with entities built from data.</param>
             <example>
             The following examples selects all employees sorted by their last name.
             <code>
             public EntityCollection&lt;EmployeesEntity, EmployeesMeta&gt; SelectAllEmployeesOrderedByLastName()
             {
             	EmployeesEntity emp = new EmployeesEntity();
             	EntityDAO dao = new EntityDAO(emp);
            
             	// Order by last name. Use ascending order (true).
             	dao.SetSorter(new OrderByClause(emp.Table.LastName, true));
             	var allEmployees = new EntityCollection&lt;EmployeesEntity, EmployeesMeta&gt;();
             	dao.SelectAll(allEmployees);
             	return allEmployees;
             }
             </code>
             </example>
        </member>
        <member name="M:FistCore.Core.EntityBase.Select(System.Collections.IList,FistCore.Core.IDbColumn,System.Object)">
            <summary>
            Selects all rows that match the filter criteria. Data is sorted if the sorter is set.
            </summary>
            <param name="destination">A collection to fill with entities built from data.</param>
            <param name="column">Column whose value must be equal to the given value to be selected.</param>
            <param name="value">Value. May be <b>null</b>.</param>
            <remarks>The method creates a <see cref="T:FistCore.Core.SearchCondition"/> that compares the specified column
            to the given value. Only the rows where the specified column matches the given value are selected.</remarks>
            <example>
            The following example selects all employees that live in New York.
            <code>
            public EntityCollection&lt;EmployeesEntity, EmployeesMeta&gt; SelectNewYorkers()
            {
            	EmployeesEntity emp = new EmployeesEntity();
            	EntityDAO dao = new EntityDAO(emp);
            	var nyEmployees = new EntityCollection&lt;EmployeesEntity, EmployeesMeta&gt;();
            	dao.Select(nyEmployees, emp.Table.City, "New York");
            	return newYorkEmployees;
            }
            </code>
            </example>
        </member>
        <member name="M:FistCore.Core.EntityBase.Select(System.Collections.IList,FistCore.Core.RelationBucket,FistCore.Core.SearchCondition)">
             <summary>
             Selects all rows that match the filter criteria. Data is sorted if the sorter is set.
             </summary>
             <param name="destination">A collection to fill with entities built from data.</param>
             <param name="relations">Relations. May be <b>null</b> if the filter doesn't use other tables.</param>
             <param name="filter">The search condition which restricts the rows returned.</param>
             <example>
             The following example uses the Select method that allows advanced filtering using RelationBucket
             and SearchCondition objects. It selects all employees that are in charge of the New York territory.
             <code>
             public EntityCollection&lt;EmployeesEntity, EmployeesMeta&gt; SelectEmployeesInChargeOfNewYorkTerritory()
             {
             	EmployeesEntity emp = new EmployeesEntity();
            
             	// Create a relation between Employees and EmployeeTerritories tables.
             	// Employees is a parent table.
             	// EmployeeTerritories is a child table.
             	// EmployeeTerritories.EmployeeID is a foreign key.
             	EmployeeTerritoriesMeta empTerritories = new EmployeeTerritoriesMeta();
             	RelationBucket relations = new RelationBucket();
             	relations.Add(new DbRelation(emp.Table, empTerritories, empTerritories.EmployeeID));
            
             	// Create a search condition with a single predicate.
             	// Comparisson predicate compares TerritoryID field to given value (New York ID)
             	// using the specified comparison operator ("=").
             	SearchCondition territoryIdEqualsNy = new SearchCondition();
             	territoryIdEqualsNy.Add(PredicateFactory.Compare(empTerritories.TerritoryID,ComparisonOperator.Equal, "10019"));
            
             	// Select all employees that are in charge of the New York territory.
             	EntityDAO dao = new EntityDAO(emp);
             	var nyEmployees = new EntityCollection&lt;EmployeesEntity, EmployeesMeta&gt;();
             	dao.Select(relations, territoryIdEqualsNy);
             	return nyEmployees;
             }
             </code>
             </example>
        </member>
        <member name="M:FistCore.Core.EntityBase.Select(System.Collections.IList,FistCore.Core.RelationBucket,FistCore.Core.SearchCondition,System.Int32)">
             <summary>
             Selects all rows that match the filter criteria. Data is sorted if the sorter is set.
             </summary>
             <param name="destination">A collection to fill with entities built from data.</param>
             <param name="relations">Relations. May be <b>null</b> if the filter doesn't use other tables.</param>
             <param name="filter">The search condition which restricts the rows returned.</param>
             <param name="maxNumberOfItemsToReturn">Maximum number of items that will be returned.
             If set to zero or a negative value, all rows matching criteria will be returned.</param>
             <example>
             The following example uses the Select method that allows advanced filtering using RelationBucket
             and SearchCondition objects. It selects all employees that are in charge of the New York territory.
             <code>
             public EntityCollection&lt;EmployeesEntity, EmployeesMeta&gt; SelectEmployeesInChargeOfNewYorkTerritory()
             {
             	EmployeesEntity emp = new EmployeesEntity();
            
             	// Create a relation between Employees and EmployeeTerritories tables.
             	// Employees is a parent table.
             	// EmployeeTerritories is a child table.
             	// EmployeeTerritories.EmployeeID is a foreign key.
             	EmployeeTerritoriesMeta empTerritories = new EmployeeTerritoriesMeta();
             	RelationBucket relations = new RelationBucket();
             	relations.Add(new DbRelation(emp.Table, empTerritories, empTerritories.EmployeeID));
            
             	// Create a search condition with a single predicate.
             	// Comparisson predicate compares TerritoryID field to given value (New York ID)
             	// using the specified comparison operator ("=").
             	SearchCondition territoryIdEqualsNy = new SearchCondition();
             	territoryIdEqualsNy.Add(PredicateFactory.Compare(empTerritories.TerritoryID,ComparisonOperator.Equal, "10019"));
            
             	// Select all employees that are in charge of the New York territory.
             	EntityDAO dao = new EntityDAO(emp);
             	var nyEmployees = new EntityCollection&lt;EmployeesEntity, EmployeesMeta&gt;();
             	dao.Select(nyEmployees, relations, territoryIdEqualsNy, 0);
             	return nyEmployees;
             }
             </code>
             </example>
        </member>
        <member name="M:FistCore.Core.EntityBase.Find(System.Collections.IList)">
             <summary>
             Selects all rows that match an automatically created filter based on all properties that have been set.
             Predicates are combined by AND operators. Data is sorted if the sorter is set.
             </summary>
             <param name="destination">A collection to fill with entities built from data.</param>
             <example>
             The following example select all employees whose first name is "John" and the last name is "Smith".
             <code>
             public EntityCollection&lt;EmployeesEntity, EmployeesMeta&gt; FindAllJohnSmiths()
             {
             	EmployeesEntity emp = new EmployeesEntity();
             	emp.FirstName = "John";
             	emp.LastName = "Smith";
            
             	EntityDAO dao = new EntityDAO(emp);
             	var johnSmiths = new EntityCollection&lt;EmployeesEntity, EmployeesMeta&gt;();
             	dao.Find(johnSmiths);
             	return johnSmiths;
             }
             </code>
             </example>
        </member>
        <member name="M:FistCore.Core.EntityBase.Find(System.Collections.IList,System.Int32)">
            <summary>
            Selects all rows that match an automatically created filter based on all properties that have been set.
            Predicates are combined by AND operators. Data is sorted if the sorter is set.
            </summary>
            <param name="destination">A collection to fill with entities built from data.</param>
            <param name="maxNumberOfItemsToReturn">Maximum number of items that will be returned.
            If set to zero or a negative value, all rows matching the criteria will be returned.</param>
        </member>
        <member name="M:FistCore.Core.EntityBase.FindMatchingAnyCriteria(System.Collections.IList)">
            <summary>
            Selects all rows that match an automatically created filter based on all properties that have been set.
            Predicates are combined by OR operators. Data is sorted if the sorter is set.
            </summary>
            <param name="destination">A collection to fill with entities built from data.</param>
        </member>
        <member name="M:FistCore.Core.EntityBase.FindMatchingAnyCriteria(System.Collections.IList,System.Int32)">
            <summary>
            Selects all rows that match an automatically created filter based on all properties that have been set.
            Predicates are combined by OR operators. Data is sorted if the sorter is set.
            </summary>
            <param name="destination">A collection to fill with entities built from data.</param>
            <param name="maxNumberOfItemsToReturn">Maximum number of items that will be returned.
            If set to zero or a negative value, all rows matching criteria will be returned.</param>
        </member>
        <member name="M:FistCore.Core.EntityBase.Update(FistCore.Core.IDbColumn,System.Object,System.Object)">
            <summary>
            Updates all rows that match the filter criteria.
            </summary>
            <param name="column">Column whose value must be equal to the given old value to be updated.</param>
            <param name="oldValue">Old value of the column. May be <b>null</b>.</param>
            <param name="newValue">New value of the column. May be <b>null</b>.</param>
            <returns>Number of rows affected.</returns>
            <remarks>Updates the values in the specified column. Old value is changed to new value.
            Often used to update a foreign key column.</remarks>
            <example>
            The following example updates ReportsTo field in the Employees table. An old value is changed to a new one.
            <code>
            public void ChangeBoss(int oldBossId, int newBossId)
            {
            	EmployeesEntity emp = new EmployeesEntity();
            	emp.Update(emp.Table.ReportsTo, oldBossId, newBossId);
            }
            </code>
            </example>
        </member>
        <member name="M:FistCore.Core.EntityBase.Update(FistCore.Core.SearchCondition)">
             <summary>
             Updates all rows that match the filter criteria.
             </summary>
             <param name="filter">The search condition which limits the number of rows that are updated.
             Generates exception if <b>null</b> or an empty SearchCondition is passed as an argument.</param>
             <returns>Number of rows affected.</returns>
             <remarks><p>Updates all rows that match the given filter with the values contained in this entity.
             The members that haven't been set are excluded from the SET list which means that NULLs
             cannot be set with this method.</p>
             <p>At least one member must be set or an exception is thrown.</p></remarks>
             <example>
             The following example updates rows in the table Employees. All employees who previously reported to
             the old boss will now report to the new boss. They are all moved to another office and will receive
             new phone extension.
             <code>
             public void ChangeBossAndPhone(int oldBossId, int newBossId, string newPhoneExtension)
             {
             	EmployeesEntity emp = new EmployeesEntity();
            
             	// Set the new values.
             	emp.ReportsTo = newBossId;
             	emp.Extension = newPhoneExtension;
            
             	// Update only the employees who previously reported to the old boss.
             	emp.Update(new SearchCondition(PredicateFactory.Compare(emp.Table.ReportsTo,ComparisonOperator.Equal, oldBossId)));
             }
             </code>
             </example>
        </member>
        <member name="M:FistCore.Core.EntityBase.Update(FistCore.Core.UpdateList,FistCore.Core.SearchCondition)">
             <summary>
             Updates all rows that match the filter criteria.
             </summary>
             <param name="setExpressions">The list of columns to be updated and expressions that compute/contain
             the new values. Throws exception if <b>null</b> or an empty UpdateList is passed as an argument.</param>
             <param name="filter">The search condition which limits the number of rows that are updated.
             Throws exception if <b>null</b> or an empty SearchCondition is passed as an argument.</param>
             <returns>Number of rows affected.</returns>
             <remarks>Updates all rows in the table that match the specified filter with values/expressions in the given SET list.</remarks>
             <example>
             The following example updates rows in the table Employees. Field ReportsTo will be set to <b>null</b> for specified rows.
             <code>
             public void SetBossToNull(int[] employees)
             {
             	// IN predicate expects an array of objects.
             	// int[] must be converted to object[]
             	object[] oEmployeeIds = new object[employees.Length];
             	employees.CopyTo(oEmployeeIds, 0);
            
             	// Employees whose IDs are in the given array will report to no one.
             	EmployeesEntity emp = new EmployeesEntity();
             	UpdateList setBossToNull = new UpdateList(emp.Table.ReportsTo, null);
             	SearchCondition employeesInArray = new SearchCondition(PredicateFactory.In(emp.Table.EmployeeID, oEmployeeIds));
             	emp.Update(setBossToNull, employeesInArray);
             }
             </code>
             </example>
        </member>
        <member name="M:FistCore.Core.EntityBase.Count(FistCore.Core.IDbColumn,System.Object)">
            <summary>
            Counts all rows in the entity's parent table that match the filter criteria.
            </summary>
            <param name="column">Column whose value must be equal to the given value to be included in the count.</param>
            <param name="value">Value. May be <b>null</b>.</param>
            <returns>Number of rows that match the filter.</returns>
            <remarks>The method creates a <see cref="T:FistCore.Core.SearchCondition"/> that compares the specified column to
            the given value. Only the rows where the specified column matches the given value are counted.</remarks>
            <example>
            The following example returns the number of employees that live in New York.
            <code>
            public int CountNewYorkers()
            {
            	EmployeesEntity emp = new EmployeesEntity();
            	int count = emp.Count(emp.Table.City, "New York");
            	return count;
            }
            </code>
            </example>
        </member>
        <member name="M:FistCore.Core.EntityBase.Count(FistCore.Core.RelationBucket,FistCore.Core.SearchCondition)">
             <summary>
             Counts all rows in the entity's parent table that match the filter criteria.
             </summary>
             <param name="relations">Relations. May be <b>null</b> if the filter doesn't use other tables.</param>
             <param name="filter">The search condition which restricts the rows counted.</param>
             <returns>Number of rows that match the filter.</returns>
             <example>
             The following example uses the Count method that allows advanced filtering using RelationBucket
             and SearchCondition objects. It returns the number of employees that are in charge of the New York territory.
             <code>
             public int CountEmployeesInChargeOfNewYorkTerritory()
             {
             	EmployeesEntity emp = new EmployeesEntity();
            
             	// Create a relation between Employees and EmployeeTerritories tables.
             	// Employees is a parent table.
             	// EmployeeTerritories is a child table.
             	// EmployeeTerritories.EmployeeID is a foreign key.
             	EmployeeTerritoriesMeta empTerritories = new EmployeeTerritoriesMeta();
             	RelationBucket relations = new RelationBucket();
             	relations.Add(new DbRelation(emp.Table, empTerritories, empTerritories.EmployeeID));
            
             	// Create a search condition with a single predicate.
             	// Comparisson predicate compares TerritoryID field to given value (New York ID)
             	// using the specified comparison operator ("=").
             	SearchCondition territoryIdEqualsNy = new SearchCondition();
             	territoryIdEqualsNy.Add(PredicateFactory.Compare(empTerritories.TerritoryID,ComparisonOperator.Equal, "10019"));
            
             	// Count all employees that are in charge of the New York territory.
             	int count = emp.Count(relations, territoryIdEqualsNy);
             	return count;
             }
             </code>
             </example>
        </member>
        <member name="M:FistCore.Core.EntityBase.Max(FistCore.Core.IDbColumn)">
            <summary>
            Retrieves the maximum value in the given column.
            </summary>
            <param name="column">Column. Must belong to the current entity's table.</param>
            <returns>Maximum value in the given column. <see cref="F:System.DBNull.Value"/> if table doesn't contain any rows or
            if all rows have a <b>null</b> value in the specified field.</returns>
        </member>
        <member name="M:FistCore.Core.EntityBase.Max(FistCore.Core.IDbColumn,FistCore.Core.RelationBucket,FistCore.Core.SearchCondition)">
            <summary>
            Retrieves the maximum value in the given column.
            </summary>
            <param name="column">Column. Must belong to the current entity's table.</param>
            <param name="relations">Relations. May be <b>null</b> if the filter doesn't use other tables.</param>
            <param name="filter">The search condition which restricts the rows included.</param>
            <returns>Maximum value in the given column. <see cref="F:System.DBNull.Value"/> if table doesn't contain any rows or
            if all rows that match the criteria have a <b>null</b> value in the specified field.</returns>
        </member>
        <member name="M:FistCore.Core.EntityBase.Min(FistCore.Core.IDbColumn)">
            <summary>
            Retrieves the minimum value in the given column.
            </summary>
            <param name="column">Column. Must belong to the current entity's table.</param>
            <returns>Minimum value in the given column. <see cref="F:System.DBNull.Value"/> if table doesn't contain any rows or
            if all rows have a <b>null</b> value in the specified field.</returns>
        </member>
        <member name="M:FistCore.Core.EntityBase.Min(FistCore.Core.IDbColumn,FistCore.Core.RelationBucket,FistCore.Core.SearchCondition)">
            <summary>
            Retrieves the minimum value in the given column.
            </summary>
            <param name="column">Column. Must belong to the current entity's table.</param>
            <param name="relations">Relations. May be <b>null</b> if the filter doesn't use other tables.</param>
            <param name="filter">The search condition which restricts the rows included.</param>
            <returns>Minimum value in the given column. <see cref="F:System.DBNull.Value"/> if table doesn't contain any rows or
            if all rows that match the criteria have a <b>null</b> value in the specified field.</returns>
        </member>
        <member name="M:FistCore.Core.EntityBase.Sum(FistCore.Core.IDbColumn)">
            <summary>
            Retrieves the sum of the values in the given column.
            </summary>
            <param name="column">Column. Must be a numeric column that belongs to the current entity's table.</param>
            <returns>The sum of the values in the given column. <see cref="F:System.DBNull.Value"/> if table doesn't contain any rows or
            if all rows have a <b>null</b> value in the specified field.</returns>
            <remarks>SUM can be used with numeric columns only. Null values are ignored.</remarks>
        </member>
        <member name="M:FistCore.Core.EntityBase.Sum(FistCore.Core.IDbColumn,FistCore.Core.RelationBucket,FistCore.Core.SearchCondition)">
            <summary>
            Retrieves the sum of the values in the given column.
            </summary>
            <param name="column">Column. Must be a numeric column that belongs to the current entity's table.</param>
            <param name="relations">Relations. May be <b>null</b> if the filter doesn't use other tables.</param>
            <param name="filter">The search condition which restricts the rows included.</param>
            <returns>The sum of the values in the given column. <see cref="F:System.DBNull.Value"/>if table doesn't contain any rows or
            if all rows that match the criteria have a <b>null</b> value in the specified field.</returns>
            <remarks>SUM can be used with numeric columns only. Null values are ignored.</remarks>
        </member>
        <member name="M:FistCore.Core.EntityBase.Avg(FistCore.Core.IDbColumn)">
            <summary>
            Retrieves the average of the values in the given column.
            </summary>
            <param name="column">Column. Must be a numeric column that belongs to the current entity's table.</param>
            <returns>The average of the values in the given column. <see cref="F:System.DBNull.Value"/> if table doesn't contain any rows or
            if all rows that match the criteria have a <b>null</b> value in the specified field.</returns>
            <remarks>AVG can be used with numeric columns only. Null values are ignored.</remarks>
        </member>
        <member name="M:FistCore.Core.EntityBase.Avg(FistCore.Core.IDbColumn,FistCore.Core.RelationBucket,FistCore.Core.SearchCondition)">
            <summary>
            Retrieves the average of the values in the given column.
            </summary>
            <param name="column">Column. Must be a numeric column that belongs to the current entity's table.</param>
            <param name="relations">Relations. May be <b>null</b> if the filter doesn't use other tables.</param>
            <param name="filter">The search condition which restricts the rows included.</param>
            <returns>The average of the values in the given column. <see cref="F:System.DBNull.Value"/> if table doesn't contain any rows or
            if all rows that match the criteria have a <b>null</b> value in the specified field.</returns>
            <remarks>AVG can be used with numeric columns only. Null values are ignored.</remarks>
        </member>
        <member name="M:FistCore.Core.EntityBase.SelectOne(System.Boolean)">
             <summary>
             Selects one existing entity from the database based on the Primary Key and populates entity with the retrieved data.
             </summary>
             <param name="fetchParentEntities">Indicates whether the parent entities defined by the foreign keys
             in the acompanying IDbTable class are to be fetched.</param>
             <returns>True if select succeeded; false if primary key is not defined for this table,
             if the primary key values are not set or if the entity does not exist.</returns>
             <remarks><p>Parent entities are fetched using the same open connection.</p>
             <p>When <c>fetchParentEntities</c> is set to <b>false</b>, the method behavior is the same
             as that of the SelectOne method without parameters.</p></remarks>
             <example>
             The following example fetches employee and its parent entities.
             <code>
             public void DisplayEmployeeAndHisManager(int employeeId)
             {
             	EmployeesEntity employee = new EmployeesEntity();
             	employee.EmployeeID = employeeId;
            
             	// SelectOne will select the employee and his manager defined by the ReportsTo field.
             	// Both entities are fetched using the same connection.
             	bool employeeExists = employee.SelectOne(true);
            
             	if (employeeExists)
             	{
             		// Manager has already been fetched with the SelectOne method.
             		// EmployeesSuperior getter returns the fetched/cached instance.
             		// If <b>false</b> had been passed as the argument of the SelectOne method then
             		// the getter would first have to fetch the manager from the database.
             		// The fetched instance is used until the FK fields (ReportsTo property) are changed.
             		EmployeesEntity manager = employee.EmployeesSuperior;
             		string managerData;
             		if (manager != null)
             			managerData = "Manager: " + manager.FirstName + " " + manager.LastName;
             		else
             			managerData = "Manager: N/A";
            
             		string employeeData = "Employee: " + employee.FirstName + " " + employee.LastName;
            
             		MessageBox.Show(employeeData + Environment.NewLine + managerData);
             	}
             	else
             	{
             		MessageBox.Show("Specified employee doesn't exist.");
             	}
             }
             </code>
             </example>
        </member>
        <member name="M:FistCore.Core.EntityBase.SelectOne(FistCore.Core.DbRelation[])">
            <summary>
            Selects one existing entity from the database based on the Primary Key and populates entity with the retrieved data.
            </summary>
            <param name="parentsToFetch">Relations (foreign keys) to parents which are to be fetched. Child table
            of the given FK must be the current entity's table; otherwise an exception is generated.</param>
            <returns>True if select succeeded; false otherwise.</returns>
        </member>
        <member name="M:FistCore.Core.EntityBase.FetchParent(FistCore.Core.DbRelation)">
            <summary>
            Fetches a parent entity defined by the foreign key from the data source and stores in into current entity.
            </summary>
            <param name="foreignKey">FK. Child table of the given FK must be the current entity's table;
            otherwise an exception is generated.</param>
            <returns>Parent entity. Parent entity. <b>Null</b> if the FK fields haven't been set or if the parent entity with the given key values doesn't exist.</returns>
            <remarks>Entity members are affected only if the select operation succeeded.</remarks>
        </member>
        <member name="M:FistCore.Core.EntityBase.FetchAllParents">
            <summary>
            Fetches all parent entities defined by the foreign keys in the acompanying IDbTable class and stores them into current entity.
            </summary>
            <returns>Parent entities. Some may be <b>null</b> if the required FK fields haven't been set or if the entities
            with the given key values don't exist.</returns>
        </member>
        <member name="M:FistCore.Core.EntityBase.FetchParents(FistCore.Core.DbRelation[])">
            <summary>
            Fetches parent entities defined by the given relations from the data source and stores them into current entity.
            </summary>
            <param name="parentsToFetch">Relations (foreign keys) to parents which are to be fetched. Child table
            of the given FK must be the current entity's table; otherwise an exception is generated.</param>
            <returns>Parent entities. Some may be <b>null</b> if the required FK fields haven't been set or if the entities
            with the given key values don't exist.</returns>
            <remarks>Preffer using this method instead of a sequence of <see cref="M:FistCore.Core.EntityBase.FetchParent(FistCore.Core.DbRelation)"/> method
            invocations. Future optimizers will have a better chance to speed up data access when they know in ahead
            what data is to be fetched.</remarks>
        </member>
        <member name="M:FistCore.Core.EntityBase.FetchChildren(System.Collections.IList,FistCore.Core.DbRelation,FistCore.Core.OrderByClause)">
             <summary>
             Fetches child entities that reference the current entity.
             </summary>
             <param name="destination">A collection to fill with entities built from data. Will contain entities from the child table whose foreign key matches this entity's primary key.</param>
             <param name="relation">Relation between the current entity's table and another (child) table.
             Parent table of the given relation must be this entity's table; otherwise an exception is generated.</param>
             <param name="orderBy">Specifies the order in which the entities are added to output collection.</param>
             <remarks>An exception is generated if the current entity's primary key value is not set.</remarks>
             <example>
             The following example fetches a region and all territories it contains.
             <code>
             RegionEntity easternRegion = new RegionEntity();
             easternRegion.RegionID = 1;
             EntityDAO daoRegions = new EntityDAO(easternRegion);
            
             // Parent (region) and children (territories) data are fetched using the same connection.
             daoRegions.ConnectionProvider.OpenConnection();
            
             // Fetch region and children defined by the Territories.RegionID foreign key.
             daoRegions.SelectOne();
             var easternTerritories = new EntityCollection&lt;EmployeesEntity, EmployeesMeta&gt;();
             daoRegions.FetchChildren(easternTerritories, new TerritoriesMeta().FK_RegionID);
            
             // Explicitly close the connection that was openned manually and return it to the connection pool.
             daoRegions.ConnectionProvider.CloseConnection();
             </code>
             </example>
        </member>
        <member name="M:FistCore.Core.EntityBase.FetchChildren(System.Collections.IList,FistCore.Core.DbRelation,FistCore.Core.IDbColumn,System.Object,FistCore.Core.OrderByClause)">
            <summary>
            Fetches child entities that reference the current entity.
            </summary>
            <param name="destination">A collection to fill with entities built from data. Will contain entities from the child table whose foreign key matches this entity's primary key.</param>
            <param name="relation">Relation between the current entity's table and another (child) table.
            Parent table of the given relation must be this entity's table; otherwise an exception is generated.</param>
            <param name="childField">Child field whose value must be equal the given value to be selected.</param>
            <param name="childFieldValue">Value of the given child field. May be <b>null</b>.</param>
            <param name="orderBy">Specifies the order in which the entities are added to output collection.</param>
            <remarks>The method creates a <see cref="T:FistCore.Core.SearchCondition"/> that compares the specified column to
            the given value. Only the child rows where the specified column matches the given value are selected.
            Very often database is designed so that the child entities are not deleted from the database but are
            marked as deleted instead. This method may be used when only child rows with a specific status value
            (eg. STATUS = 1) are to be fetched.</remarks>
        </member>
        <member name="M:FistCore.Core.EntityBase.FetchChildren(System.Collections.IList,FistCore.Core.ManyToManyRelation,FistCore.Core.OrderByClause)">
             <summary>
             Fetches child entities that reference the current entity.
             </summary>
             <param name="destination">A collection to fill with entities built from data. Will contain entities from the child table whose foreign key matches this entity's primary key.</param>
             <param name="mnRelation">Many-to-many relation. Current entity's table acts as a parent table,
             the other primary table in the relation acts as a child. Resursive M:N relations are not allowed.</param>
             <param name="orderBy">Specifies the order in which the entities are added to output collection.</param>
             <remarks>When a single database table is used as both the first and the second primary table of an M:N
             relation then it must be explicitly specified which one is used as a parent and which one as a child table.
             This can be accomplished by using one of the overloaded FetchChildren methods that accept a <see cref="T:FistCore.Core.PrimaryTableIndex"/> parameter.</remarks>
             <example>
             The following example fetches children entities using a many-to-many relation.
             <code>
             public EntityCollection&lt;EmployeesEntity, EmployeesMeta&gt; FetchEmployeeTerritories(EmployeesEntity employee)
             {
             	// Fetch territories that the given employee is in charge of.
            
             	// An employee can be in charge of multiple territories.
             	// Multiple employees can be in charge of a single territory.
             	// Employees and Territories table are related by creating junction rows in EmployeeTerritories table.
             	// EmployeeTerritories table has a primary key which is composed of two foreign keys.
             	// These two one-to-many (1:N) relations can be modeled as a one many-to-many (M:N) relation.
            
             	EmployeeTerritoriesMeta junctionTable = new EmployeeTerritoriesMeta();
             	ManyToManyRelation mnRelation = new ManyToManyRelation(junctionTable.FK_EmployeeID, junctionTable.FK_TerritoryID);
            
            		EntityDAO daoEmployees = new EntityDAO(employee);
            		var territories = new EntityCollection&lt;EmployeesEntity, EmployeesMeta&gt;();
             	daoEmployees.FetchChildren(territories, mnRelation);
             	return territories;
             }
             </code>
             </example>
        </member>
        <member name="M:FistCore.Core.EntityBase.FetchChildren(System.Collections.IList,FistCore.Core.ManyToManyRelation,FistCore.Core.PrimaryTableIndex,FistCore.Core.OrderByClause)">
            <summary>
            Fetches child entities that reference the current entity.
            </summary>
            <param name="destination">A collection to fill with entities built from data. Will contain entities from the child table whose foreign key matches this entity's primary key.</param>
            <param name="mnRelation">Many-to-many relation. Current entity's table acts as a parent table,
            the other primary table in the relation acts as a child. May be recursive.</param>
            <param name="parent">Indicates which of the two primary tables in the M:N relation acts as a parent.</param>
            <param name="orderBy">Specifies the order in which the entities are added to output collection.</param>
            <remarks>When a single database table is used as both the first and the second primary table of an M:N
            relation then it must be explicitly specified which one is used as a parent and which one as a child table.</remarks>
        </member>
        <member name="M:FistCore.Core.EntityBase.FetchChildren(System.Collections.IList,FistCore.Core.ManyToManyRelation,FistCore.Core.IDbColumn,System.Object,FistCore.Core.OrderByClause)">
            <summary>
            Fetches child entities that reference the current entity.
            </summary>
            <param name="destination">A collection to fill with entities built from data. Will contain entities from the child table whose foreign key matches this entity's primary key.</param>
            <param name="mnRelation">Many-to-many relation. Current entity's table acts as a parent table,
            the other primary table in the relation acts as a child. Resursive M:N relations are not allowed.</param>
            <param name="childField">Child field whose value must be equal the given value to be selected.</param>
            <param name="childFieldValue">Value of the given child field. May be <b>null</b>.</param>
            <param name="orderBy">Specifies the order in which the entities are added to output collection.</param>
            <remarks><p>The method creates a <see cref="T:FistCore.Core.SearchCondition"/> that compares the specified column to
            the given value. Only the child rows where the specified column matches the given value are selected.
            Very often database is designed so that the child entities are not deleted from the database but are
            marked as deleted instead. This method may be used when only child rows with a specific status value
            (eg. STATUS = 1) are to be fetched. In addition, a SearchCondition may be created which filters out rows from the junction table.
            See <see cref="P:FistCore.Core.ManyToManyRelation.JunctionRowsFilter"/> for more information.</p>
            <p>When a single database table is used as both the first and the second primary table of an M:N
            relation then it must be explicitly specified which one is used as a parent and which one as a child table.
            This can be accomplished by using one of the overloaded FetchChildren methods that accept a <see cref="T:FistCore.Core.PrimaryTableIndex"/> parameter.</p></remarks>
        </member>
        <member name="M:FistCore.Core.EntityBase.FetchChildren(System.Collections.IList,FistCore.Core.ManyToManyRelation,FistCore.Core.PrimaryTableIndex,FistCore.Core.IDbColumn,System.Object,FistCore.Core.OrderByClause)">
            <summary>
            Fetches child entities that reference the current entity.
            </summary>
            <param name="destination">A collection to fill with entities built from data. Will contain entities from the child table whose foreign key matches this entity's primary key.</param>
            <param name="mnRelation">Many-to-many relation. Current entity's table acts as a parent table,
            the other primary table in the relation acts as a child. May be recursive.</param>
            <param name="parent">Indicates which of the two primary tables in the M:N relation acts as a parent.</param>
            <param name="childField">Child field whose value must be equal the given value to be selected.</param>
            <param name="childFieldValue">Value of the given child field. May be <b>null</b>.</param>
            <param name="orderBy">Specifies the order in which the entities are added to output collection.</param>
            <remarks><p>The method creates a <see cref="T:FistCore.Core.SearchCondition"/> that compares the specified column to
            the given value. Only the child rows where the specified column matches the given value are selected.
            Very often database is designed so that the child entities are not deleted from the database but are
            marked as deleted instead. This method may be used when only child rows with a specific status value
            (eg. STATUS = 1) are to be fetched. In addition, a SearchCondition may be created which filters out rows
            from the junction table. See <see cref="P:FistCore.Core.ManyToManyRelation.JunctionRowsFilter"/> for more information.</p>
            <p>When a single database table is used as both the first and the second primary table of an M:N
            relation then it must be explicitly specified which one is used as a parent and which one as a child table.</p></remarks>
        </member>
        <member name="M:FistCore.Core.EntityBase.FetchChildren(System.Collections.IList[],FistCore.Core.DbRelation[])">
            <summary>
            Fetches child entities from multiple tables that reference the current entity.
            </summary>
            <param name="destinationCollections">Collections to fill with entities built from data. Will contain entities from the child table whose foreign key matches this entity's primary key.</param>
            <param name="childrenToFetch">Relations between the current entity's table and child tables. The count and order must match collections.</param>
            <remarks>Preffer using this method instead of a sequence of <see cref="M:FistCore.Core.EntityBase.FetchChildren(FistCore.Core.DbRelation)"/>
            method invocations. Future optimizers will have a better chance to speed up data access when they know in ahead
            what data is to be fetched.</remarks>
        </member>
        <member name="M:FistCore.Core.EntityBase.FetchChildren``1(FistCore.Core.DbRelation,FistCore.Core.OrderByClause)">
             <summary>
             Fetches child entities that reference the current entity.
             </summary>
             <param name="relation">Relation between the current entity's table and another (child) table.
             Parent table of the given relation must be this entity's table; otherwise an exception is generated.</param>
             <param name="orderBy">Specifies the order in which the entities are added to output collection.</param>
             <returns>Entities from the child table whose foreign key matches this entity's primary key.</returns>
             <remarks>An exception is generated if the current entity's primary key value is not set.</remarks>
             <example>
             The following example fetches a region and all territories it contains.
             <code>
             RegionEntity easternRegion = new RegionEntity();
             easternRegion.RegionID = 1;
             EntityDAO daoRegions = new EntityDAO(easternRegion);
            
             // Parent (region) and children (territories) data are fetched using the same connection.
             daoRegions.ConnectionProvider.OpenConnection();
            
             // Fetch region and children defined by the Territories.RegionID foreign key.
             daoRegions.SelectOne();
             var easternTerritories = daoRegions.FetchChildren&lt;List&lt;TerritoriesEntity&gt;&gt;(new TerritoriesMeta().FK_RegionID, null);
            
             // Explicitly close the connection that was openned manually and return it to the connection pool.
             daoRegions.ConnectionProvider.CloseConnection();
             </code>
             </example>
        </member>
        <member name="M:FistCore.Core.EntityBase.FetchChildren``1(FistCore.Core.DbRelation,FistCore.Core.IDbColumn,System.Object,FistCore.Core.OrderByClause)">
            <summary>
            Fetches child entities that reference the current entity.
            </summary>
            <param name="relation">Relation between the current entity's table and another (child) table.
            Parent table of the given relation must be this entity's table; otherwise an exception is generated.</param>
            <param name="childField">Child field whose value must be equal the given value to be selected.</param>
            <param name="childFieldValue">Value of the given child field. May be <b>null</b>.</param>
            <param name="orderBy">Specifies the order in which the entities are added to output collection.</param>
            <returns>Entities from the child table whose foreign key matches this entity's primary key.</returns>
            <remarks>The method creates a <see cref="T:FistCore.Core.SearchCondition"/> that compares the specified column to
            the given value. Only the child rows where the specified column matches the given value are selected.
            Very often database is designed so that the child entities are not deleted from the database but are
            marked as deleted instead. This method may be used when only child rows with a specific status value
            (eg. STATUS = 1) are to be fetched.</remarks>
        </member>
        <member name="M:FistCore.Core.EntityBase.FetchChildren``1(FistCore.Core.ManyToManyRelation,FistCore.Core.OrderByClause)">
             <summary>
             Fetches child entities that reference the current entity.
             </summary>
             <param name="mnRelation">Many-to-many relation. Current entity's table acts as a parent table,
             the other primary table in the relation acts as a child. Resursive M:N relations are not allowed.</param>
             <param name="orderBy">Specifies the order in which the entities are added to output collection.</param>
             <returns>Records form the child table that reference the current entity through junction table of the M:N relation.</returns>
             <remarks>When a single database table is used as both the first and the second primary table of an M:N
             relation then it must be explicitly specified which one is used as a parent and which one as a child table.
             This can be accomplished by using one of the overloaded FetchChildren methods that accept a <see cref="T:FistCore.Core.PrimaryTableIndex"/> parameter.</remarks>
             <example>
             The following example fetches children entities using a many-to-many relation.
             <code>
             public EntityCollection&lt;TerritoriesEntity, TerritoriesMeta&gt; FetchTerritoriesForEmployee(EmployeesEntity employee)
             {
             	// Fetch territories that the given employee is in charge of.
            
             	// An employee can be in charge of multiple territories.
             	// Multiple employees can be in charge of a single territory.
             	// Employees and Territories table are related by creating junction rows in EmployeeTerritories table.
             	// EmployeeTerritories table has a primary key which is composed of two foreign keys.
             	// These two one-to-many (1:N) relations can be modeled as a one many-to-many (M:N) relation.
            
             	EmployeeTerritoriesMeta junctionTable = new EmployeeTerritoriesMeta();
             	ManyToManyRelation mnRelation = new ManyToManyRelation(junctionTable.FK_EmployeeID, junctionTable.FK_TerritoryID);
            
            		EntityDAO daoEmployees = new EntityDAO(employee);
             	return daoEmployees.FetchChildren&lt;EntityCollection&lt;TerritoriesEntity, TerritoriesMeta&gt;&gt;(mnRelation, null);
             }
             </code>
             </example>
        </member>
        <member name="M:FistCore.Core.EntityBase.FetchChildren``1(FistCore.Core.ManyToManyRelation,FistCore.Core.PrimaryTableIndex,FistCore.Core.OrderByClause)">
            <summary>
            Fetches child entities that reference the current entity.
            </summary>
            <param name="mnRelation">Many-to-many relation. Current entity's table acts as a parent table,
            the other primary table in the relation acts as a child. May be recursive.</param>
            <param name="parent">Indicates which of the two primary tables in the M:N relation acts as a parent.</param>
            <param name="orderBy">Specifies the order in which the entities are added to output collection.</param>
            <returns>Records form the child table that reference the current entity through junction table of the M:N relation.</returns>
            <remarks>When a single database table is used as both the first and the second primary table of an M:N
            relation then it must be explicitly specified which one is used as a parent and which one as a child table.</remarks>
        </member>
        <member name="M:FistCore.Core.EntityBase.FetchChildren``1(FistCore.Core.ManyToManyRelation,FistCore.Core.IDbColumn,System.Object,FistCore.Core.OrderByClause)">
            <summary>
            Fetches child entities that reference the current entity.
            </summary>
            <param name="mnRelation">Many-to-many relation. Current entity's table acts as a parent table,
            the other primary table in the relation acts as a child. Resursive M:N relations are not allowed.</param>
            <param name="childField">Child field whose value must be equal the given value to be selected.</param>
            <param name="childFieldValue">Value of the given child field. May be <b>null</b>.</param>
            <param name="orderBy">Specifies the order in which the entities are added to output collection.</param>
            <returns>Records form the child table that reference the current entity through junction table of the M:N relation.</returns>
            <remarks><p>The method creates a <see cref="T:FistCore.Core.SearchCondition"/> that compares the specified column to
            the given value. Only the child rows where the specified column matches the given value are selected.
            Very often database is designed so that the child entities are not deleted from the database but are
            marked as deleted instead. This method may be used when only child rows with a specific status value
            (eg. STATUS = 1) are to be fetched. In addition, a SearchCondition may be created which filters out rows from the junction table.
            See <see cref="P:FistCore.Core.ManyToManyRelation.JunctionRowsFilter"/> for more information.</p>
            <p>When a single database table is used as both the first and the second primary table of an M:N
            relation then it must be explicitly specified which one is used as a parent and which one as a child table.
            This can be accomplished by using one of the overloaded FetchChildren methods that accept a <see cref="T:FistCore.Core.PrimaryTableIndex"/> parameter.</p></remarks>
        </member>
        <member name="M:FistCore.Core.EntityBase.FetchChildren``1(FistCore.Core.ManyToManyRelation,FistCore.Core.PrimaryTableIndex,FistCore.Core.IDbColumn,System.Object,FistCore.Core.OrderByClause)">
            <summary>
            Fetches child entities that reference the current entity.
            </summary>
            <param name="mnRelation">Many-to-many relation. Current entity's table acts as a parent table,
            the other primary table in the relation acts as a child. May be recursive.</param>
            <param name="parent">Indicates which of the two primary tables in the M:N relation acts as a parent.</param>
            <param name="childField">Child field whose value must be equal the given value to be selected.</param>
            <param name="childFieldValue">Value of the given child field. May be <b>null</b>.</param>
            <param name="orderBy">Specifies the order in which the entities are added to output collection.</param>
            <returns>Records form the child table that reference the current entity through junction table of the M:N relation.</returns>
            <remarks><p>The method creates a <see cref="T:FistCore.Core.SearchCondition"/> that compares the specified column to
            the given value. Only the child rows where the specified column matches the given value are selected.
            Very often database is designed so that the child entities are not deleted from the database but are
            marked as deleted instead. This method may be used when only child rows with a specific status value
            (eg. STATUS = 1) are to be fetched. In addition, a SearchCondition may be created which filters out rows
            from the junction table. See <see cref="P:FistCore.Core.ManyToManyRelation.JunctionRowsFilter"/> for more information.</p>
            <p>When a single database table is used as both the first and the second primary table of an M:N
            relation then it must be explicitly specified which one is used as a parent and which one as a child table.</p></remarks>
        </member>
        <member name="M:FistCore.Core.EntityBase.FetchChildren(FistCore.Core.DbRelation)">
             <summary>
             Fetches child entities that reference the current entity.
             </summary>
             <param name="relation">Relation between the current entity's table and another (child) table.
             Parent table of the given relation must be this entity's table; otherwise an exception is generated.</param>
             <returns>Rows from the child table whose foreign key matches this entity's primary key.</returns>
             <remarks>An exception is generated if the current entity's primary key value is not set.</remarks>
             <example>
             The following example fetches a region and all territories it contains.
             <code>
             RegionEntity easternRegion = new RegionEntity();
             easternRegion.RegionID = 1;
            
             // Parent (region) and children (territories) data are fetched using the same connection.
             easternRegion.ConnectionProvider.OpenConnection();
            
             // Fetch region and children defined by the Territories.RegionID foreign key.
             easternRegion.SelectOne();
             DataTable easternTerritories = easternRegion.FetchChildren(new TerritoriesMeta().FK_RegionID);
            
             // Explicitly close the connection that was openned manually and return it to the connection pool.
             easternRegion.ConnectionProvider.CloseConnection();
             </code>
             </example>
        </member>
        <member name="M:FistCore.Core.EntityBase.FetchChildren(FistCore.Core.DbRelation,FistCore.Core.IDbColumn,System.Object)">
            <summary>
            Fetches child entities that reference the current entity.
            </summary>
            <param name="relation">Relation between the current entity's table and another (child) table.
            Parent table of the given relation must be this entity's table; otherwise an exception is generated.</param>
            <param name="childField">Child field whose value must be equal the given value to be selected.</param>
            <param name="childFieldValue">Value of the given child field. May be <b>null</b>.</param>
            <returns>Rows from the child table that reference the current entity and match the given criteria.</returns>
            <remarks>The method creates a <see cref="T:FistCore.Core.SearchCondition"/> that compares the specified column to
            the given value. Only the child rows where the specified column matches the given value are selected.
            Very often database is designed so that the child entities are not deleted from the database but are
            marked as deleted instead. This method may be used when only child rows with a specific status value
            (eg. STATUS = 1) are to be fetched.</remarks>
        </member>
        <member name="M:FistCore.Core.EntityBase.FetchChildren(FistCore.Core.ManyToManyRelation)">
             <summary>
             Fetches child entities that reference the current entity.
             </summary>
             <param name="mnRelation">Many-to-many relation. Current entity's table acts as a parent table,
             the other primary table in the relation acts as a child. Resursive M:N relations are not allowed.</param>
             <returns>Rows form the child table that reference the current entity through junction table of the M:N relation.</returns>
             <remarks>When a single database table is used as both the first and the second primary table of an M:N
             relation then it must be explicitly specified which one is used as a parent and which one as a child table.
             This can be accomplished by using one of the overloaded FetchChildren methods that accept a <see cref="T:FistCore.Core.PrimaryTableIndex"/> parameter.</remarks>
             <example>
             The following example fetches children entities using a many-to-many relation.
             <code>
             public DataTable FetchEmployeeTerritories(EmployeesEntity employee)
             {
             	// Fetch territories that the given employee is in charge of.
            
             	// An employee can be in charge of multiple territories.
             	// Multiple employees can be in charge of a single territory.
             	// Employees and Territories table are related by creating junction rows in EmployeeTerritories table.
             	// EmployeeTerritories table has a primary key which is composed of two foreign keys.
             	// These two one-to-many (1:N) relations can be modeled as a one many-to-many (M:N) relation.
            
             	EmployeeTerritoriesMeta junctionTable = new EmployeeTerritoriesMeta();
             	ManyToManyRelation mnRelation = new ManyToManyRelation(junctionTable.FK_EmployeeID, junctionTable.FK_TerritoryID);
            
             	DataTable territories = employee.FetchChildren(mnRelation);
             	return territories;
             }
             </code>
             </example>
        </member>
        <member name="M:FistCore.Core.EntityBase.FetchChildren(FistCore.Core.ManyToManyRelation,FistCore.Core.PrimaryTableIndex)">
            <summary>
            Fetches child entities that reference the current entity.
            </summary>
            <param name="mnRelation">Many-to-many relation. Current entity's table acts as a parent table,
            the other primary table in the relation acts as a child. May be recursive.</param>
            <param name="parent">Indicates which of the two primary tables in the M:N relation acts as a parent.</param>
            <returns>Rows form the child table that reference the current entity through junction table of the M:N relation.</returns>
            <remarks>When a single database table is used as both the first and the second primary table of an M:N
            relation then it must be explicitly specified which one is used as a parent and which one as a child table.</remarks>
        </member>
        <member name="M:FistCore.Core.EntityBase.FetchChildren(FistCore.Core.ManyToManyRelation,FistCore.Core.IDbColumn,System.Object)">
            <summary>
            Fetches child entities that reference the current entity.
            </summary>
            <param name="mnRelation">Many-to-many relation. Current entity's table acts as a parent table,
            the other primary table in the relation acts as a child. Resursive M:N relations are not allowed.</param>
            <param name="childField">Child field whose value must be equal the given value to be selected.</param>
            <param name="childFieldValue">Value of the given child field. May be <b>null</b>.</param>
            <returns>Rows form the child table that reference the current entity through
            junction table of the M:N relation and match the given criteria.</returns>
            <remarks><p>The method creates a <see cref="T:FistCore.Core.SearchCondition"/> that compares the specified column to
            the given value. Only the child rows where the specified column matches the given value are selected.
            Very often database is designed so that the child entities are not deleted from the database but are
            marked as deleted instead. This method may be used when only child rows with a specific status value
            (eg. STATUS = 1) are to be fetched. In addition, a SearchCondition may be created which filters out rows from the junction table.
            See <see cref="P:FistCore.Core.ManyToManyRelation.JunctionRowsFilter"/> for more information.</p>
            <p>When a single database table is used as both the first and the second primary table of an M:N
            relation then it must be explicitly specified which one is used as a parent and which one as a child table.
            This can be accomplished by using one of the overloaded FetchChildren methods that accept a <see cref="T:FistCore.Core.PrimaryTableIndex"/> parameter.</p></remarks>
        </member>
        <member name="M:FistCore.Core.EntityBase.FetchChildren(FistCore.Core.ManyToManyRelation,FistCore.Core.PrimaryTableIndex,FistCore.Core.IDbColumn,System.Object)">
            <summary>
            Fetches child entities that reference the current entity.
            </summary>
            <param name="mnRelation">Many-to-many relation. Current entity's table acts as a parent table,
            the other primary table in the relation acts as a child. May be recursive.</param>
            <param name="parent">Indicates which of the two primary tables in the M:N relation acts as a parent.</param>
            <param name="childField">Child field whose value must be equal the given value to be selected.</param>
            <param name="childFieldValue">Value of the given child field. May be <b>null</b>.</param>
            <returns>Rows form the child table that reference the current entity through junction table of the M:N relation.</returns>
            <remarks><p>The method creates a <see cref="T:FistCore.Core.SearchCondition"/> that compares the specified column to
            the given value. Only the child rows where the specified column matches the given value are selected.
            Very often database is designed so that the child entities are not deleted from the database but are
            marked as deleted instead. This method may be used when only child rows with a specific status value
            (eg. STATUS = 1) are to be fetched. In addition, a SearchCondition may be created which filters out rows
            from the junction table. See <see cref="P:FistCore.Core.ManyToManyRelation.JunctionRowsFilter"/> for more information.</p>
            <p>When a single database table is used as both the first and the second primary table of an M:N
            relation then it must be explicitly specified which one is used as a parent and which one as a child table.</p></remarks>
        </member>
        <member name="M:FistCore.Core.EntityBase.FetchChildren(FistCore.Core.DbRelation[])">
            <summary>
            Fetches child entities from multiple tables that reference the current entity.
            </summary>
            <param name="childrenToFetch">Relations between the current entity's table and child tables.</param>
            <returns>One DataTable per relation with child records whose foreign key values match
            the current entity's primary key.</returns>
            <remarks>Preffer using this method instead of a sequence of <see cref="M:FistCore.Core.EntityBase.FetchChildren(FistCore.Core.DbRelation)"/>
            method invocations. Future optimizers will have a better chance to speed up data access when they know in ahead
            what data is to be fetched.</remarks>
        </member>
        <member name="M:FistCore.Core.EntityBase.SelectOne(FistCore.Core.DbRelation[],FistCore.Core.DbRelation[])">
            <summary>
            Selects one existing entity from the database based on the Primary Key and populates entity with the retrieved data.
            </summary>
            <param name="parents">Relations (foreign keys) to parents which are to be fetched and stored in
            the current entity. Child table of the given FK must be the current entity's table; otherwise
            an exception is generated. <b>Nullable.</b>.</param>
            <param name="children">Relations between the current entity's table and child tables. <b>Nullable.</b>.</param>
            <returns>One <see cref="T:FistCore.Core.EntityCollection`2"/> per child relation. Empty collection if child
            relations haven't been specified. <b>Null</b> if select was not succesfull.</returns>
            <remarks>The current entity object is set as a parent for all fetched children.</remarks>
            <example>
            The following example fetches the specified order, employee that created the order, order customer, shipper
            and order details. All parent and child data is retrieved in a single network trip to the database server.
            <code>
            public void FetchOrderWithRelatedEntities(int orderId)
            {
            	OrdersEntity order = new OrdersEntity(orderId);
            	DbRelation[] childrenToFetch = new DbRelation[]{new OrderDetailsMeta().FK_OrderID};
            	EntityCollection[] children = order.SelectOne(order.Table.ForeignKeys, childrenToFetch);
            	// SelectOne returns null if the order with the specified ID doesn't exist in the data-source.
            	OrderDetailsCollection orderDetails = (children != null) ? (OrderDetailsCollection) children[0] : null;
            }
            </code>
            </example>
        </member>
        <member name="M:FistCore.Core.EntityBase.FetchRelatedEntitites(FistCore.Core.DbRelation[],FistCore.Core.DbRelation[])">
            <summary>
            Fetches specified parent and child entities. Parent entities are stored in the current entity.
            </summary>
            <param name="parents">Relations (foreign keys) to parents which are to be fetched. Child table of
            the given FK must be the current entity's table; otherwise an exception is generated. <b>Nullable.</b>.</param>
            <param name="children">Relations between the current entity's table and child tables. <b>Nullable.</b>.</param>
            <returns>One <see cref="T:FistCore.Core.EntityCollection`2"/> per child relation. Empty array if child
            relations haven't been specified.</returns>
            <remarks><p>The current entity object is set as a parent for all fetched children.</p>
            <p>Preffer using this method instead of a sequence of <see cref="M:FistCore.Core.EntityBase.FetchParent(FistCore.Core.DbRelation)"/> and
            <see cref="M:FistCore.Core.EntityBase.FetchChildren(FistCore.Core.DbRelation)"/> methods invocations. Future optimizers will have a better
            chance to speed up data access when they know in ahead what data is to be fetched.</p></remarks>
        </member>
        <member name="M:FistCore.Core.EntityBase.FetchRelatedEntities(FistCore.Core.DbRelation[],FistCore.Core.DbRelation[])">
            <summary>
            Fetches specified parent and child entities. Parent entities are stored in the current entity.
            </summary>
            <param name="parents">Relations (foreign keys) to parents which are to be fetched. Child table of
            the given FK must be the current entity's table; otherwise an exception is generated. <b>Nullable.</b>.</param>
            <param name="children">Relations between the current entity's table and child tables. <b>Nullable.</b>.</param>
            <returns>One <see cref="T:FistCore.Core.EntityCollection`2"/> per child relation. Empty array if child
            relations haven't been specified.</returns>
            <remarks><p>The current entity object is set as a parent for all fetched children.</p>
            <p>Preffer using this method instead of a sequence of <see cref="M:FistCore.Core.EntityBase.FetchParent(FistCore.Core.DbRelation)"/> and
            <see cref="M:FistCore.Core.EntityBase.FetchChildren(FistCore.Core.DbRelation)"/> methods invocations. Future optimizers will have a better
            chance to speed up data access when they know in ahead what data is to be fetched.</p></remarks>
        </member>
        <member name="M:FistCore.Core.EntityBase.SaveCollection(FistCore.Core.IEntityCollection)">
            <summary>
            Persists entities in the collection. Operation (insert, update, delete, nothing) is chosen based on the current <see cref="T:FistCore.Core.EntityState"/>.
            </summary>
            <param name="entitiesToSave">Entities which are to persisted.</param>
            <remarks>Preffer using this method instead of a sequence of <see cref="M:FistCore.Core.EntityBase.Save"/> method invocations.
            Future optimizers will have a better chance to speed up data access when they know in ahead what data is to be saved.</remarks>
        </member>
        <member name="M:FistCore.Core.EntityBase.SaveCollection(FistCore.Core.IEntityCollection,System.Boolean)">
            <summary>
            Persists entities in the collection. Operation (insert, update, delete, nothing) is chosen based on the current <see cref="T:FistCore.Core.EntityState"/>.
            </summary>
            <param name="entitiesToSave">Entities which are to persisted.</param>
            <param name="fetchAutoIdentityValues">Indicates whether auto-identity values assigned to rows by DB are fetched for new/inserted rows.
            Setting this parameter to <b>false</b> may siginificantly improve performance.</param>
            <remarks><para>Preffer using this method instead of a sequence of <see cref="M:FistCore.Core.EntityBase.Save"/> method invocations.
            Future optimizers will have a better chance to speed up data access when they know in ahead what data is to be saved.</para>
            <para>If the <b>fetchAutoIdentityValues</b> parameter is set to <b>false</b> then this method overload will not try to retrieve
            IDs of the inserted records which may yield significantly better performance. If bulk saving for target DBMS is not implemented then
            the logic implemented in <see cref="M:FistCore.Core.EntityBase.SaveCollection(FistCore.Core.IEntityCollection)"/> method overload is used.</para>
            <para>Bulk saving is not used for small batches, ie. when there are less than <b>5</b> new entities because performance gains
            are negligible in these cases.</para></remarks>
        </member>
        <member name="M:FistCore.Core.EntityBase.FetchParentsForCollection(FistCore.Core.IEntityCollection,FistCore.Core.DbRelation)">
             <summary>
             Fetches parent entities defined by the given relation from the data source and stores them into provided child entities.
             </summary>
             <param name="childEntities">Children whose FK properties define which parents are to be fetched.</param>
             <param name="parentsToFetch">FK. Relation to parent table from which parent records are to be fetched.</param>
             <returns>Parents retrieved from the data source.</returns>
             <remarks><p>Child entities with equal FK values will share the same parent object instance (same reference).</p>
             <p>Preffer using this method instead of a sequence of <see cref="M:FistCore.Core.EntityBase.FetchParent(FistCore.Core.DbRelation)"/>
             method invocations for each child entity in the collection. This method is optimized and may yield
             significantly better performance.</p></remarks>
             <example>The following example fetches a collection of entities from Employees table and then
             fetches their parent objects (supervisors) defined by the provided relation.
             <code>
             public EmployeesCollection FetchEmployeesWithSupervisors(params int[] employeeIds)
            {
            		// Fetch requested employees.
            		EmployeesEntity daoEmployees = new EmployeesEntity();
            		SearchCondition whereEmployeeIdIn = new SearchCondition(PredicateFactory.In(daoEmployees.Table.EmployeeID, employeeIds));
            		EmployeesCollection employeesWithSupervisors = (EmployeesCollection)daoEmployees.Select(null, whereEmployeeIdIn);
            
            		// Fetch supervisors, ie. employees to which employees in the collection report to.
            		daoEmployees.FetchParentsForCollection(employeesWithSupervisors, daoEmployees.Table.FK_ReportsTo);
            
            		return employeesWithSupervisors;
            }
             </code>
             </example>
        </member>
        <member name="M:FistCore.Core.EntityBase.FetchParentsForCollection(FistCore.Core.IEntityCollection,FistCore.Core.DbRelation,System.Boolean)">
             <summary>
             Fetches parent entities defined by the given relation from the data source and stores them into provided child entities.
             </summary>
             <param name="childEntities">Children whose FK properties define which parents are to be fetched.</param>
             <param name="parentsToFetch">FK. Relation to parent table from which parent records are to be fetched.</param>
             <param name="shareParentObjects">Indicates if all child entities in the collection will share the same
             parent object instance (same reference). If set to <b>false</b>, a clone of the parent will be created
             for each child entity in the current collection.</param>
             <returns>Parents retrieved from the data source.</returns>
             <remarks>Preffer using this method instead of a sequence of <see cref="M:FistCore.Core.EntityBase.FetchParent(FistCore.Core.DbRelation)"/>
             method invocations for each child entity in the collection. This method is optimized and may yield
             significantly better performance.</remarks>
             <example>The following example fetches a collection of entities from Employees table and then
             fetches their parent objects (supervisors) defined by the provided relation.
             <code>
             public EmployeesCollection FetchEmployeesWithSupervisors(params int[] employeeIds)
            {
            		// Fetch requested employees.
            		EmployeesEntity daoEmployees = new EmployeesEntity();
            		SearchCondition whereEmployeeIdIn = new SearchCondition(PredicateFactory.In(daoEmployees.Table.EmployeeID, employeeIds));
            		EmployeesCollection employeesWithSupervisors = (EmployeesCollection)daoEmployees.Select(null, whereEmployeeIdIn);
            
            		// Fetch supervisors, ie. employees to which employees in the collection report to.
            		daoEmployees.FetchParentsForCollection(employeesWithSupervisors, daoEmployees.Table.FK_ReportsTo);
            
            		return employeesWithSupervisors;
            }
             </code>
             </example>
        </member>
        <member name="M:FistCore.Core.EntityBase.FetchChildrenForCollection(FistCore.Core.IEntityCollection,FistCore.Core.DbRelation)">
             <summary>
             Fetches children which belong to provided parent entities as defined by the given relation.
             </summary>
             <param name="parentEntities">Parent entities referenced by children which are to be fetched.</param>
             <param name="relation">FK. Relation between parent and child tables.</param>
             <returns>Array of child collections retrieved from the data source. Child collections are in the
             same order as provided parent objects.</returns>
             <remarks><p>Child entities with equal FK values will share the same parent object instance (same reference).</p>
             <p>Preffer using this method instead of a sequance of <see cref="M:FistCore.Core.EntityBase.FetchChildren(FistCore.Core.DbRelation)"/>
             method invocations for each parent entity in the provided collection. This method is optimized
             and may yield significantly better performance.</p>
             </remarks>
             <example>The following example fetches a collection of entities from the Regions table and then
             fetched their children objects defined by the provided relation.
             <code>
             public void FetchRegionsAndTerritories(int[] regionIds, out RegionCollection regions, out EntityCollection[] territoriesBelongingToRegions)
            	{
            		// Fetch requested regions.
            		RegionEntity daoRegions = new RegionEntity();
            		SearchCondition whereRegionIdIn = new SearchCondition(PredicateFactory.In(daoRegions.Table.RegionID, regionIds));
            		regions = (RegionCollection)daoRegions.Select(null, whereRegionIdIn);
            
            		// Fetch territiories that belong to requested regions.
            		// One territory collection per region. Territory collections are in the same order as regions.
            		territoriesBelongingToRegions = daoRegions.FetchChildrenForCollection(regions, new TerritoriesMeta().FK_RegionID);
            	}
             </code>
             </example>
        </member>
        <member name="M:FistCore.Core.EntityBase.SelectTree(FistCore.Core.DbRelation,FistCore.Core.SearchCondition)">
            <summary>
            Selects all rows in the hierarchy starting with the current entity.
            </summary>
            <param name="recursiveRelation">Recursive relation which defines a hierarchy.</param>
            <param name="leafFilter">The search condition which restricts the rows returned. Often a criteria which filters out deactivated records.</param>
            <returns>All rows in the hierarchy under the current entity, including the current entity.</returns>
            <example>The following example fetches all rows in the employee hierarchy starting with the specified employee/manager.
            <code>
            public DataTable FetchHierarchy(int managerId)
            {
            	EmployeesEntity manager = new EmployeesEntity(managerId);
            	DataTable hierarchy = manager.SelectTree(manager.Table.FK_ReportsTo, null);
            	return hierarchy;
            }
            </code>
            </example>
        </member>
        <member name="M:FistCore.Core.EntityBase.SelectTree(FistCore.Core.DbRelation,FistCore.Core.SearchCondition,System.Int32)">
            <summary>
            Selects rows in the hierarchy starting with the current entity.
            </summary>
            <param name="recursiveRelation">Recursive relation which defines a hierarchy.</param>
            <param name="leafFilter">The search condition which restricts the rows returned. Often a criteria which filters out deactivated records.</param>
            <param name="maxLevels">Maximum number of tree levels to fetch. One specifies that only current entity is fetched,
            two specifies that current entity and entities directly beneath it are fetched etc.</param>
            <returns>Rows in the hierarchy under the current entity, including the current entity.</returns>
            <example>The following example fetches rows from the first three levels in the employee hierarchy starting with the specified employee/manager.
            <code>
            public DataTable FetchHierarchy(int managerId)
            {
            	EmployeesEntity manager = new EmployeesEntity(managerId);
            	DataTable hierarchy = manager.SelectTree(manager.Table.FK_ReportsTo, null, 3);
            	return hierarchy;
            }
            </code>
            </example>
        </member>
        <member name="M:FistCore.Core.EntityBase.SelectTree(FistCore.Core.DbRelation,FistCore.Core.SearchCondition,System.Int32,System.Int32)">
            <summary>
            Selects rows in the hierarchy under the current entity.
            </summary>
            <param name="recursiveRelation">Recursive relation which defines a hierarchy.</param>
            <param name="leafFilter">The search condition which restricts the rows returned. Often a criteria which filters out deactivated records.</param>
            <param name="beginAtLevel">Zero-based index of the first level to fetch. Zero indicates that fetching starts at current entity,
            one indicates that fetching starts at the level directly beneath it etc.</param>
            <param name="endAtLevel">Zero-based index of the last level to fetch. Zero indicates that fetching ends at current entity,
            one indicates that fetching ends at the level directly beneath it etc. <see cref="F:System.Int32.MaxValue"/> indicates that operation ends at leaf nodes.</param>
            <returns>Rows in the hierarchy under the current entity.</returns>
            <example>The following example fetches all rows in the employee hierarchy under the specified employee/manager.
            <code>
            public DataTable FetchHierarchy(int managerId)
            {
            	EmployeesEntity manager = new EmployeesEntity(managerId);
            	DataTable hierarchy = manager.SelectTree(manager.Table.FK_ReportsTo, null, 1 int.MaxValue);
            	return hierarchy;
            }
            </code>
            </example>
        </member>
        <member name="M:FistCore.Core.EntityBase.DetermineTreeDepth(FistCore.Core.DbRelation)">
            <summary>
            Counts the number of levels in the hieararchy starting with the current entity.
            </summary>
            <param name="recursiveRelation">Recursive relation which defines a hierarchy.</param>
            <returns>Sub-tree depth.</returns>
            <example>The following example returns the hierarchy depth, ie. the number of levels in th sub-tree.
            <code>
            public int FetchHierarchyDepth(int managerId)
            {
            	EmployeesEntity manager = new EmployeesEntity(managerId);
            	int depth = manager.DetermineTreeDepth(manager.Table.FK_ReportsTo);
            	return depth;
            }
            </code>
            </example>
        </member>
        <member name="M:FistCore.Core.EntityBase.UpdateTree(FistCore.Core.DbRelation,FistCore.Core.UpdateList,FistCore.Core.SearchCondition)">
            <summary>
            Updates all rows in the hierarchy starting with the current entity.
            </summary>
            <param name="recursiveRelation">Recursive relation which defines a hierarchy.</param>
            <param name="setExpressions">The list of columns to be updated and expressions that compute/contain the new values.</param>
            <param name="leafFilter">The search condition which limits the number of rows that are updated. Often a criteria which filters out deactivated records.</param>
            <returns>Number of rows affected.</returns>
            <example>The following example updates all rows in the employee hierarchy starting with the specified employee/manager.
            <code>
            public int MoveHierarchyToCountry(int managerId, string newCountry)
            {
            	EmployeesEntity manager = new EmployeesEntity(managerId);
            	UpdateList setNewCountry = new UpdateList(manager.Table.Country, newCountry);
            	int rowsAffected = manager.UpdateTree(manager.Table.FK_ReportsTo, setNewCountry, null);
            	return rowsAffected;
            }
            </code>
            </example>
        </member>
        <member name="M:FistCore.Core.EntityBase.UpdateTree(FistCore.Core.DbRelation,FistCore.Core.UpdateList,FistCore.Core.SearchCondition,System.Int32)">
            <summary>
            Updates rows in the hierarchy starting with the current entity.
            </summary>
            <param name="recursiveRelation">Recursive relation which defines a hierarchy.</param>
            <param name="setExpressions">The list of columns to be updated and expressions that compute/contain the new values.</param>
            <param name="leafFilter">The search condition which limits the number of rows that are updated. Often a criteria which filters out deactivated records.</param>
            <param name="maxLevels">Maximum number of tree levels to affect. One specifies that only current entity is updated,
            two specifies that current entity and entities directly beneath it are updated etc.</param>
            <returns>Number of rows affected.</returns>
            <example>The following example updates rows in the first three levels of the employee hierarchy starting with the specified employee/manager.
            <code>
            public int MoveHierarchyToCountry(int managerId, string newCountry)
            {
            	EmployeesEntity manager = new EmployeesEntity(managerId);
            	UpdateList setNewCountry = new UpdateList(manager.Table.Country, newCountry);
            	int rowsAffected = manager.UpdateTree(manager.Table.FK_ReportsTo, setNewCountry, null, 3);
            	return rowsAffected;
            }
            </code>
            </example>
        </member>
        <member name="M:FistCore.Core.EntityBase.UpdateTree(FistCore.Core.DbRelation,FistCore.Core.UpdateList,FistCore.Core.SearchCondition,System.Int32,System.Int32)">
            <summary>
            Updates rows in the hierarchy under the current entity.
            </summary>
            <param name="recursiveRelation">Recursive relation which defines a hierarchy.</param>
            <param name="setExpressions">The list of columns to be updated and expressions that compute/contain the new values.</param>
            <param name="leafFilter">The search condition which limits the number of rows that are updated. Often a criteria which filters out deactivated records.</param>
            <param name="beginAtLevel">Zero-based index of the first level to update. Zero indicates that updating starts at current entity,
            one indicates that updating starts at the level directly beneath it etc.</param>
            <param name="endAtLevel">Zero-based index of the last level to update. Zero indicates that updating ends at current entity,
            one indicates that updating ends at the level directly beneath it etc. <see cref="F:System.Int32.MaxValue"/> indicates that operation ends at leaf nodes.</param>
            <returns>Number of rows affected.</returns>
            <example>The following example updates all rows in the employee hierarchy under the specified employee/manager.
            <code>
            public int MoveHierarchyToCountry(int managerId, string newCountry)
            {
            	EmployeesEntity manager = new EmployeesEntity(managerId);
            	UpdateList setNewCountry = new UpdateList(manager.Table.Country, newCountry);
            	int rowsAffected = manager.UpdateTree(manager.Table.FK_ReportsTo, setNewCountry, null, 1, int.MaxValue);
            	return rowsAffected;
            }
            </code>
            </example>
        </member>
        <member name="M:FistCore.Core.EntityBase.CountTree(FistCore.Core.DbRelation,FistCore.Core.SearchCondition)">
            <summary>
            Counts all rows in the hierarchy starting with the current entity.
            </summary>
            <param name="recursiveRelation">Recursive relation which defines a hierarchy.</param>
            <param name="leafFilter">The search condition which restricts the rows counted. Often a criteria which filters out deactivated records.</param>
            <returns>Total row count in the hierarchy.</returns>
            <example>The following example counts all rows in the employee hierarchy starting with the specified employee/manager.
            <code>
            public int CountAllSubordinates(int managerId)
            {
            	EmployeesEntity manager = new EmployeesEntity(managerId);
            	int totalEmployeeCount = manager.CountTree(manager.Table.FK_ReportsTo, null);
            	return totalEmployeeCount;
            }
            </code>
            </example>
        </member>
        <member name="M:FistCore.Core.EntityBase.CountTree(FistCore.Core.DbRelation,FistCore.Core.SearchCondition,System.Int32)">
            <summary>
            Counts rows in the hierarchy starting with the current entity.
            </summary>
            <param name="recursiveRelation">Recursive relation which defines a hierarchy.</param>
            <param name="leafFilter">The search condition which restricts the rows counted. Often a criteria which filters out deactivated records.</param>
            <param name="maxLevels">Maximum number of tree levels to process. One specifies that only current entity is counted,
            two specifies that current entity and entities directly beneath it are counted etc.</param>
            <returns>Total row count in the hierarchy.</returns>
            <example>The following example counts all rows in the first three levels of the employee hierarchy starting with the specified employee/manager.
            <code>
            public int CountAllSubordinates(int managerId)
            {
            	EmployeesEntity manager = new EmployeesEntity(managerId);
            	int totalEmployeeCount = manager.CountTree(manager.Table.FK_ReportsTo, null, 3);
            	return totalEmployeeCount;
            }
            </code>
            </example>
        </member>
        <member name="M:FistCore.Core.EntityBase.CountTree(FistCore.Core.DbRelation,FistCore.Core.SearchCondition,System.Int32,System.Int32)">
            <summary>
            Counts rows in the hierarchy under the current entity.
            </summary>
            <param name="recursiveRelation">Recursive relation which defines a hierarchy.</param>
            <param name="leafFilter">The search condition which restricts the rows counted. Often a criteria which filters out deactivated records.</param>
            <param name="beginAtLevel">Zero-based index of the first level to process. Zero indicates that counting starts at current entity,
            one indicates that counting starts at the level directly beneath it etc.</param>
            <param name="endAtLevel">Zero-based index of the last level to process. Zero indicates that counting ends at current entity,
            one indicates that counting ends at the level directly beneath it etc. <see cref="F:System.Int32.MaxValue"/> indicates that operation ends at leaf nodes.</param>
            <returns>Total row count in the hierarchy.</returns>
            <example>The following example counts all rows in the employee hierarchy under the specified employee/manager.
            <code>
            public int CountAllSubordinates(int managerId)
            {
            	EmployeesEntity manager = new EmployeesEntity(managerId);
            	const int beginAtLevelBeneathManager = 1;
            	int totalEmployeeCount = manager.CountTree(manager.Table.FK_ReportsTo, null, beginAtLevelBeneathManager, int.MaxValue);
            	return totalEmployeeCount;
            }
            </code>
            </example>
        </member>
        <member name="M:FistCore.Core.EntityBase.SumTree(FistCore.Core.IDbColumn,FistCore.Core.DbRelation,FistCore.Core.SearchCondition)">
            <summary>
            Retrieves the sum of the column values in the hierarchy starting with the current entity.
            </summary>
            <param name="column">Column. Must be a numeric column that belongs to the current entity's table.</param>
            <param name="recursiveRelation">Recursive relation which defines a hierarchy.</param>
            <param name="leafFilter">The search condition which restricts the rows processed. Often a criteria which filters out deactivated records.</param>
            <returns>Total sum of column values in the hierarchy or <see cref="F:System.DBNull.Value"/>.</returns>
        </member>
        <member name="M:FistCore.Core.EntityBase.SumTree(FistCore.Core.IDbColumn,FistCore.Core.DbRelation,FistCore.Core.SearchCondition,System.Int32)">
            <summary>
            Retrieves the sum of the column values in the hierarchy starting with the current entity.
            </summary>
            <param name="column">Column. Must be a numeric column that belongs to the current entity's table.</param>
            <param name="recursiveRelation">Recursive relation which defines a hierarchy.</param>
            <param name="leafFilter">The search condition which restricts the rows processed. Often a criteria which filters out deactivated records.</param>
            <param name="maxLevels">Maximum number of tree levels to process. One specifies that only current entity is summed,
            two specifies that current entity and entities directly beneath it are summed etc.</param>
            <returns>Total sum of column values in the hierarchy or <see cref="F:System.DBNull.Value"/>.</returns>
        </member>
        <member name="M:FistCore.Core.EntityBase.SumTree(FistCore.Core.IDbColumn,FistCore.Core.DbRelation,FistCore.Core.SearchCondition,System.Int32,System.Int32)">
            <summary>
            Retrieves the sum of the column values in the hierarchy under the current entity.
            </summary>
            <param name="column">Column. Must be a numeric column that belongs to the current entity's table.</param>
            <param name="recursiveRelation">Recursive relation which defines a hierarchy.</param>
            <param name="leafFilter">The search condition which restricts the rows processed. Often a criteria which filters out deactivated records.</param>
            <param name="beginAtLevel">Zero-based index of the first level to process. Zero indicates that summing starts at current entity,
            one indicates that summing starts at the level directly beneath it etc.</param>
            <param name="endAtLevel">Zero-based index of the last level to process. Zero indicates that summing ends at current entity,
            one indicates that summing ends at the level directly beneath it etc. <see cref="F:System.Int32.MaxValue"/> indicates that operation ends at leaf nodes.</param>
            <returns>Total sum of column values in the hierarchy or <see cref="F:System.DBNull.Value"/>.</returns>
        </member>
        <member name="M:FistCore.Core.EntityBase.MinInTree(FistCore.Core.IDbColumn,FistCore.Core.DbRelation,FistCore.Core.SearchCondition)">
            <summary>
            Retrieves the minimum column value in the hierarchy starting with the current entity.
            </summary>
            <param name="column">Column to compare. Must belong to the current entity's table.</param>
            <param name="recursiveRelation">Recursive relation which defines a hierarchy.</param>
            <param name="leafFilter">The search condition which restricts the rows processed. Often a criteria which filters out deactivated records.</param>
            <returns>Minimum value or <see cref="F:System.DBNull.Value"/>.</returns>
            <example>The following example retrieves the date of the oldest employee in the hierarchy starting with the specified employee/manager.
            <code>
            public DateTime FindOldestInHierarchy(int managerId)
            {
            	EmployeesEntity manager = new EmployeesEntity(managerId);
            	object result = manager.MinInTree(manager.Table.BirthDate, manager.Table.FK_ReportsTo, null);
            	return Convert.ToDateTime(result);
            }
            </code>
            </example>
        </member>
        <member name="M:FistCore.Core.EntityBase.MinInTree(FistCore.Core.IDbColumn,FistCore.Core.DbRelation,FistCore.Core.SearchCondition,System.Int32)">
            <summary>
            Retrieves the minimum column value in the hierarchy starting with the current entity.
            </summary>
            <param name="column">Column to compare. Must belong to the current entity's table.</param>
            <param name="recursiveRelation">Recursive relation which defines a hierarchy.</param>
            <param name="leafFilter">The search condition which restricts the rows processed. Often a criteria which filters out deactivated records.</param>
            <param name="maxLevels">Maximum number of tree levels to process. One specifies that only current entity is compared,
            two specifies that current entity and entities directly beneath it are compared etc.</param>
            <returns>Minimum value or <see cref="F:System.DBNull.Value"/>.</returns>
            <example>The following example retrieves the date of the oldest employee in the first three levels of the hierarchy starting with the specified employee/manager.
            <code>
            public DateTime FindOldestInHierarchy(int managerId)
            {
            	EmployeesEntity manager = new EmployeesEntity(managerId);
            	object result = manager.MinInTree(manager.Table.BirthDate, manager.Table.FK_ReportsTo, null, 3);
            	return Convert.ToDateTime(result);
            }
            </code>
            </example>
        </member>
        <member name="M:FistCore.Core.EntityBase.MinInTree(FistCore.Core.IDbColumn,FistCore.Core.DbRelation,FistCore.Core.SearchCondition,System.Int32,System.Int32)">
            <summary>
            Retrieves the minimum column value in the hierarchy under the current entity.
            </summary>
            <param name="column">Column to compare. Must belong to the current entity's table.</param>
            <param name="recursiveRelation">Recursive relation which defines a hierarchy.</param>
            <param name="leafFilter">The search condition which restricts the rows processed. Often a criteria which filters out deactivated records.</param>
            <param name="beginAtLevel">Zero-based index of the first level to process. Zero indicates that comparison starts at current entity,
            one indicates that comparison starts at the level directly beneath it etc.</param>
            <param name="endAtLevel">Zero-based index of the last level to process. Zero indicates that comparison ends at current entity,
            one indicates that comparison ends at the level directly beneath it etc. <see cref="F:System.Int32.MaxValue"/> indicates that operation ends at leaf nodes.</param>
            <returns>Minimum value or <see cref="F:System.DBNull.Value"/>.</returns>
            <example>The following example retrieves the date of the oldest employee in the hierarchy under the specified employee/manager.
            <code>
            public DateTime FindOldestInHierarchy(int managerId)
            {
            	EmployeesEntity manager = new EmployeesEntity(managerId);
            	object result = manager.MinInTree(manager.Table.BirthDate, manager.Table.FK_ReportsTo, null, 1, int.MaxValue);
            	return Convert.ToDateTime(result);
            }
            </code>
            </example>
        </member>
        <member name="M:FistCore.Core.EntityBase.MaxInTree(FistCore.Core.IDbColumn,FistCore.Core.DbRelation,FistCore.Core.SearchCondition)">
            <summary>
            Retrieves the maximum column value in the hierarchy starting with the current entity.
            </summary>
            <param name="column">Column to compare. Must belong to the current entity's table.</param>
            <param name="recursiveRelation">Recursive relation which defines a hierarchy.</param>
            <param name="leafFilter">The search condition which restricts the rows processed. Often a criteria which filters out deactivated records.</param>
            <returns>Maximum value or <see cref="F:System.DBNull.Value"/>.</returns>
            <example>The following example retrieves the date of the youngest employee in the hierarchy starting with the specified employee/manager.
            <code>
            public DateTime FindYoungestInHierarchy(int managerId)
            {
            	EmployeesEntity manager = new EmployeesEntity(managerId);
            	object result = manager.MaxInTree(manager.Table.BirthDate, manager.Table.FK_ReportsTo, null);
            	return Convert.ToDateTime(result);
            }
            </code>
            </example>
        </member>
        <member name="M:FistCore.Core.EntityBase.MaxInTree(FistCore.Core.IDbColumn,FistCore.Core.DbRelation,FistCore.Core.SearchCondition,System.Int32)">
            <summary>
            Retrieves the maximum column value in the hierarchy starting with the current entity.
            </summary>
            <param name="column">Column to compare. Must belong to the current entity's table.</param>
            <param name="recursiveRelation">Recursive relation which defines a hierarchy.</param>
            <param name="leafFilter">The search condition which restricts the rows processed. Often a criteria which filters out deactivated records.</param>
            <param name="maxLevels">Maximum number of tree levels to process. One specifies that only current entity is compared,
            two specifies that current entity and entities directly beneath it are compared etc.</param>
            <returns>Maximum value or <see cref="F:System.DBNull.Value"/>.</returns>
            <example>The following example retrieves the date of the oldest employee in the first three levels of the hierarchy starting with the specified employee/manager.
            <code>
            public DateTime FindYoungestInHierarchy(int managerId)
            {
            	EmployeesEntity manager = new EmployeesEntity(managerId);
            	object result = manager.MaxInTree(manager.Table.BirthDate, manager.Table.FK_ReportsTo, null, 3);
            	return Convert.ToDateTime(result);
            }
            </code>
            </example>
        </member>
        <member name="M:FistCore.Core.EntityBase.MaxInTree(FistCore.Core.IDbColumn,FistCore.Core.DbRelation,FistCore.Core.SearchCondition,System.Int32,System.Int32)">
            <summary>
            Retrieves the maximum column value in the hierarchy under the current entity.
            </summary>
            <param name="column">Column to compare. Must belong to the current entity's table.</param>
            <param name="recursiveRelation">Recursive relation which defines a hierarchy.</param>
            <param name="leafFilter">The search condition which restricts the rows processed. Often a criteria which filters out deactivated records.</param>
            <param name="beginAtLevel">Zero-based index of the first level to process. Zero indicates that comparison starts at current entity,
            one indicates that comparison starts at the level directly beneath it etc.</param>
            <param name="endAtLevel">Zero-based index of the last level to process. Zero indicates that comparison ends at current entity,
            one indicates that comparison ends at the level directly beneath it etc. <see cref="F:System.Int32.MaxValue"/> indicates that operation ends at leaf nodes.</param>
            <returns>Maximum value or <see cref="F:System.DBNull.Value"/>.</returns>
            <example>The following example retrieves the date of the oldest employee in the hierarchy under the specified employee/manager.
            <code>
            public DateTime FindYoungestInHierarchy(int managerId)
            {
            	EmployeesEntity manager = new EmployeesEntity(managerId);
            	object result = manager.MaxInTree(manager.Table.BirthDate, manager.Table.FK_ReportsTo, null, 1, int.MaxValue);
            	return Convert.ToDateTime(result);
            }
            </code>
            </example>
        </member>
        <member name="P:FistCore.Core.EntityBase.Sorter">
            <summary>
            Sorter used by the data retrieval methods.
            </summary>
        </member>
        <member name="P:FistCore.Core.EntityBase.SortOnDatabase">
            <summary>
            Specifies whether data retrieval methods will sort data on database or in DataTable after data is fetched.
            This is just a hint. Actual methods may ignore this.
            </summary>
        </member>
        <member name="P:FistCore.Core.EntityBase.ConnectionProvider">
            <summary>
            Gets or sets the ConnectionProvider used for database interaction. Nulls are not allowed.
            </summary>
        </member>
        <member name="P:FistCore.Core.EntityBase.LastExecutedCommandInfo">
            <summary>
            Gets the information for the last command generated and executed by the current DAO on the data-source.
            </summary>
        </member>
        <member name="P:FistCore.Core.EntityBase.DaoFactory">
            <summary>
            Gets or sets DAO creation strategies. Null is not allowed.
            </summary>
            <remarks>Required to build DAOs for entities used in data-access logic. This collection is passed on to
            created DAOs so that all DAOs in the chain are created using the same strategies.</remarks>
        </member>
        <member name="M:FistCore.Core.DBPkUtil.CreatePkFromFk(FistCore.Core.IEntity,FistCore.Core.DbRelation)">
            <summary>
            Creates an object array which represents PK with the FK values stored in the given child.
            </summary>
            <returns>PK or <b>null</b> if child's FK is not set.</returns>
            <remarks>An exception is generated if a child contains an invalid, i.e. partially set, FK.
            Either all, or none of the FK properties must be set.</remarks>
        </member>
        <member name="T:FistCore.Core.EntityDAO">
            <summary>
            Data-access object. Provides standard data-access functionalities to objects that implement <see cref="T:FistCore.Core.IEntity"/> interface.
            </summary>
            <remarks><p>Entity DAO requires an instance of IEntity (see <see cref="P:FistCore.Core.IEntityDAO.Entity"/>) to work.
            This is the target entity to which results of data retrieval are stored in (eg. CRUD methods). It also serves
            as a source of data for other methods (eg. <see cref="M:FistCore.Core.EntityDAO.Find"/>).</p>
            <p>Main features:
            <list type="bullet">
            <item>CRUD methods. Create, retrieve, update and delete methods that manipulate a single row in the
            database using primary key logic. All CRUD methods have a suffix <b>One.</b></item>
            <item>Retrieval of parent entities using foreign keys mapped in IDbTable meta classes.</item>
            <item>Retrieval of child entities using one-to-many and many-to-many relations.</item>
            <item>Batch manipulation and retrieval of multiple rows.</item>
            <item>Aggregate functions.</item>
            <item>Sorting of retrieved rows on database or in application.</item>
            <item>Connection and transaction sharing with other data-tier objects.</item>
            <item>Hierarchical queries and updates - methods with a suffix <b>Tree</b>.</item>
            </list></p></remarks>
        </member>
        <member name="F:FistCore.Core.EntityDAO.entity">
            <summary>
            Entity with which the current DAO is working.
            </summary>
        </member>
        <member name="F:FistCore.Core.EntityDAO.entityDaoCreationStrategies">
            <summary>
            Collection of <see cref="T:FistCore.Core.IEntityDaoFactory"/> objects. Required to build DAOs for entities used in
            data-access logic. This collection is passed on to created DAOs so that all DAOs in the chain are created
            using the same strategies.
            </summary>
        </member>
        <member name="M:FistCore.Core.EntityDAO.#ctor(FistCore.Core.IEntity)">
            <summary>
            Initializes a new instances of EntityDAO class.
            </summary>
            <param name="entityToWorkWith">Entity with which DAO works. Null is not allowed. Depending on operation DAO
            may only read entity, but it may also change it.</param>
            <remarks>Uses only default DAO creation strategies (see <see cref="T:FistCore.Core.EntityDaoFactory"/>).
            This can be changed via <see cref="P:FistCore.Core.EntityDAO.DaoFactory"/> property.</remarks>
        </member>
        <member name="M:FistCore.Core.EntityDAO.#ctor(FistCore.Core.IEntity,FistCore.Core.IConnectionProvider)">
            <summary>
            Initializes a new instances of EntityDAO class.
            </summary>
            <param name="entityToWorkWith">Entity with which DAO works. Null is not allowed. Depending on operation DAO
            may only read entity, but it may also change it.</param>
            <param name="conn">Connection provider the DAO will use to perform data-access operations. Null is not allowed.</param>
            <remarks>Uses only default DAO creation strategies (see <see cref="T:FistCore.Core.EntityDaoFactory"/>).
            This can be changed via <see cref="P:FistCore.Core.EntityDAO.DaoFactory"/> property.</remarks>
        </member>
        <member name="M:FistCore.Core.EntityDAO.#ctor(FistCore.Core.IEntity,FistCore.Core.IEntityDaoFactory)">
            <summary>
            Initializes a new instances of EntityDAO class.
            </summary>
            <param name="entityToWorkWith">Entity with which DAO works. Null is not allowed. Depending on operation DAO
            may only read entity, but it may also change it.</param>
            <param name="daoCreationStrategies">DAO creation strategies. Null is not allowed.</param>
        </member>
        <member name="M:FistCore.Core.EntityDAO.#ctor(FistCore.Core.IEntity,FistCore.Core.IConnectionProvider,FistCore.Core.IEntityDaoFactory)">
            <summary>
            Initializes a new instances of EntityDAO class.
            </summary>
            <param name="entityToWorkWith">Entity with which DAO works. Null is not allowed. Depending on operation DAO
            may only read entity, but it may also change it.</param>
            <param name="conn">Connection provider the DAO will use to perform data-access operations. Null is not allowed.</param>
            <param name="daoCreationStrategies">DAO creation strategies. Null is not allowed.</param>
        </member>
        <member name="M:FistCore.Core.EntityDAO.#ctor(FistCore.Core.IDbTable)">
            <summary>
            Initializes a new instances of EntityDAO class.
            </summary>
            <param name="table">Table accessed by the new DAO. A new empty entity is created for the table.</param>
            <remarks>Uses only default DAO creation strategies (see <see cref="T:FistCore.Core.EntityDaoFactory"/>).
            This can be changed via <see cref="P:FistCore.Core.EntityDAO.DaoFactory"/> property.</remarks>
        </member>
        <member name="M:FistCore.Core.EntityDAO.#ctor(FistCore.Core.IDbTable,FistCore.Core.IConnectionProvider)">
            <summary>
            Initializes a new instances of EntityDAO class.
            </summary>
            <param name="table">Table accessed by the new DAO. A new empty entity is created for the table.</param>
            <param name="conn">Connection provider the DAO will use to perform data-access operations. Null is not allowed.</param>
            <remarks>Uses only default DAO creation strategies (see <see cref="T:FistCore.Core.EntityDaoFactory"/>).
            This can be changed via <see cref="P:FistCore.Core.EntityDAO.DaoFactory"/> property.</remarks>
        </member>
        <member name="M:FistCore.Core.EntityDAO.#ctor(FistCore.Core.IDbTable,FistCore.Core.IEntityDaoFactory)">
            <summary>
            Initializes a new instances of EntityDAO class.
            </summary>
            <param name="table">Table accessed by the new DAO. A new empty entity is created for the table.</param>
            <param name="daoCreationStrategies">DAO creation strategies. Null is not allowed.</param>
        </member>
        <member name="M:FistCore.Core.EntityDAO.#ctor(FistCore.Core.IDbTable,FistCore.Core.IConnectionProvider,FistCore.Core.IEntityDaoFactory)">
            <summary>
            Initializes a new instances of EntityDAO class.
            </summary>
            <param name="table">Table accessed by the new DAO. A new empty entity is created for the table.</param>
            <param name="conn">Connection provider the DAO will use to perform data-access operations. Null is not allowed.</param>
            <param name="daoCreationStrategies">DAO creation strategies. Null is not allowed.</param>
        </member>
        <member name="M:FistCore.Core.EntityDAO.SetSorter(FistCore.Core.OrderByClause)">
            <summary>
            Sets the sorter used by the data retrieval methods.
            </summary>
            <param name="sorter">Sort clause. May be <b>null</b>.</param>
            <example>
            The following examples selects all employees sorted by their last name.
            <code>
            public DataTable SelectAllEmployeesOrderedByLastName()
            {
            	EmployeesEntity emp = new EmployeesEntity();
            	EntityDAO dao = new EntityDAO(emp);
            	// Order by last name. Use ascending order (true).
            	dao.SetSorter(new OrderByClause(emp.Table.LastName, true));
            	DataTable allEmployees = dao.SelectAll();
            	return allEmployees;
            }
            </code>
            </example>
        </member>
        <member name="M:FistCore.Core.EntityDAO.SetSortMode(System.Boolean)">
            <summary>
            Sets the sort mode for data retrieveal methods. This is just a hint. Data retrieval methods may ignore this.
            </summary>
            <param name="sortOnDatabase">Specifies whether sorting will take place on database or in DataTable after data has been fetched.</param>
        </member>
        <member name="M:FistCore.Core.EntityDAO.DeleteOne">
             <summary>
             Deletes one existing row in the database based on the primary key and marks the entity as <see cref="F:FistCore.Core.EntityState.Deleted"/>.
             </summary>
             <returns>Number of rows affected.</returns>
             <remarks>Throws exception if the parent table doesn't have a primary key constraint
             or if the primary key fields of the current entity are not set.</remarks>
             <example>
             The following example deletes a row in the Employees table that has a given ID.
             <code>
             public void DeleteEmployee(int id)
             {
             	// Create an entity, set the primary key and delete it from the database.
             	EmployeesEntity emp = new EmployeesEntity();
             	emp.EmployeeID = id;
            
             	EntityDAO dao = new EntityDAO(emp);
             	dao.DeleteOne();
             }
             </code>
             </example>
        </member>
        <member name="M:FistCore.Core.EntityDAO.InsertOne">
             <summary>
             Inserts one new row into the database. Affects the current entity state.
             </summary>
             <returns>Autoidentity value for the inserted row. -1 if the table doesn't contain an
             autoidentity field or the DBMS specific code cannot be generated.</returns>
             <remarks><p>Marks the entity as <see cref="F:FistCore.Core.EntityState.Synchronized"/> if the insert operation
             succeeded and the auto-increment value assigned by the database has been retrieved (if such a field
             exists). The entity is marked as <see cref="F:FistCore.Core.EntityState.OutOfSync"/> if auto-increment value
             cannot be retrieved.</p>
             <p>Automatically generates the code that retrieves the new identity for supported databases.
             DBMS specific code depends on the class' ConnectionProvider.</p></remarks>
             <example>
             The following example inserts a row into the Employees table and retrieves the new auto-identity value assigned to it.
             <code>
             public int InsertEmployee(string firstName, string lastName)
             {
             	EmployeesEntity emp = new EmployeesEntity();
             	emp.FirstName = firstName;
             	emp.LastName = lastName;
            
             	// InsertOne method automatically retrieves the auto-identity value assigned to the inserted row.
             	// The EmployeeID property is automatically set, too.
             	EntityDAO dao = new EntityDAO(emp);
             	return dao.InsertOne();
             }
             </code>
             </example>
        </member>
        <member name="M:FistCore.Core.EntityDAO.SelectOne">
             <summary>
             Selects one existing entity from the database based on the Primary Key, populates entity with the
             retrieved data and marks it as <see cref="F:FistCore.Core.EntityState.Synchronized"/>.
             </summary>
             <returns>True if select succeeded; false if primary key is not defined for this table,
             if the primary key values are not set or if the entity does not exist.</returns>
             <remarks>This method does <b>not</b> prefetch parent entities.</remarks>
             <example>
             The following example fetches an employee with the given ID.
             <code>
             public EmployeesEntity SelectEmployee(int id)
             {
             	EmployeesEntity emp = new EmployeesEntity();
             	emp.EmployeeID = id;
            
             	// SelectOne() method returns true if a row with the the specified ID exists.
             	// It also initializes all members with the data retrieved.
             	EntityDAO dao = new EntityDAO(emp);
             	bool isSuccess = dao.SelectOne();
            
             	// If SelectOne() method found a row that matches the given ID then return the entity; otherwise return null.
             	if (isSuccess)
             		return emp;
             	else
             		return null;
             }
             </code>
             </example>
        </member>
        <member name="M:FistCore.Core.EntityDAO.UpdateOne">
             <summary>
             Updates one existing row in the database based on the primary key and marks the entity as <see cref="F:FistCore.Core.EntityState.Synchronized"/>.
             </summary>
             <returns>Number of rows affected.</returns>
             <remarks><p>Copies the values from this entity to the row identified by the primary key.</p>
             <p>Throws exception if parent table doesn't have a primary key constraint or if the primary key fields of this entity are not set.</p></remarks>
             <example>
             The following example fetches an existing entity from the database, changes some of it's fields and saves it back to the database.
             <code>
             public void UpdateLastName(int employeeId, string newLastName)
             {
             	// We only want to change one field (LastName).
             	// Therefore, to keep the other fields intact, original entity must be fetched.
             	EmployeesEntity emp = new EmployeesEntity();
             	emp.EmployeeID = employeeId;
             	EntityDAO dao = new EntityDAO(emp);
             	dao.SelectOne();
            
             	// Change the last name and save the changes to database.
             	emp.LastName = newLastName;
             	dao.UpdateOne();
             }
             </code>
             Original entity values don't have to be fetched if all of the new values are known.
             The following example updates an existing entity, but it accesses the database only once.
             <code>
             public void UpdateJohnSmith()
             {
             	// Update a row that has EmployeeID of 1 with new values.
             	// The old entity doesn't have to be retrieved from the database if we know all of the new values.
             	EmployeesEntity johnSmith = new EmployeesEntity();
             	johnSmith.EmployeeID = 1;
             	johnSmith.FirstName = "Jonathan";
             	johnSmith.LastName = "Smith";
            
             	EntityDAO dao = new EntityDAO(johnSmith);
             	dao.UpdateOne();
             }
             </code>
             </example>
        </member>
        <member name="M:FistCore.Core.EntityDAO.Save">
            <summary>
            Persists entity. Operation (insert, update, delete, nothing) is chosen based on the current <see cref="T:FistCore.Core.EntityState"/>.
            </summary>
            <returns>True if data access operation was executed; false otherwise.</returns>
            <remarks>Executed action and returned value depends on the current <see cref="T:FistCore.Core.EntityState"/>:
            <list type="bullet">
            <item><see cref="F:FistCore.Core.EntityState.New"/>. Executes <see cref="M:FistCore.Core.EntityDAO.InsertOne"/> method. Returns <b>true</b>.</item>
            <item><see cref="F:FistCore.Core.EntityState.Synchronized"/>. No action is executed. Returns <b>false</b>.</item>
            <item><see cref="F:FistCore.Core.EntityState.OutOfSync"/>. Executes <see cref="M:FistCore.Core.EntityDAO.UpdateOne"/> method. Returns <b>true</b>.</item>
            <item><see cref="F:FistCore.Core.EntityState.PendingDeletion"/>. Executes <see cref="M:FistCore.Core.EntityDAO.DeleteOne"/> method. Returns <b>true</b>.</item>
            <item><see cref="F:FistCore.Core.EntityState.Deleted"/>. No action is executed. Returns <b>false</b>.</item>
            </list>
            </remarks>
        </member>
        <member name="M:FistCore.Core.EntityDAO.Delete(FistCore.Core.IDbColumn,System.Object)">
             <summary>
             Deletes all rows that match the filter criteria.
             </summary>
             <param name="column">Column whose value must be equal to the given value to be deleted.</param>
             <param name="value">Value. May be <b>null</b>.</param>
             <returns>Number of rows affected. -1 if the operation was aborted.</returns>
             <remarks>The method creates a <see cref="T:FistCore.Core.SearchCondition"/> that compares the specified column
             to the given value. Only the rows where the specified column matches the given value are deleted.</remarks>
             <example>
             The following example deletes a row from the Employees table and all rows in the EmployeeTerritories
             table that reference it. All commands are executed as parts of a single transaction. Thus, either
             all data is deleted or none.
             <code>
             public void DeleteEmployeeAndChildEntities(int employeeId)
             {
             	// Deletes an employee and all records from the EmployeeTerritories table bound to the
             	// specified employee. As a single transaction. Either all data is deleted or none.
            
             	// Employee witch is to be deleted and DAO that will perform operation.
             	EmployeesEntity employee = new EmployeesEntity();
             	employee.EmployeeID = employeeId;
             	EntityDAO daoEmployees = new EntityDAO(employee);
            
             	// Junction rows in EmployeeTerritories that reference the employee and
             	// DAO that works the EmployeeTerritories table.
             	EmployeeTerritoriesEntity empTerritories = new EmployeeTerritoriesEntity();
             	EntityDAO daoJunctionTable = new EntityDAO(empTerritories);
            
             	try
             	{
             		// Open connection and begin transaction.
             		// Connection and transaction context are sharet between two DAOs.
             		daoEmployees.ConnectionProvider.BeginTransaction();
            
             		// First, junction rows must be deleted where column "EmployeeID"
             		// contains a value equal to the given employee's ID.
             		daoJunctionTable.ConnectionProvider = daoEmployees.ConnectionProvider;
             		daoJunctionTable.Delete(empTerritories.Table.EmployeeID, employee.EmployeeID);
            
             		// Now we can safely delete employee, since it is no longer referenced.
             		daoEmployees.DeleteOne();
            
             		// Commit transaction.
             		daoEmployees.ConnectionProvider.CommitTransaction();
             	}
             	catch
             	{
             		// An error occured. Rollback the entire transaction and bubble up the exception that occured.
             		daoEmployees.ConnectionProvider.RollbackTransaction();
             		throw;
             	}
             	finally
             	{
             		// It is a good practice to close connection if it was openned manually.
             		// The connection is returned to ADO.NET connection pool.
             		daoEmployees.ConnectionProvider.CloseConnection();
             	}
             }
             </code>
             </example>
        </member>
        <member name="M:FistCore.Core.EntityDAO.Delete(FistCore.Core.SearchCondition)">
             <summary>
             Deletes all rows that match the filter criteria.
             </summary>
             <param name="filter">The search condition which limits the number of rows that are deleted.
             Throws exception if <b>null</b> or an empty SearchCondition is passed as an argument.</param>
             <returns>Number of rows affected.</returns>
             <example>
             The following example creates a SearchCondition that filters out all employees born in 1977.
             Delete method uses the SearchCondition to delete all rows that match it.
             <code>
             public void DeleteEmployeesBornIn1977()
             {
             	// Delete all employees that were born between January 1, 1977 and January 1, 1978.
             	EmployeesEntity emp = new EmployeesEntity();
             	emp.Delete(new SearchCondition(PredicateFactory.Between(emp.Table.BirthDate, new DateTime(1977,1,1), new DateTime(1978,1,1))));
             }
             </code>
             The following example creates a SearchCondition that filters out all employees that are in charge
             of the specified territory. SearchCondition contains an IN predicate that uses a subquery which
             returns all employee IDs linked to the given territory ID. Delete method uses the SearchCondition
             to delete all rows that match it.
             <code>
             public void DeleteEmployeesInChargeOfTheGivenTerritory(string territoryId)
             {
             	// This is the equivalent SQL code that does the same task.
            
             	//	DELETE FROM Employees
             	//	WHERE Employees.EmployeeID IN
             	//		(SELECT EmployeeTerritories.EmployeeID
             	//		FROM EmployeeTerritories
             	//		WHERE EmployeeTerritories.TerritoryID = @territoryId)
             	//				EmployeesEntity emp = new EmployeesEntity();
            
             	// First we construct the subquery.
             	EmployeeTerritoriesMeta empTerritories = new EmployeeTerritoriesMeta();
             	SelectStatement subQuery = new SelectStatement(empTerritories);
             	subQuery.SelectList.Add(empTerritories.EmployeeID);
             	subQuery.Where.Add(PredicateFactory.Compare(empTerritories.TerritoryID, ComparisonOperator.Equal, territoryId));
            
             	// SearchCondition uses the subquery to filter out the rows we want to delete.
             	EmployeesEntity emp = new EmployeesEntity();
             	SearchCondition inChargeOfTerritory = new SearchCondition(PredicateFactory.In(emp.Table.EmployeeID, subQuery));
            
             	EntityDAO dao = new EntityDAO(emp);
             	dao.Delete(inChargeOfTerritory);
             }
             </code>
             </example>
        </member>
        <member name="M:FistCore.Core.EntityDAO.SelectAll">
             <summary>
             Selects all rows from the table. Data is sorted if the sorter is set.
             </summary>
             <returns>All rows.</returns>
             <example>
             The following examples selects all employees sorted by their last name.
             <code>
             public DataTable SelectAllEmployeesOrderedByLastName()
             {
             	EmployeesEntity emp = new EmployeesEntity();
             	EntityDAO dao = new EntityDAO(emp);
            
             	// Order by last name. Use ascending order (true).
             	dao.SetSorter(new OrderByClause(emp.Table.LastName, true));
             	DataTable allEmployees = dao.SelectAll();
             	return allEmployees;
             }
             </code>
             </example>
        </member>
        <member name="M:FistCore.Core.EntityDAO.Select(FistCore.Core.IDbColumn,System.Object)">
            <summary>
            Selects all rows that match the filter criteria. Data is sorted if the sorter is set.
            </summary>
            <param name="column">Column whose value must be equal to the given value to be selected.</param>
            <param name="value">Value. May be <b>null</b>.</param>
            <returns>Data.</returns>
            <remarks>The method creates a <see cref="T:FistCore.Core.SearchCondition"/> that compares the specified column
            to the given value. Only the rows where the specified column matches the given value are selected.</remarks>
            <example>
            The following example selects all employees that live in New York.
            <code>
            public DataTable SelectNewYorkers()
            {
            	EmployeesEntity emp = new EmployeesEntity();
            	EntityDAO dao = new EntityDAO(emp);
            	DataTable newYorkEmployees = dao.Select(emp.Table.City, "New York");
            	return newYorkEmployees;
            }
            </code>
            </example>
        </member>
        <member name="M:FistCore.Core.EntityDAO.Select(FistCore.Core.RelationBucket,FistCore.Core.SearchCondition)">
             <summary>
             Selects all rows that match the filter criteria. Data is sorted if the sorter is set.
             </summary>
             <param name="relations">Relations. May be <b>null</b> if the filter doesn't use other tables.</param>
             <param name="filter">The search condition which restricts the rows returned.</param>
             <returns>Data that matches the filter.</returns>
             <example>
             The following example uses the Select method that allows advanced filtering using RelationBucket
             and SearchCondition objects. It selects all employees that are in charge of the New York territory.
             <code>
             public DataTable SelectEmployeesInChargeOfNewYorkTerritory()
             {
             	EmployeesEntity emp = new EmployeesEntity();
            
             	// Create a relation between Employees and EmployeeTerritories tables.
             	// Employees is a parent table.
             	// EmployeeTerritories is a child table.
             	// EmployeeTerritories.EmployeeID is a foreign key.
             	EmployeeTerritoriesMeta empTerritories = new EmployeeTerritoriesMeta();
             	RelationBucket relations = new RelationBucket();
             	relations.Add(new DbRelation(emp.Table, empTerritories, empTerritories.EmployeeID));
            
             	// Create a search condition with a single predicate.
             	// Comparisson predicate compares TerritoryID field to given value (New York ID)
             	// using the specified comparison operator (ComparisonOperator.Equal).
             	SearchCondition territoryIdEqualsNy = new SearchCondition();
             	territoryIdEqualsNy.Add(PredicateFactory.Compare(empTerritories.TerritoryID, ComparisonOperator.Equal, "10019"));
            
             	// Select all employees that are in charge of the New York territory.
             	EntityDAO dao = new EntityDAO(emp);
             	DataTable nyEmployees = dao.Select(relations, territoryIdEqualsNy);
             	return nyEmployees;
             }
             </code>
             </example>
        </member>
        <member name="M:FistCore.Core.EntityDAO.Select(FistCore.Core.RelationBucket,FistCore.Core.SearchCondition,System.Int32)">
             <summary>
             Selects all rows that match the filter criteria. Data is sorted if the sorter is set.
             </summary>
             <param name="relations">Relations. May be <b>null</b> if the filter doesn't use other tables.</param>
             <param name="filter">The search condition which restricts the rows returned.</param>
             <param name="maxNumberOfItemsToReturn">Maximum number of items that will be returned.
             If set to zero or a negative value, all rows matching criteria will be returned.</param>
             <returns>Data that matches the filter.</returns>
             <example>
             The following example uses the Select method that allows advanced filtering using RelationBucket
             and SearchCondition objects. It selects all employees that are in charge of the New York territory.
             <code>
             public DataTable SelectEmployeesInChargeOfNewYorkTerritory()
             {
             	EmployeesEntity emp = new EmployeesEntity();
            
             	// Create a relation between Employees and EmployeeTerritories tables.
             	// Employees is a parent table.
             	// EmployeeTerritories is a child table.
             	// EmployeeTerritories.EmployeeID is a foreign key.
             	EmployeeTerritoriesMeta empTerritories = new EmployeeTerritoriesMeta();
             	RelationBucket relations = new RelationBucket();
             	relations.Add(new DbRelation(emp.Table, empTerritories, empTerritories.EmployeeID));
            
             	// Create a search condition with a single predicate.
             	// Comparisson predicate compares TerritoryID field to given value (New York ID)
             	// using the specified comparison operator (ComparisonOperator.Equal).
             	SearchCondition territoryIdEqualsNy = new SearchCondition();
             	territoryIdEqualsNy.Add(PredicateFactory.Compare(empTerritories.TerritoryID, ComparisonOperator.Equal, "10019"));
            
             	// Select all employees that are in charge of the New York territory.
             	EntityDAO dao = new EntityDAO(emp);
             	DataTable nyEmployees = dao.Select(relations, territoryIdEqualsNy, 0);
             	return nyEmployees;
             }
             </code>
             </example>
        </member>
        <member name="M:FistCore.Core.EntityDAO.Find">
             <summary>
             Selects all rows that match an automatically created filter based on all properties that have been set.
             Predicates are combined by AND operators. Data is sorted if the sorter is set.
             </summary>
             <returns>Rows that match the automatically created filter.</returns>
             <example>
             The following example select all employees whose first name is "John" and the last name is "Smith".
             <code>
             public DataTable FindAllJohnSmiths()
             {
             	EmployeesEntity emp = new EmployeesEntity();
             	emp.FirstName = "John";
             	emp.LastName = "Smith";
            
             	EntityDAO dao = new EntityDAO(emp);
             	return dao.Find();
             }
             </code>
             </example>
        </member>
        <member name="M:FistCore.Core.EntityDAO.Find(System.Int32)">
            <summary>
            Selects all rows that match an automatically created filter based on all properties that have been set.
            Predicates are combined by AND operators. Data is sorted if the sorter is set.
            </summary>
            <param name="maxNumberOfItemsToReturn">Maximum number of items that will be returned.
            If set to zero or a negative value, all rows matching the criteria will be returned.</param>
            <returns>Rows that match the automatically created filter.</returns>
        </member>
        <member name="M:FistCore.Core.EntityDAO.FindMatchingAnyCriteria">
            <summary>
            Selects all rows that match an automatically created filter based on all properties that have been set.
            Predicates are combined by OR operators. Data is sorted if the sorter is set.
            </summary>
            <returns>Rows that match the automatically created filter.</returns>
        </member>
        <member name="M:FistCore.Core.EntityDAO.FindMatchingAnyCriteria(System.Int32)">
            <summary>
            Selects all rows that match an automatically created filter based on all properties that have been set.
            Predicates are combined by OR operators. Data is sorted if the sorter is set.
            </summary>
            <param name="maxNumberOfItemsToReturn">Maximum number of items that will be returned.
            If set to zero or a negative value, all rows matching criteria will be returned.</param>
            <returns>Rows that match the automatically created filter.</returns>
        </member>
        <member name="M:FistCore.Core.EntityDAO.SelectAll(System.Collections.IList)">
             <summary>
             Selects all rows from the table. Data is sorted if the sorter is set.
             </summary>
             <param name="destination">A collection to fill with entities built from data.</param>
             <example>
             The following examples selects all employees sorted by their last name.
             <code>
             public EntityCollection&lt;EmployeesEntity, EmployeesMeta&gt; SelectAllEmployeesOrderedByLastName()
             {
             	EmployeesEntity emp = new EmployeesEntity();
             	EntityDAO dao = new EntityDAO(emp);
            
             	// Order by last name. Use ascending order (true).
             	dao.SetSorter(new OrderByClause(emp.Table.LastName, true));
             	var allEmployees = new EntityCollection&lt;EmployeesEntity, EmployeesMeta&gt;();
             	dao.SelectAll(allEmployees);
             	return allEmployees;
             }
             </code>
             </example>
        </member>
        <member name="M:FistCore.Core.EntityDAO.Select(System.Collections.IList,FistCore.Core.IDbColumn,System.Object)">
            <summary>
            Selects all rows that match the filter criteria. Data is sorted if the sorter is set.
            </summary>
            <param name="destination">A collection to fill with entities built from data.</param>
            <param name="column">Column whose value must be equal to the given value to be selected.</param>
            <param name="value">Value. May be <b>null</b>.</param>
            <remarks>The method creates a <see cref="T:FistCore.Core.SearchCondition"/> that compares the specified column
            to the given value. Only the rows where the specified column matches the given value are selected.</remarks>
            <example>
            The following example selects all employees that live in New York.
            <code>
            public EntityCollection&lt;EmployeesEntity, EmployeesMeta&gt; SelectNewYorkers()
            {
            	EmployeesEntity emp = new EmployeesEntity();
            	EntityDAO dao = new EntityDAO(emp);
            	var nyEmployees = new EntityCollection&lt;EmployeesEntity, EmployeesMeta&gt;();
            	dao.Select(nyEmployees, emp.Table.City, "New York");
            	return newYorkEmployees;
            }
            </code>
            </example>
        </member>
        <member name="M:FistCore.Core.EntityDAO.Select(System.Collections.IList,FistCore.Core.RelationBucket,FistCore.Core.SearchCondition)">
             <summary>
             Selects all rows that match the filter criteria. Data is sorted if the sorter is set.
             </summary>
             <param name="destination">A collection to fill with entities built from data.</param>
             <param name="relations">Relations. May be <b>null</b> if the filter doesn't use other tables.</param>
             <param name="filter">The search condition which restricts the rows returned.</param>
             <example>
             The following example uses the Select method that allows advanced filtering using RelationBucket
             and SearchCondition objects. It selects all employees that are in charge of the New York territory.
             <code>
             public EntityCollection&lt;EmployeesEntity, EmployeesMeta&gt; SelectEmployeesInChargeOfNewYorkTerritory()
             {
             	EmployeesEntity emp = new EmployeesEntity();
            
             	// Create a relation between Employees and EmployeeTerritories tables.
             	// Employees is a parent table.
             	// EmployeeTerritories is a child table.
             	// EmployeeTerritories.EmployeeID is a foreign key.
             	EmployeeTerritoriesMeta empTerritories = new EmployeeTerritoriesMeta();
             	RelationBucket relations = new RelationBucket();
             	relations.Add(new DbRelation(emp.Table, empTerritories, empTerritories.EmployeeID));
            
             	// Create a search condition with a single predicate.
             	// Comparisson predicate compares TerritoryID field to given value (New York ID)
             	// using the specified comparison operator (ComparisonOperator.Equal).
             	SearchCondition territoryIdEqualsNy = new SearchCondition();
             	territoryIdEqualsNy.Add(PredicateFactory.Compare(empTerritories.TerritoryID, ComparisonOperator.Equal, "10019"));
            
             	// Select all employees that are in charge of the New York territory.
             	EntityDAO dao = new EntityDAO(emp);
             	var nyEmployees = new EntityCollection&lt;EmployeesEntity, EmployeesMeta&gt;();
             	dao.Select(relations, territoryIdEqualsNy);
             	return nyEmployees;
             }
             </code>
             </example>
        </member>
        <member name="M:FistCore.Core.EntityDAO.Select(System.Collections.IList,FistCore.Core.RelationBucket,FistCore.Core.SearchCondition,System.Int32)">
             <summary>
             Selects all rows that match the filter criteria. Data is sorted if the sorter is set.
             </summary>
             <param name="destination">A collection to fill with entities built from data.</param>
             <param name="relations">Relations. May be <b>null</b> if the filter doesn't use other tables.</param>
             <param name="filter">The search condition which restricts the rows returned.</param>
             <param name="maxNumberOfItemsToReturn">Maximum number of items that will be returned.
             If set to zero or a negative value, all rows matching criteria will be returned.</param>
             <example>
             The following example uses the Select method that allows advanced filtering using RelationBucket
             and SearchCondition objects. It selects all employees that are in charge of the New York territory.
             <code>
             public EntityCollection&lt;EmployeesEntity, EmployeesMeta&gt; SelectEmployeesInChargeOfNewYorkTerritory()
             {
             	EmployeesEntity emp = new EmployeesEntity();
            
             	// Create a relation between Employees and EmployeeTerritories tables.
             	// Employees is a parent table.
             	// EmployeeTerritories is a child table.
             	// EmployeeTerritories.EmployeeID is a foreign key.
             	EmployeeTerritoriesMeta empTerritories = new EmployeeTerritoriesMeta();
             	RelationBucket relations = new RelationBucket();
             	relations.Add(new DbRelation(emp.Table, empTerritories, empTerritories.EmployeeID));
            
             	// Create a search condition with a single predicate.
             	// Comparisson predicate compares TerritoryID field to given value (New York ID)
             	// using the specified comparison operator (ComparisonOperator.Equal).
             	SearchCondition territoryIdEqualsNy = new SearchCondition();
             	territoryIdEqualsNy.Add(PredicateFactory.Compare(empTerritories.TerritoryID, ComparisonOperator.Equal, "10019"));
            
             	// Select all employees that are in charge of the New York territory.
             	EntityDAO dao = new EntityDAO(emp);
             	var nyEmployees = new EntityCollection&lt;EmployeesEntity, EmployeesMeta&gt;();
             	dao.Select(nyEmployees, relations, territoryIdEqualsNy, 0);
             	return nyEmployees;
             }
             </code>
             </example>
        </member>
        <member name="M:FistCore.Core.EntityDAO.Find(System.Collections.IList)">
             <summary>
             Selects all rows that match an automatically created filter based on all properties that have been set.
             Predicates are combined by AND operators. Data is sorted if the sorter is set.
             </summary>
             <param name="destination">A collection to fill with entities built from data.</param>
             <example>
             The following example select all employees whose first name is "John" and the last name is "Smith".
             <code>
             public EntityCollection&lt;EmployeesEntity, EmployeesMeta&gt; FindAllJohnSmiths()
             {
             	EmployeesEntity emp = new EmployeesEntity();
             	emp.FirstName = "John";
             	emp.LastName = "Smith";
            
             	EntityDAO dao = new EntityDAO(emp);
             	var johnSmiths = new EntityCollection&lt;EmployeesEntity, EmployeesMeta&gt;();
             	dao.Find(johnSmiths);
             	return johnSmiths;
             }
             </code>
             </example>
        </member>
        <member name="M:FistCore.Core.EntityDAO.Find(System.Collections.IList,System.Int32)">
            <summary>
            Selects all rows that match an automatically created filter based on all properties that have been set.
            Predicates are combined by AND operators. Data is sorted if the sorter is set.
            </summary>
            <param name="destination">A collection to fill with entities built from data.</param>
            <param name="maxNumberOfItemsToReturn">Maximum number of items that will be returned.
            If set to zero or a negative value, all rows matching the criteria will be returned.</param>
        </member>
        <member name="M:FistCore.Core.EntityDAO.FindMatchingAnyCriteria(System.Collections.IList)">
            <summary>
            Selects all rows that match an automatically created filter based on all properties that have been set.
            Predicates are combined by OR operators. Data is sorted if the sorter is set.
            </summary>
            <param name="destination">A collection to fill with entities built from data.</param>
        </member>
        <member name="M:FistCore.Core.EntityDAO.FindMatchingAnyCriteria(System.Collections.IList,System.Int32)">
            <summary>
            Selects all rows that match an automatically created filter based on all properties that have been set.
            Predicates are combined by OR operators. Data is sorted if the sorter is set.
            </summary>
            <param name="destination">A collection to fill with entities built from data.</param>
            <param name="maxNumberOfItemsToReturn">Maximum number of items that will be returned.
            If set to zero or a negative value, all rows matching criteria will be returned.</param>
        </member>
        <member name="M:FistCore.Core.EntityDAO.Update(FistCore.Core.IDbColumn,System.Object,System.Object)">
            <summary>
            Updates all rows that match the filter criteria.
            </summary>
            <param name="column">Column whose value must be equal to the given old value to be updated.</param>
            <param name="oldValue">Old value of the column. May be <b>null</b>.</param>
            <param name="newValue">New value of the column. May be <b>null</b>.</param>
            <returns>Number of rows affected.</returns>
            <remarks>Updates the values in the specified column. Old value is changed to new value.
            Often used to update a foreign key column.</remarks>
            <example>
            The following example updates ReportsTo field in the Employees table. An old value is changed to a new one.
            <code>
            public void ChangeBoss(int oldBossId, int newBossId)
            {
            	EmployeesEntity emp = new EmployeesEntity();
            	EntityDAO dao = new EntityDAO(emp);
            	dao.Update(emp.Table.ReportsTo, oldBossId, newBossId);
            }
            </code>
            </example>
        </member>
        <member name="M:FistCore.Core.EntityDAO.Update(FistCore.Core.SearchCondition)">
             <summary>
             Updates all rows that match the filter criteria.
             </summary>
             <param name="filter">The search condition which limits the number of rows that are updated.
             Throws exception if <b>null</b> or an empty SearchCondition is passed as an argument.</param>
             <returns>Number of rows affected.</returns>
             <remarks><p>Updates all rows that match the given filter with the values contained in this entity.
             The members that haven't been set are excluded from the SET list which means that NULLs
             cannot be set with this method.</p>
             <p>At least one member must be set or an exception is thrown.</p></remarks>
             <example>
             The following example updates rows in the table Employees. All employees who previously reported to
             the old boss will now report to the new boss. They are all moved to another office and will receive
             new phone extension.
             <code>
             public void ChangeBossAndPhone(int oldBossId, int newBossId, string newPhoneExtension)
             {
             	EmployeesEntity emp = new EmployeesEntity();
            
             	// Set the new values.
             	emp.ReportsTo = newBossId;
             	emp.Extension = newPhoneExtension;
            
             	// Update only the employees who previously reported to the old boss.
             	EntityDAO dao = new EntityDAO(emp);
             	dao.Update(new SearchCondition(PredicateFactory.Compare(emp.Table.ReportsTo, ComparisonOperator.Equal, oldBossId)));
             }
             </code>
             </example>
        </member>
        <member name="M:FistCore.Core.EntityDAO.Update(FistCore.Core.UpdateList,FistCore.Core.SearchCondition)">
             <summary>
             Updates all rows that match the filter criteria.
             </summary>
             <param name="setExpressions">The list of columns to be updated and expressions that compute/contain
             the new values. Throws exception if <b>null</b> or an empty UpdateList is passed as an argument.</param>
             <param name="filter">The search condition which limits the number of rows that are updated.
             Throws exception if <b>null</b> or an empty SearchCondition is passed as an argument.</param>
             <returns>Number of rows affected.</returns>
             <remarks>Updates all rows in the table that match the specified filter with values/expressions in the given SET list.</remarks>
             <example>
             The following example updates rows in the table Employees. Field ReportsTo will be set to <b>null</b> for specified rows.
             <code>
             public void SetBossToNull(int[] employees)
             {
             	// IN predicate expects an array of objects.
             	// int[] must be converted to object[]
             	object[] oEmployeeIds = new object[employees.Length];
             	employees.CopyTo(oEmployeeIds, 0);
            
             	// Employees whose IDs are in the given array will report to no one.
             	EmployeesEntity emp = new EmployeesEntity();
             	UpdateList setBossToNull = new UpdateList(emp.Table.ReportsTo, null);
             	SearchCondition employeesInArray = new SearchCondition(PredicateFactory.In(emp.Table.EmployeeID, oEmployeeIds));
            
             	EntityDAO dao = new EntityDAO(emp);
             	dao.Update(setBossToNull, employeesInArray);
             }
             </code>
             </example>
        </member>
        <member name="M:FistCore.Core.EntityDAO.Count(FistCore.Core.IDbColumn,System.Object)">
            <summary>
            Counts all rows in the entity's parent table that match the filter criteria.
            </summary>
            <param name="column">Column whose value must be equal to the given value to be included in the count.</param>
            <param name="value">Value. May be <b>null</b>.</param>
            <returns>Number of rows that match the filter.</returns>
            <remarks>The method creates a <see cref="T:FistCore.Core.SearchCondition"/> that compares the specified column to
            the given value. Only the rows where the specified column matches the given value are counted.</remarks>
            <example>
            The following example returns the number of employees that live in New York.
            <code>
            public int CountNewYorkers()
            {
            	EmployeesEntity emp = new EmployeesEntity();
            	EntityDAO dao = new EntityDAO(emp);
            	int count = dao.Count(emp.Table.City, "New York");
            	return count;
            }
            </code>
            </example>
        </member>
        <member name="M:FistCore.Core.EntityDAO.Count(FistCore.Core.RelationBucket,FistCore.Core.SearchCondition)">
             <summary>
             Counts all rows in the entity's parent table that match the filter criteria.
             </summary>
             <param name="relations">Relations. May be <b>null</b> if the filter doesn't use other tables.</param>
             <param name="filter">The search condition which restricts the rows counted.</param>
             <returns>Number of rows that match the filter.</returns>
             <example>
             The following example uses the Count method that allows advanced filtering using RelationBucket
             and SearchCondition objects. It returns the number of employees that are in charge of the New York territory.
             <code>
             public int CountEmployeesInChargeOfNewYorkTerritory()
             {
             	EmployeesEntity emp = new EmployeesEntity();
            
             	// Create a relation between Employees and EmployeeTerritories tables.
             	// Employees is a parent table.
             	// EmployeeTerritories is a child table.
             	// EmployeeTerritories.EmployeeID is a foreign key.
             	EmployeeTerritoriesMeta empTerritories = new EmployeeTerritoriesMeta();
             	RelationBucket relations = new RelationBucket();
             	relations.Add(new DbRelation(emp.Table, empTerritories, empTerritories.EmployeeID));
            
             	// Create a search condition with a single predicate.
             	// Comparisson predicate compares TerritoryID field to given value (New York ID)
             	// using the specified comparison operator (ComparisonOperator.Equal).
             	SearchCondition territoryIdEqualsNy = new SearchCondition();
             	territoryIdEqualsNy.Add(PredicateFactory.Compare(empTerritories.TerritoryID, ComparisonOperator.Equal, "10019"));
            
             	// Count all employees that are in charge of the New York territory.
             	EntityDAO dao = new EntityDAO(emp);
             	int count = dao.Count(relations, territoryIdEqualsNy);
             	return count;
             }
             </code>
             </example>
        </member>
        <member name="M:FistCore.Core.EntityDAO.Max(FistCore.Core.IDbColumn)">
            <summary>
            Retrieves the maximum value in the given column.
            </summary>
            <param name="column">Column. Must belong to the current entity's table.</param>
            <returns>Maximum value in the given column. <see cref="F:System.DBNull.Value"/> if table doesn't contain any rows or
            if all rows have a <b>null</b> value in the specified field.</returns>
        </member>
        <member name="M:FistCore.Core.EntityDAO.Max(FistCore.Core.IDbColumn,FistCore.Core.RelationBucket,FistCore.Core.SearchCondition)">
            <summary>
            Retrieves the maximum value in the given column.
            </summary>
            <param name="column">Column. Must belong to the current entity's table.</param>
            <param name="relations">Relations. May be <b>null</b> if the filter doesn't use other tables.</param>
            <param name="filter">The search condition which restricts the rows included.</param>
            <returns>Maximum value in the given column. <see cref="F:System.DBNull.Value"/> if table doesn't contain any rows or
            if all rows that match the criteria have a <b>null</b> value in the specified field.</returns>
        </member>
        <member name="M:FistCore.Core.EntityDAO.Min(FistCore.Core.IDbColumn)">
            <summary>
            Retrieves the minimum value in the given column.
            </summary>
            <param name="column">Column. Must belong to the current entity's table.</param>
            <returns>Minimum value in the given column. <see cref="F:System.DBNull.Value"/> if table doesn't contain any rows or
            if all rows have a <b>null</b> value in the specified field.</returns>
        </member>
        <member name="M:FistCore.Core.EntityDAO.Min(FistCore.Core.IDbColumn,FistCore.Core.RelationBucket,FistCore.Core.SearchCondition)">
            <summary>
            Retrieves the minimum value in the given column.
            </summary>
            <param name="column">Column. Must belong to the current entity's table.</param>
            <param name="relations">Relations. May be <b>null</b> if the filter doesn't use other tables.</param>
            <param name="filter">The search condition which restricts the rows included.</param>
            <returns>Minimum value in the given column. <see cref="F:System.DBNull.Value"/> if table doesn't contain any rows or
            if all rows that match the criteria have a <b>null</b> value in the specified field.</returns>
        </member>
        <member name="M:FistCore.Core.EntityDAO.Sum(FistCore.Core.IDbColumn)">
            <summary>
            Retrieves the sum of the values in the given column.
            </summary>
            <param name="column">Column. Must be a numeric column that belongs to the current entity's table.</param>
            <returns>The sum of the values in the given column. <see cref="F:System.DBNull.Value"/> if table doesn't contain any rows or
            if all rows have a <b>null</b> value in the specified field.</returns>
            <remarks>SUM can be used with numeric columns only. Null values are ignored.</remarks>
        </member>
        <member name="M:FistCore.Core.EntityDAO.Sum(FistCore.Core.IDbColumn,FistCore.Core.RelationBucket,FistCore.Core.SearchCondition)">
            <summary>
            Retrieves the sum of the values in the given column.
            </summary>
            <param name="column">Column. Must be a numeric column that belongs to the current entity's table.</param>
            <param name="relations">Relations. May be <b>null</b> if the filter doesn't use other tables.</param>
            <param name="filter">The search condition which restricts the rows included.</param>
            <returns>The sum of the values in the given column. <see cref="F:System.DBNull.Value"/> if table doesn't contain any rows or
            if all rows that match the criteria have a <b>null</b> value in the specified field.</returns>
            <remarks>SUM can be used with numeric columns only. Null values are ignored.</remarks>
        </member>
        <member name="M:FistCore.Core.EntityDAO.Avg(FistCore.Core.IDbColumn)">
            <summary>
            Retrieves the average of the values in the given column.
            </summary>
            <param name="column">Column. Must be a numeric column that belongs to the current entity's table.</param>
            <returns>The average of the values in the given column. <see cref="F:System.DBNull.Value"/> if table doesn't contain any rows or
            if all rows that match the criteria have a <b>null</b> value in the specified field.</returns>
            <remarks>AVG can be used with numeric columns only. Null values are ignored.</remarks>
        </member>
        <member name="M:FistCore.Core.EntityDAO.Avg(FistCore.Core.IDbColumn,FistCore.Core.RelationBucket,FistCore.Core.SearchCondition)">
            <summary>
            Retrieves the average of the values in the given column.
            </summary>
            <param name="column">Column. Must be a numeric column that belongs to the current entity's table.</param>
            <param name="relations">Relations. May be <b>null</b> if the filter doesn't use other tables.</param>
            <param name="filter">The search condition which restricts the rows included.</param>
            <returns>The average of the values in the given column. <see cref="F:System.DBNull.Value"/> if table doesn't contain any rows or
            if all rows that match the criteria have a <b>null</b> value in the specified field.</returns>
            <remarks>AVG can be used with numeric columns only. Null values are ignored.</remarks>
        </member>
        <member name="M:FistCore.Core.EntityDAO.SelectOne(System.Boolean)">
             <summary>
             Selects one existing entity from the database based on the Primary Key and populates entity with the retrieved data.
             </summary>
             <param name="fetchParentEntities">Indicates whether the parent entities defined by the foreign keys
             in the acompanying IDbTable class are to be fetched.</param>
             <returns>True if select succeeded; false if primary key is not defined for this table,
             if the primary key values are not set or if the entity does not exist.</returns>
             <remarks><p>Parent entities are fetched using the same open connection.</p>
             <p>When <c>fetchParentEntities</c> is set to <b>false</b>, the method behavior is the same
             as that of the SelectOne method without parameters.</p></remarks>
             <example>
             The following example fetches employee and its parent entities.
             <code>
             public void DisplayEmployeeAndHisManager(int employeeId)
             {
             	EmployeesEntity employee = new EmployeesEntity();
             	employee.EmployeeID = employeeId;
            
             	// SelectOne will select the employee and his manager defined by the ReportsTo field.
             	// Both entities are fetched using the same connection.
             	bool employeeExists = employee.SelectOne(true);
            
             	if (employeeExists)
             	{
             		EmployeesEntity manager = employee.EmployeesSuperior;
             		string managerData;
             		if (manager != null)
             			managerData = "Manager: " + manager.FirstName + " " + manager.LastName;
             		else
             			managerData = "Manager: N/A";
            
             		string employeeData = "Employee: " + employee.FirstName + " " + employee.LastName;		///
             		MessageBox.Show(employeeData + Environment.NewLine + managerData);
             	}
             	else
             	{
             		MessageBox.Show("Specified employee doesn't exist.");
             	}
             }
             </code>
             </example>
        </member>
        <member name="M:FistCore.Core.EntityDAO.SelectOne(FistCore.Core.DbRelation[])">
            <summary>
            Selects one existing entity from the database based on the Primary Key and populates entity with the retrieved data.
            </summary>
            <param name="parentsToFetch">Relations (foreign keys) to parents which are to be fetched. Child table
            of the given FK must be the current entity's table; otherwise an exception is generated.</param>
            <returns>True if select succeeded; false otherwise.</returns>
        </member>
        <member name="M:FistCore.Core.EntityDAO.FetchParent(FistCore.Core.DbRelation)">
            <summary>
            Fetches a parent entity defined by the foreign key from the data source and stores in into current entity.
            </summary>
            <param name="foreignKey">FK. Child table of the given FK must be the current entity's table;
            otherwise an exception is generated.</param>
            <returns>Parent entity. Parent entity. <b>Null</b> if the FK fields haven't been set or if the parent entity with the given key values doesn't exist.</returns>
            <remarks>Entity members are affected only if the select operation succeeded.</remarks>
        </member>
        <member name="M:FistCore.Core.EntityDAO.FetchAllParents">
            <summary>
            Fetches all parent entities defined by entity's foreign keys from the data source and stores them into current entity.
            </summary>
            <returns>Parent entities. Some may be <b>null</b> if the required FK fields haven't been set or if the entities
            with the given key values don't exist.</returns>
        </member>
        <member name="M:FistCore.Core.EntityDAO.FetchParents(FistCore.Core.DbRelation[])">
            <summary>
            Fetches parent entities defined by the given relations from the data source and stores them into current entity.
            </summary>
            <param name="parentsToFetch">Relations (foreign keys) to parents which are to be fetched. Child table
            of the given FK must be the current entity's table; otherwise an exception is generated.</param>
            <returns>Parent entities. Some may be <b>null</b> if the required FK fields haven't been set or if the entities
            with the given key values don't exist.</returns>
            <remarks>Preffer using this method instead of a sequence of <see cref="M:FistCore.Core.EntityDAO.FetchParent(FistCore.Core.DbRelation)"/> method
            invocations. Future optimizers will have a better chance to speed up data access when they know in ahead
            what data is to be fetched.</remarks>
        </member>
        <member name="M:FistCore.Core.EntityDAO.FetchChildren(System.Collections.IList,FistCore.Core.DbRelation,FistCore.Core.OrderByClause)">
             <summary>
             Fetches child entities that reference the current entity.
             </summary>
             <param name="destination">A collection to fill with entities built from data. Will contain entities from the child table whose foreign key matches this entity's primary key.</param>
             <param name="relation">Relation between the current entity's table and another (child) table.
             Parent table of the given relation must be this entity's table; otherwise an exception is generated.</param>
             <param name="orderBy">Specifies the order in which the entities are added to output collection.</param>
             <remarks>An exception is generated if the current entity's primary key value is not set.</remarks>
             <example>
             The following example fetches a region and all territories it contains.
             <code>
             RegionEntity easternRegion = new RegionEntity();
             easternRegion.RegionID = 1;
             EntityDAO daoRegions = new EntityDAO(easternRegion);
            
             // Parent (region) and children (territories) data are fetched using the same connection.
             daoRegions.ConnectionProvider.OpenConnection();
            
             // Fetch region and children defined by the Territories.RegionID foreign key.
             daoRegions.SelectOne();
             var easternTerritories = new EntityCollection&lt;EmployeesEntity, EmployeesMeta&gt;();
             daoRegions.FetchChildren(easternTerritories, new TerritoriesMeta().FK_RegionID, null);
            
             // Explicitly close the connection that was openned manually and return it to the connection pool.
             daoRegions.ConnectionProvider.CloseConnection();
             </code>
             </example>
        </member>
        <member name="M:FistCore.Core.EntityDAO.FetchChildren(System.Collections.IList,FistCore.Core.DbRelation,FistCore.Core.IDbColumn,System.Object,FistCore.Core.OrderByClause)">
            <summary>
            Fetches child entities that reference the current entity.
            </summary>
            <param name="destination">A collection to fill with entities built from data. Will contain entities from the child table whose foreign key matches this entity's primary key.</param>
            <param name="relation">Relation between the current entity's table and another (child) table.
            Parent table of the given relation must be this entity's table; otherwise an exception is generated.</param>
            <param name="childField">Child field whose value must be equal the given value to be selected.</param>
            <param name="childFieldValue">Value of the given child field. May be <b>null</b>.</param>
            <param name="orderBy">Specifies the order in which the entities are added to output collection.</param>
            <remarks>The method creates a <see cref="T:FistCore.Core.SearchCondition"/> that compares the specified column to
            the given value. Only the child rows where the specified column matches the given value are selected.
            Very often database is designed so that the child entities are not deleted from the database but are
            marked as deleted instead. This method may be used when only child rows with a specific status value
            (eg. STATUS = 1) are to be fetched.</remarks>
        </member>
        <member name="M:FistCore.Core.EntityDAO.FetchChildren(System.Collections.IList,FistCore.Core.ManyToManyRelation,FistCore.Core.OrderByClause)">
             <summary>
             Fetches child entities that reference the current entity.
             </summary>
             <param name="destination">A collection to fill with entities built from data. Will contain entities from the child table whose foreign key matches this entity's primary key.</param>
             <param name="mnRelation">Many-to-many relation. Current entity's table acts as a parent table,
             the other primary table in the relation acts as a child. Resursive M:N relations are not allowed.</param>
             <param name="orderBy">Specifies the order in which the entities are added to output collection.</param>
             <remarks>When a single database table is used as both the first and the second primary table of an M:N
             relation then it must be explicitly specified which one is used as a parent and which one as a child table.
             This can be accomplished by using one of the overloaded FetchChildren methods that accept a <see cref="T:FistCore.Core.PrimaryTableIndex"/> parameter.</remarks>
             <example>
             The following example fetches children entities using a many-to-many relation.
             <code>
             public EntityCollection&lt;EmployeesEntity, EmployeesMeta&gt; FetchEmployeeTerritories(EmployeesEntity employee)
             {
             	// Fetch territories that the given employee is in charge of.
            
             	// An employee can be in charge of multiple territories.
             	// Multiple employees can be in charge of a single territory.
             	// Employees and Territories table are related by creating junction rows in EmployeeTerritories table.
             	// EmployeeTerritories table has a primary key which is composed of two foreign keys.
             	// These two one-to-many (1:N) relations can be modeled as a one many-to-many (M:N) relation.
            
             	EmployeeTerritoriesMeta junctionTable = new EmployeeTerritoriesMeta();
             	ManyToManyRelation mnRelation = new ManyToManyRelation(junctionTable.FK_EmployeeID, junctionTable.FK_TerritoryID);
            
            		EntityDAO daoEmployees = new EntityDAO(employee);
            		var territories = new EntityCollection&lt;EmployeesEntity, EmployeesMeta&gt;();
             	daoEmployees.FetchChildren(territories, mnRelation, null);
             	return territories;
             }
             </code>
             </example>
        </member>
        <member name="M:FistCore.Core.EntityDAO.FetchChildren(System.Collections.IList,FistCore.Core.ManyToManyRelation,FistCore.Core.PrimaryTableIndex,FistCore.Core.OrderByClause)">
            <summary>
            Fetches child entities that reference the current entity.
            </summary>
            <param name="destination">A collection to fill with entities built from data. Will contain entities from the child table whose foreign key matches this entity's primary key.</param>
            <param name="mnRelation">Many-to-many relation. Current entity's table acts as a parent table,
            the other primary table in the relation acts as a child. May be recursive.</param>
            <param name="parent">Indicates which of the two primary tables in the M:N relation acts as a parent.</param>
            <param name="orderBy">Specifies the order in which the entities are added to output collection.</param>
            <remarks>When a single database table is used as both the first and the second primary table of an M:N
            relation then it must be explicitly specified which one is used as a parent and which one as a child table.</remarks>
        </member>
        <member name="M:FistCore.Core.EntityDAO.FetchChildren(System.Collections.IList,FistCore.Core.ManyToManyRelation,FistCore.Core.IDbColumn,System.Object,FistCore.Core.OrderByClause)">
            <summary>
            Fetches child entities that reference the current entity.
            </summary>
            <param name="destination">A collection to fill with entities built from data. Will contain entities from the child table whose foreign key matches this entity's primary key.</param>
            <param name="mnRelation">Many-to-many relation. Current entity's table acts as a parent table,
            the other primary table in the relation acts as a child. Resursive M:N relations are not allowed.</param>
            <param name="childField">Child field whose value must be equal the given value to be selected.</param>
            <param name="childFieldValue">Value of the given child field. May be <b>null</b>.</param>
            <param name="orderBy">Specifies the order in which the entities are added to output collection.</param>
            <remarks><p>The method creates a <see cref="T:FistCore.Core.SearchCondition"/> that compares the specified column to
            the given value. Only the child rows where the specified column matches the given value are selected.
            Very often database is designed so that the child entities are not deleted from the database but are
            marked as deleted instead. This method may be used when only child rows with a specific status value
            (eg. STATUS = 1) are to be fetched. In addition, a SearchCondition may be created which filters out rows from the junction table.
            See <see cref="P:FistCore.Core.ManyToManyRelation.JunctionRowsFilter"/> for more information.</p>
            <p>When a single database table is used as both the first and the second primary table of an M:N
            relation then it must be explicitly specified which one is used as a parent and which one as a child table.
            This can be accomplished by using one of the overloaded FetchChildren methods that accept a <see cref="T:FistCore.Core.PrimaryTableIndex"/> parameter.</p></remarks>
        </member>
        <member name="M:FistCore.Core.EntityDAO.FetchChildren(System.Collections.IList,FistCore.Core.ManyToManyRelation,FistCore.Core.PrimaryTableIndex,FistCore.Core.IDbColumn,System.Object,FistCore.Core.OrderByClause)">
            <summary>
            Fetches child entities that reference the current entity.
            </summary>
            <param name="destination">A collection to fill with entities built from data. Will contain entities from the child table whose foreign key matches this entity's primary key.</param>
            <param name="mnRelation">Many-to-many relation. Current entity's table acts as a parent table,
            the other primary table in the relation acts as a child. May be recursive.</param>
            <param name="parent">Indicates which of the two primary tables in the M:N relation acts as a parent.</param>
            <param name="childField">Child field whose value must be equal the given value to be selected.</param>
            <param name="childFieldValue">Value of the given child field. May be <b>null</b>.</param>
            <param name="orderBy">Specifies the order in which the entities are added to output collection.</param>
            <remarks><p>The method creates a <see cref="T:FistCore.Core.SearchCondition"/> that compares the specified column to
            the given value. Only the child rows where the specified column matches the given value are selected.
            Very often database is designed so that the child entities are not deleted from the database but are
            marked as deleted instead. This method may be used when only child rows with a specific status value
            (eg. STATUS = 1) are to be fetched. In addition, a SearchCondition may be created which filters out rows
            from the junction table. See <see cref="P:FistCore.Core.ManyToManyRelation.JunctionRowsFilter"/> for more information.</p>
            <p>When a single database table is used as both the first and the second primary table of an M:N
            relation then it must be explicitly specified which one is used as a parent and which one as a child table.</p></remarks>
        </member>
        <member name="M:FistCore.Core.EntityDAO.FetchChildren(System.Collections.IList[],FistCore.Core.DbRelation[])">
            <summary>
            Fetches child entities from multiple tables that reference the current entity.
            </summary>
            <param name="destinationCollections">Collections to fill with entities built from data. Will contain entities from the child table whose foreign key matches this entity's primary key.</param>
            <param name="childrenToFetch">Relations between the current entity's table and child tables. The count and order must match collections.</param>
            <remarks>Preffer using this method instead of a sequence of <see cref="M:FistCore.Core.EntityDAO.FetchChildren(FistCore.Core.DbRelation)"/>
            method invocations. Future optimizers will have a better chance to speed up data access when they know in ahead
            what data is to be fetched.</remarks>
        </member>
        <member name="M:FistCore.Core.EntityDAO.FetchChildren``1(FistCore.Core.DbRelation,FistCore.Core.OrderByClause)">
             <summary>
             Fetches child entities that reference the current entity.
             </summary>
             <param name="relation">Relation between the current entity's table and another (child) table.
             Parent table of the given relation must be this entity's table; otherwise an exception is generated.</param>
             <param name="orderBy">Specifies the order in which the entities are added to output collection.</param>
             <returns>Entities from the child table whose foreign key matches this entity's primary key.</returns>
             <remarks>An exception is generated if the current entity's primary key value is not set.</remarks>
             <example>
             The following example fetches a region and all territories it contains.
             <code>
             RegionEntity easternRegion = new RegionEntity();
             easternRegion.RegionID = 1;
             EntityDAO daoRegions = new EntityDAO(easternRegion);
            
             // Parent (region) and children (territories) data are fetched using the same connection.
             daoRegions.ConnectionProvider.OpenConnection();
            
             // Fetch region and children defined by the Territories.RegionID foreign key.
             daoRegions.SelectOne();
             var easternTerritories = daoRegions.FetchChildren&lt;List&lt;TerritoriesEntity&gt;&gt;(new TerritoriesMeta().FK_RegionID, null);
            
             // Explicitly close the connection that was openned manually and return it to the connection pool.
             daoRegions.ConnectionProvider.CloseConnection();
             </code>
             </example>
        </member>
        <member name="M:FistCore.Core.EntityDAO.FetchChildren``1(FistCore.Core.DbRelation,FistCore.Core.IDbColumn,System.Object,FistCore.Core.OrderByClause)">
            <summary>
            Fetches child entities that reference the current entity.
            </summary>
            <param name="relation">Relation between the current entity's table and another (child) table.
            Parent table of the given relation must be this entity's table; otherwise an exception is generated.</param>
            <param name="childField">Child field whose value must be equal the given value to be selected.</param>
            <param name="childFieldValue">Value of the given child field. May be <b>null</b>.</param>
            <param name="orderBy">Specifies the order in which the entities are added to output collection.</param>
            <returns>Entities from the child table whose foreign key matches this entity's primary key.</returns>
            <remarks>The method creates a <see cref="T:FistCore.Core.SearchCondition"/> that compares the specified column to
            the given value. Only the child rows where the specified column matches the given value are selected.
            Very often database is designed so that the child entities are not deleted from the database but are
            marked as deleted instead. This method may be used when only child rows with a specific status value
            (eg. STATUS = 1) are to be fetched.</remarks>
        </member>
        <member name="M:FistCore.Core.EntityDAO.FetchChildren``1(FistCore.Core.ManyToManyRelation,FistCore.Core.OrderByClause)">
             <summary>
             Fetches child entities that reference the current entity.
             </summary>
             <param name="mnRelation">Many-to-many relation. Current entity's table acts as a parent table,
             the other primary table in the relation acts as a child. Resursive M:N relations are not allowed.</param>
             <param name="orderBy">Specifies the order in which the entities are added to output collection.</param>
             <returns>Records form the child table that reference the current entity through junction table of the M:N relation.</returns>
             <remarks>When a single database table is used as both the first and the second primary table of an M:N
             relation then it must be explicitly specified which one is used as a parent and which one as a child table.
             This can be accomplished by using one of the overloaded FetchChildren methods that accept a <see cref="T:FistCore.Core.PrimaryTableIndex"/> parameter.</remarks>
             <example>
             The following example fetches children entities using a many-to-many relation.
             <code>
             public EntityCollection&lt;TerritoriesEntity, TerritoriesMeta&gt; FetchTerritoriesForEmployee(EmployeesEntity employee)
             {
             	// Fetch territories that the given employee is in charge of.
            
             	// An employee can be in charge of multiple territories.
             	// Multiple employees can be in charge of a single territory.
             	// Employees and Territories table are related by creating junction rows in EmployeeTerritories table.
             	// EmployeeTerritories table has a primary key which is composed of two foreign keys.
             	// These two one-to-many (1:N) relations can be modeled as a one many-to-many (M:N) relation.
            
             	EmployeeTerritoriesMeta junctionTable = new EmployeeTerritoriesMeta();
             	ManyToManyRelation mnRelation = new ManyToManyRelation(junctionTable.FK_EmployeeID, junctionTable.FK_TerritoryID);
            
            		EntityDAO daoEmployees = new EntityDAO(employee);
             	return daoEmployees.FetchChildren&lt;EntityCollection&lt;TerritoriesEntity, TerritoriesMeta&gt;&gt;(mnRelation, null);
             }
             </code>
             </example>
        </member>
        <member name="M:FistCore.Core.EntityDAO.FetchChildren``1(FistCore.Core.ManyToManyRelation,FistCore.Core.PrimaryTableIndex,FistCore.Core.OrderByClause)">
            <summary>
            Fetches child entities that reference the current entity.
            </summary>
            <param name="mnRelation">Many-to-many relation. Current entity's table acts as a parent table,
            the other primary table in the relation acts as a child. May be recursive.</param>
            <param name="parent">Indicates which of the two primary tables in the M:N relation acts as a parent.</param>
            <param name="orderBy">Specifies the order in which the entities are added to output collection.</param>
            <returns>Records form the child table that reference the current entity through junction table of the M:N relation.</returns>
            <remarks>When a single database table is used as both the first and the second primary table of an M:N
            relation then it must be explicitly specified which one is used as a parent and which one as a child table.</remarks>
        </member>
        <member name="M:FistCore.Core.EntityDAO.FetchChildren``1(FistCore.Core.ManyToManyRelation,FistCore.Core.IDbColumn,System.Object,FistCore.Core.OrderByClause)">
            <summary>
            Fetches child entities that reference the current entity.
            </summary>
            <param name="mnRelation">Many-to-many relation. Current entity's table acts as a parent table,
            the other primary table in the relation acts as a child. Resursive M:N relations are not allowed.</param>
            <param name="childField">Child field whose value must be equal the given value to be selected.</param>
            <param name="childFieldValue">Value of the given child field. May be <b>null</b>.</param>
            <param name="orderBy">Specifies the order in which the entities are added to output collection.</param>
            <returns>Records form the child table that reference the current entity through junction table of the M:N relation.</returns>
            <remarks><p>The method creates a <see cref="T:FistCore.Core.SearchCondition"/> that compares the specified column to
            the given value. Only the child rows where the specified column matches the given value are selected.
            Very often database is designed so that the child entities are not deleted from the database but are
            marked as deleted instead. This method may be used when only child rows with a specific status value
            (eg. STATUS = 1) are to be fetched. In addition, a SearchCondition may be created which filters out rows from the junction table.
            See <see cref="P:FistCore.Core.ManyToManyRelation.JunctionRowsFilter"/> for more information.</p>
            <p>When a single database table is used as both the first and the second primary table of an M:N
            relation then it must be explicitly specified which one is used as a parent and which one as a child table.
            This can be accomplished by using one of the overloaded FetchChildren methods that accept a <see cref="T:FistCore.Core.PrimaryTableIndex"/> parameter.</p></remarks>
        </member>
        <member name="M:FistCore.Core.EntityDAO.FetchChildren``1(FistCore.Core.ManyToManyRelation,FistCore.Core.PrimaryTableIndex,FistCore.Core.IDbColumn,System.Object,FistCore.Core.OrderByClause)">
            <summary>
            Fetches child entities that reference the current entity.
            </summary>
            <param name="mnRelation">Many-to-many relation. Current entity's table acts as a parent table,
            the other primary table in the relation acts as a child. May be recursive.</param>
            <param name="parent">Indicates which of the two primary tables in the M:N relation acts as a parent.</param>
            <param name="childField">Child field whose value must be equal the given value to be selected.</param>
            <param name="childFieldValue">Value of the given child field. May be <b>null</b>.</param>
            <param name="orderBy">Specifies the order in which the entities are added to output collection.</param>
            <returns>Records form the child table that reference the current entity through junction table of the M:N relation.</returns>
            <remarks><p>The method creates a <see cref="T:FistCore.Core.SearchCondition"/> that compares the specified column to
            the given value. Only the child rows where the specified column matches the given value are selected.
            Very often database is designed so that the child entities are not deleted from the database but are
            marked as deleted instead. This method may be used when only child rows with a specific status value
            (eg. STATUS = 1) are to be fetched. In addition, a SearchCondition may be created which filters out rows
            from the junction table. See <see cref="P:FistCore.Core.ManyToManyRelation.JunctionRowsFilter"/> for more information.</p>
            <p>When a single database table is used as both the first and the second primary table of an M:N
            relation then it must be explicitly specified which one is used as a parent and which one as a child table.</p></remarks>
        </member>
        <member name="M:FistCore.Core.EntityDAO.FetchChildren(FistCore.Core.DbRelation)">
             <summary>
             Fetches child entities that reference the current entity.
             </summary>
             <param name="relation">Relation between the current entity's table and another (child) table.
             Parent table of the given relation must be this entity's table; otherwise an exception is generated.</param>
             <returns>Rows from the child table whose foreign key matches this entity's primary key.</returns>
             <remarks>An exception is generated if the current entity's primary key value is not set.</remarks>
             <example>
             The following example fetches a region and all territories it contains.
             <code>
             RegionEntity easternRegion = new RegionEntity();
             easternRegion.RegionID = 1;
             EntityDAO daoRegions = new EntityDAO(easternRegion);
            
             // Parent (region) and children (territories) data are fetched using the same connection.
             daoRegions.ConnectionProvider.OpenConnection();
            
             // Fetch region and children defined by the Territories.RegionID foreign key.
             daoRegions.SelectOne();
             DataTable easternTerritories = daoRegions.FetchChildren(new TerritoriesMeta().FK_RegionID);
            
             // Explicitly close the connection that was openned manually and return it to the connection pool.
             easternRegion.ConnectionProvider.CloseConnection();
             </code>
             </example>
        </member>
        <member name="M:FistCore.Core.EntityDAO.FetchChildren(FistCore.Core.DbRelation,FistCore.Core.IDbColumn,System.Object)">
            <summary>
            Fetches child entities that reference the current entity.
            </summary>
            <param name="relation">Relation between the current entity's table and another (child) table.
            Parent table of the given relation must be this entity's table; otherwise an exception is generated.</param>
            <param name="childField">Child field whose value must be equal the given value to be selected.</param>
            <param name="childFieldValue">Value of the given child field. May be <b>null</b>.</param>
            <returns>Rows from the child table that reference the current entity and match the given criteria.</returns>
            <remarks>The method creates a <see cref="T:FistCore.Core.SearchCondition"/> that compares the specified column to
            the given value. Only the child rows where the specified column matches the given value are selected.
            Very often database is designed so that the child entities are not deleted from the database but are
            marked as deleted instead. This method may be used when only child rows with a specific status value
            (eg. STATUS = 1) are to be fetched.</remarks>
        </member>
        <member name="M:FistCore.Core.EntityDAO.FetchChildren(FistCore.Core.ManyToManyRelation)">
             <summary>
             Fetches child entities that reference the current entity.
             </summary>
             <param name="mnRelation">Many-to-many relation. Current entity's table acts as a parent table,
             the other primary table in the relation acts as a child. Resursive M:N relations are not allowed.</param>
             <returns>Rows form the child table that reference the current entity through junction table of the M:N relation.</returns>
             <remarks>When a single database table is used as both the first and the second primary table of an M:N
             relation then it must be explicitly specified which one is used as a parent and which one as a child table.
             This can be accomplished by using one of the overloaded FetchChildren methods that accept a <see cref="T:FistCore.Core.PrimaryTableIndex"/> parameter.</remarks>
             <example>
             The following example fetches children entities using a many-to-many relation.
             <code>
             public DataTable FetchEmployeeTerritories(EmployeesEntity employee)
             {
             	// Fetch territories that the given employee is in charge of.
            
             	// An employee can be in charge of multiple territories.
             	// Multiple employees can be in charge of a single territory.
             	// Employees and Territories table are related by creating junction rows in EmployeeTerritories table.
             	// EmployeeTerritories table has a primary key which is composed of two foreign keys.
             	// These two one-to-many (1:N) relations can be modeled as a one many-to-many (M:N) relation.
            
             	EmployeeTerritoriesMeta junctionTable = new EmployeeTerritoriesMeta();
             	ManyToManyRelation mnRelation = new ManyToManyRelation(junctionTable.FK_EmployeeID, junctionTable.FK_TerritoryID);
            
            		EntityDAO daoEmployees = new EntityDAO(employee);
             	DataTable territories = daoEmployees.FetchChildren(mnRelation);
             	return territories;
             }
             </code>
             </example>
        </member>
        <member name="M:FistCore.Core.EntityDAO.FetchChildren(FistCore.Core.ManyToManyRelation,FistCore.Core.PrimaryTableIndex)">
            <summary>
            Fetches child entities that reference the current entity.
            </summary>
            <param name="mnRelation">Many-to-many relation. Current entity's table acts as a parent table,
            the other primary table in the relation acts as a child. May be recursive.</param>
            <param name="parent">Indicates which of the two primary tables in the M:N relation acts as a parent.</param>
            <returns>Rows form the child table that reference the current entity through junction table of the M:N relation.</returns>
            <remarks>When a single database table is used as both the first and the second primary table of an M:N
            relation then it must be explicitly specified which one is used as a parent and which one as a child table.</remarks>
        </member>
        <member name="M:FistCore.Core.EntityDAO.FetchChildren(FistCore.Core.ManyToManyRelation,FistCore.Core.IDbColumn,System.Object)">
            <summary>
            Fetches child entities that reference the current entity.
            </summary>
            <param name="mnRelation">Many-to-many relation. Current entity's table acts as a parent table,
            the other primary table in the relation acts as a child. Resursive M:N relations are not allowed.</param>
            <param name="childField">Child field whose value must be equal the given value to be selected.</param>
            <param name="childFieldValue">Value of the given child field. May be <b>null</b>.</param>
            <returns>Rows form the child table that reference the current entity through
            junction table of the M:N relation and match the given criteria.</returns>
            <remarks><p>The method creates a <see cref="T:FistCore.Core.SearchCondition"/> that compares the specified column to
            the given value. Only the child rows where the specified column matches the given value are selected.
            Very often database is designed so that the child entities are not deleted from the database but are
            marked as deleted instead. This method may be used when only child rows with a specific status value
            (eg. STATUS = 1) are to be fetched. In addition, a SearchCondition may be created which filters out rows from the junction table.
            See <see cref="P:FistCore.Core.ManyToManyRelation.JunctionRowsFilter"/> for more information.</p>
            <p>When a single database table is used as both the first and the second primary table of an M:N
            relation then it must be explicitly specified which one is used as a parent and which one as a child table.
            This can be accomplished by using one of the overloaded FetchChildren methods that accept a <see cref="T:FistCore.Core.PrimaryTableIndex"/> parameter.</p></remarks>
        </member>
        <member name="M:FistCore.Core.EntityDAO.FetchChildren(FistCore.Core.ManyToManyRelation,FistCore.Core.PrimaryTableIndex,FistCore.Core.IDbColumn,System.Object)">
            <summary>
            Fetches child entities that reference the current entity.
            </summary>
            <param name="mnRelation">Many-to-many relation. Current entity's table acts as a parent table,
            the other primary table in the relation acts as a child. May be recursive.</param>
            <param name="parent">Indicates which of the two primary tables in the M:N relation acts as a parent.</param>
            <param name="childField">Child field whose value must be equal the given value to be selected.</param>
            <param name="childFieldValue">Value of the given child field. May be <b>null</b>.</param>
            <returns>Rows form the child table that reference the current entity through junction table of the M:N relation.</returns>
            <remarks><p>The method creates a <see cref="T:FistCore.Core.SearchCondition"/> that compares the specified column to
            the given value. Only the child rows where the specified column matches the given value are selected.
            Very often database is designed so that the child entities are not deleted from the database but are
            marked as deleted instead. This method may be used when only child rows with a specific status value
            (eg. STATUS = 1) are to be fetched. In addition, a SearchCondition may be created which filters out rows
            from the junction table. See <see cref="P:FistCore.Core.ManyToManyRelation.JunctionRowsFilter"/> for more information.</p>
            <p>When a single database table is used as both the first and the second primary table of an M:N
            relation then it must be explicitly specified which one is used as a parent and which one as a child table.</p></remarks>
        </member>
        <member name="M:FistCore.Core.EntityDAO.FetchChildren(FistCore.Core.DbRelation[])">
            <summary>
            Fetches child entities from multiple tables that reference the current entity.
            </summary>
            <param name="childrenToFetch">Relations between the current entity's table and child tables.</param>
            <returns>One DataTable per relation with child records whose foreign key values match
            the current entity's primary key.</returns>
            <remarks>Preffer using this method instead of a sequence of <see cref="M:FistCore.Core.EntityDAO.FetchChildren(FistCore.Core.DbRelation)"/>
            method invocations. Future optimizers will have a better chance to speed up data access when they know in ahead
            what data is to be fetched.</remarks>
        </member>
        <member name="M:FistCore.Core.EntityDAO.SelectOne(FistCore.Core.DbRelation[],FistCore.Core.DbRelation[])">
            <summary>
            Selects one existing entity from the database based on the Primary Key and populates entity with the retrieved data.
            </summary>
            <param name="parents">Relations (foreign keys) to parents which are to be fetched and stored in
            the current entity. Child table of the given FK must be the current entity's table; otherwise
            an exception is generated. <b>Nullable.</b>.</param>
            <param name="children">Relations between the current entity's table and child tables. <b>Nullable.</b>.</param>
            <returns>One <see cref="T:FistCore.Core.EntityCollection`2"/> per child relation. Empty collection if child
            relations haven't been specified. <b>Null</b> if select was not succesfull.</returns>
            <remarks>The current entity object is set as a parent for all fetched children.</remarks>
            <example>
            The following example fetches the specified order, employee that created the order, order customer, shipper
            and order details. All parent and child data is retrieved in a single network trip to the database server.
            <code>
            public void FetchOrderWithRelatedEntities(int orderId)
            {
            	OrdersEntity order = new OrdersEntity(orderId);
            	DbRelation[] childrenToFetch = new DbRelation[]{new OrderDetailsMeta().FK_OrderID};
            	IEntityDAO dao = new EntityDAO(order);
            	EntityCollection[] children = dao.SelectOne(order.Table.ForeignKeys, childrenToFetch);
            	// SelectOne returns null if the order with the specified ID doesn't exist in the data-source.
            	OrderDetailsCollection orderDetails = (children != null) ? (OrderDetailsCollection) children[0] : null;
            }
            </code>
            </example>
        </member>
        <member name="M:FistCore.Core.EntityDAO.FetchRelatedEntities(FistCore.Core.DbRelation[],FistCore.Core.DbRelation[])">
            <summary>
            Fetches specified parent and child entities. Parent entities are stored in the current entity.
            </summary>
            <param name="parents">Relations (foreign keys) to parents which are to be fetched. Child table of
            the given FK must be the current entity's table; otherwise an exception is generated. <b>Nullable.</b>.</param>
            <param name="children">Relations between the current entity's table and child tables. <b>Nullable.</b>.</param>
            <returns>One <see cref="T:FistCore.Core.EntityCollection`2"/> per child relation. Empty array if child relations
            haven't been specified.</returns>
            <remarks><p>The current entity object is set as a parent for all fetched children.</p>
            <p>Preffer using this method instead of a sequence of <see cref="M:FistCore.Core.EntityDAO.FetchParent(FistCore.Core.DbRelation)"/> and
            <see cref="M:FistCore.Core.EntityDAO.FetchChildren(FistCore.Core.DbRelation)"/> methods invocations. Future optimizers will have a better
            chance to speed up data access when they know in ahead what data is to be fetched.</p></remarks>
        </member>
        <member name="M:FistCore.Core.EntityDAO.SaveCollection(FistCore.Core.IEntityCollection)">
            <summary>
            Persists entities in the collection. Operation (insert, update, delete, nothing) is chosen based on the current <see cref="T:FistCore.Core.EntityState"/>.
            </summary>
            <param name="entitiesToSave">Entities which are to persisted.</param>
            <remarks>Preffer using this method instead of a sequence of <see cref="M:FistCore.Core.EntityDAO.Save"/> method invocations.
            Future optimizers will have a better chance to speed up data access when they know in ahead what data is to be saved.</remarks>
        </member>
        <member name="M:FistCore.Core.EntityDAO.SaveCollection(FistCore.Core.IEntityCollection,System.Boolean)">
            <summary>
            Persists entities in the collection. Operation (insert, update, delete, nothing) is chosen based on the current <see cref="T:FistCore.Core.EntityState"/>.
            </summary>
            <param name="entitiesToSave">Entities which are to persisted.</param>
            <param name="fetchAutoIdentityValues">Indicates whether auto-identity values assigned to rows by DB are fetched for new/inserted rows.
            Setting this parameter to <b>false</b> may siginificantly improve performance.</param>
            <remarks><para>Preffer using this method instead of a sequence of <see cref="M:FistCore.Core.EntityDAO.Save"/> method invocations.
            Future optimizers will have a better chance to speed up data access when they know in ahead what data is to be saved.</para>
            <para>If the <b>fetchAutoIdentityValues</b> parameter is set to <b>false</b> then this method overload will not try to retrieve
            IDs of the inserted records which may yield significantly better performance. If bulk saving for target DBMS is not implemented then
            the logic implemented in <see cref="M:FistCore.Core.EntityDAO.SaveCollection(FistCore.Core.IEntityCollection)"/> method overload is used.</para>
            <para>Bulk saving is not used for small batches, ie. when there are less than <b>5</b> new entities because performance gains
            are negligible in these cases.</para></remarks>
        </member>
        <member name="M:FistCore.Core.EntityDAO.FetchParentsForCollection(FistCore.Core.IEntityCollection,FistCore.Core.DbRelation)">
             <summary>
             Fetches parent entities defined by the given relation from the data source and stores them into provided child entities.
             </summary>
             <param name="childEntities">Children whose FK properties define which parents are to be fetched.</param>
             <param name="parentsToFetch">FK. Relation to parent table from which parent records are to be fetched.</param>
             <returns>Parents retrieved from the data source.</returns>
             <remarks><p>Child entities with equal FK values will share the same parent object instance (same reference).</p>
             <p>Preffer using this method instead of a sequence of <see cref="M:FistCore.Core.EntityDAO.FetchParent(FistCore.Core.DbRelation)"/>
             method invocations for each child entity in the collection. This method is optimized and may yield
             significantly better performance.</p></remarks>
             <example>The following example fetches a collection of entities from Employees table and then
             fetches their parent objects (supervisors) defined by the provided relation.
             <code>
             public EmployeesCollection FetchEmployeesWithSupervisors(params int[] employeeIds)
            {
            		// Fetch requested employees.
            		EmployeesMeta employees = new EmployeesMeta();
            		IEntityDAO dao = new EntityDAO(employees);
            		SearchCondition whereEmployeeIdIn = new SearchCondition(PredicateFactory.In(employees.EmployeeID, employeeIds));
            		EmployeesCollection employeesWithSupervisors = (EmployeesCollection)dao.Select(null, whereEmployeeIdIn);
            
            		// Fetch supervisors, ie. employees to which employees in the collection report to.
            		dao.FetchParentsForCollection(employeesWithSupervisors, employees.FK_ReportsTo);
            
            		return employeesWithSupervisors;
            }
             </code>
             </example>
        </member>
        <member name="M:FistCore.Core.EntityDAO.FetchParentsForCollection(FistCore.Core.IEntityCollection,FistCore.Core.DbRelation,System.Boolean)">
             <summary>
             Fetches parent entities defined by the given relation from the data source and stores them into provided child entities.
             </summary>
             <param name="childEntities">Children whose FK properties define which parents are to be fetched.</param>
             <param name="parentsToFetch">FK. Relation to parent table from which parent records are to be fetched.</param>
             <param name="shareParentObjects">Indicates if all child entities in the collection will share the same
             parent object instance (same reference). If set to <b>false</b>, a clone of the parent will be created
             for each child entity in the current collection.</param>
             <returns>Parents retrieved from the data source.</returns>
             <remarks>Preffer using this method instead of a sequence of <see cref="M:FistCore.Core.EntityDAO.FetchParent(FistCore.Core.DbRelation)"/>
             method invocations for each child entity in the collection. This method is optimized and may yield
             significantly better performance.</remarks>
             <example>The following example fetches a collection of entities from Employees table and then
             fetches their parent objects (supervisors) defined by the provided relation.
             <code>
             public EmployeesCollection FetchEmployeesWithSupervisors(params int[] employeeIds)
            {
            		// Fetch requested employees.
            		EmployeesMeta employees = new EmployeesMeta();
            		IEntityDAO dao = new EntityDAO(employees);
            		SearchCondition whereEmployeeIdIn = new SearchCondition(PredicateFactory.In(employees.EmployeeID, employeeIds));
            		EmployeesCollection employeesWithSupervisors = (EmployeesCollection)dao.Select(null, whereEmployeeIdIn);
            
            		// Fetch supervisors, ie. employees to which employees in the collection report to.
            		dao.FetchParentsForCollection(employeesWithSupervisors, employees.FK_ReportsTo);
            
            		return employeesWithSupervisors;
            }
             </code>
             </example>
        </member>
        <member name="M:FistCore.Core.EntityDAO.FetchChildrenForCollection(FistCore.Core.IEntityCollection,FistCore.Core.DbRelation)">
             <summary>
             Fetches children which belong to provided parent entities as defined by the given relation.
             </summary>
             <param name="parentEntities">Parent entities referenced by children which are to be fetched.</param>
             <param name="relation">FK. Relation between parent and child tables.</param>
             <returns>Array of child collections retrieved from the data source. Child collections are in the
             same order as provided parent objects.</returns>
             <remarks><p>Child entities with equal FK values will share the same parent object instance (same reference).</p>
             <p>Preffer using this method instead of a sequance of <see cref="M:FistCore.Core.EntityDAO.FetchChildren(FistCore.Core.DbRelation)"/>
             method invocations for each parent entity in the provided collection. This method is optimized
             and may yield significantly better performance.</p>
             </remarks>
             <example>The following example fetches a collection of entities from the Regions table and then
             fetched their children objects defined by the provided relation.
             <code>
             public void FetchRegionsAndTerritories(int[] regionIds, out RegionCollection regions, out EntityCollection[] territoriesBelongingToRegions)
            	{
            		// Fetch requested regions.
            		RegionMeta regionsTable = new RegionMeta();
            		IEntityDAO dao = new EntityDAO(regionsTable);
            		SearchCondition whereRegionIdIn = new SearchCondition(PredicateFactory.In(regionsTable.RegionID, regionIds));
            		regions = (RegionCollection)dao.Select(null, whereRegionIdIn);
            
            		// Fetch territiories that belong to requested regions.
            		// One territory collection per region. Territory collections are in the same order as regions.
            		territoriesBelongingToRegions = dao.FetchChildrenForCollection(regions, new TerritoriesMeta().FK_RegionID);
            	}
             </code>
             </example>
        </member>
        <member name="M:FistCore.Core.EntityDAO.SelectTree(FistCore.Core.DbRelation,FistCore.Core.SearchCondition)">
            <summary>
            Selects all rows in the hierarchy starting with the current entity.
            </summary>
            <param name="recursiveRelation">Recursive relation which defines a hierarchy.</param>
            <param name="leafFilter">The search condition which restricts the rows returned. Often a criteria which filters out deactivated records.</param>
            <returns>All rows in the hierarchy under the current entity, including the current entity.</returns>
            <example>The following example fetches all rows in the employee hierarchy starting with the specified employee/manager.
            <code>
            public DataTable FetchHierarchy(int managerId)
            {
            	EmployeesEntity manager = new EmployeesEntity(managerId);
            	IEntityDAO dao = new EntityDAO(manager);
            	DataTable hierarchy = dao.SelectTree(manager.Table.FK_ReportsTo, null);
            	return hierarchy;
            }
            </code>
            </example>
        </member>
        <member name="M:FistCore.Core.EntityDAO.SelectTree(FistCore.Core.DbRelation,FistCore.Core.SearchCondition,System.Int32)">
            <summary>
            Selects rows in the hierarchy starting with the current entity.
            </summary>
            <param name="recursiveRelation">Recursive relation which defines a hierarchy.</param>
            <param name="leafFilter">The search condition which restricts the rows returned. Often a criteria which filters out deactivated records.</param>
            <param name="maxLevels">Maximum number of tree levels to fetch. One specifies that only current entity is fetched,
            two specifies that current entity and entities directly beneath it are fetched etc.</param>
            <returns>Rows in the hierarchy under the current entity, including the current entity.</returns>
            <example>The following example fetches rows from the first three levels in the employee hierarchy starting with the specified employee/manager.
            <code>
            public DataTable FetchHierarchy(int managerId)
            {
            	EmployeesEntity manager = new EmployeesEntity(managerId);
            	IEntityDAO dao = new EntityDAO(manager);
            	DataTable hierarchy = dao.SelectTree(manager.Table.FK_ReportsTo, null, 3);
            	return hierarchy;
            }
            </code>
            </example>
        </member>
        <member name="M:FistCore.Core.EntityDAO.SelectTree(FistCore.Core.DbRelation,FistCore.Core.SearchCondition,System.Int32,System.Int32)">
            <summary>
            Selects rows in the hierarchy under the current entity.
            </summary>
            <param name="recursiveRelation">Recursive relation which defines a hierarchy.</param>
            <param name="leafFilter">The search condition which restricts the rows returned. Often a criteria which filters out deactivated records.</param>
            <param name="beginAtLevel">Zero-based index of the first level to fetch. Zero indicates that fetching starts at current entity,
            one indicates that fetching starts at the level directly beneath it etc.</param>
            <param name="endAtLevel">Zero-based index of the last level to fetch. Zero indicates that fetching ends at current entity,
            one indicates that fetching ends at the level directly beneath it etc. <see cref="F:System.Int32.MaxValue"/> indicates that operation ends at leaf nodes.</param>
            <returns>Rows in the hierarchy under the current entity.</returns>
            <example>The following example fetches all rows in the employee hierarchy under the specified employee/manager.
            <code>
            public DataTable FetchHierarchy(int managerId)
            {
            	EmployeesEntity manager = new EmployeesEntity(managerId);
            	IEntityDAO dao = new EntityDAO(manager);
            	DataTable hierarchy = dao.SelectTree(manager.Table.FK_ReportsTo, null, 1 int.MaxValue);
            	return hierarchy;
            }
            </code>
            </example>
        </member>
        <member name="M:FistCore.Core.EntityDAO.DetermineTreeDepth(FistCore.Core.DbRelation)">
            <summary>
            Counts the number of levels in the hieararchy starting with the current entity.
            </summary>
            <param name="recursiveRelation">Recursive relation which defines a hierarchy.</param>
            <returns>Sub-tree depth.</returns>
            <example>The following example returns the hierarchy depth, ie. the number of levels in th sub-tree.
            <code>
            public int FetchHierarchyDepth(int managerId)
            {
            	EmployeesEntity manager = new EmployeesEntity(managerId);
            	IEntityDAO dao = new EntityDAO(manager);
            	int depth = dao.DetermineTreeDepth(manager.Table.FK_ReportsTo);
            	return depth;
            }
            </code>
            </example>
        </member>
        <member name="M:FistCore.Core.EntityDAO.UpdateTree(FistCore.Core.DbRelation,FistCore.Core.UpdateList,FistCore.Core.SearchCondition)">
            <summary>
            Updates all rows in the hierarchy starting with the current entity.
            </summary>
            <param name="recursiveRelation">Recursive relation which defines a hierarchy.</param>
            <param name="setExpressions">The list of columns to be updated and expressions that compute/contain the new values.</param>
            <param name="leafFilter">The search condition which limits the number of rows that are updated. Often a criteria which filters out deactivated records.</param>
            <returns>Number of rows affected.</returns>
            <example>The following example updates all rows in the employee hierarchy starting with the specified employee/manager.
            <code>
            public int MoveHierarchyToCountry(int managerId, string newCountry)
            {
            	EmployeesEntity manager = new EmployeesEntity(managerId);
            	UpdateList setNewCountry = new UpdateList(manager.Table.Country, newCountry);
            	IEntityDAO dao = new EntityDAO(manager);
            	int rowsAffected = dao.UpdateTree(manager.Table.FK_ReportsTo, setNewCountry, null);
            	return rowsAffected;
            }
            </code>
            </example>
        </member>
        <member name="M:FistCore.Core.EntityDAO.UpdateTree(FistCore.Core.DbRelation,FistCore.Core.UpdateList,FistCore.Core.SearchCondition,System.Int32)">
            <summary>
            Updates rows in the hierarchy starting with the current entity.
            </summary>
            <param name="recursiveRelation">Recursive relation which defines a hierarchy.</param>
            <param name="setExpressions">The list of columns to be updated and expressions that compute/contain the new values.</param>
            <param name="leafFilter">The search condition which limits the number of rows that are updated. Often a criteria which filters out deactivated records.</param>
            <param name="maxLevels">Maximum number of tree levels to affect. One specifies that only current entity is updated,
            two specifies that current entity and entities directly beneath it are updated etc.</param>
            <returns>Number of rows affected.</returns>
            <example>The following example updates rows in the first three levels of the employee hierarchy starting with the specified employee/manager.
            <code>
            public int MoveHierarchyToCountry(int managerId, string newCountry)
            {
            	EmployeesEntity manager = new EmployeesEntity(managerId);
            	UpdateList setNewCountry = new UpdateList(manager.Table.Country, newCountry);
            	IEntityDAO dao = new EntityDAO(manager);
            	int rowsAffected = dao.UpdateTree(manager.Table.FK_ReportsTo, setNewCountry, null, 3);
            	return rowsAffected;
            }
            </code>
            </example>
        </member>
        <member name="M:FistCore.Core.EntityDAO.UpdateTree(FistCore.Core.DbRelation,FistCore.Core.UpdateList,FistCore.Core.SearchCondition,System.Int32,System.Int32)">
            <summary>
            Updates rows in the hierarchy under the current entity.
            </summary>
            <param name="recursiveRelation">Recursive relation which defines a hierarchy.</param>
            <param name="setExpressions">The list of columns to be updated and expressions that compute/contain the new values.</param>
            <param name="leafFilter">The search condition which limits the number of rows that are updated. Often a criteria which filters out deactivated records.</param>
            <param name="beginAtLevel">Zero-based index of the first level to update. Zero indicates that updating starts at current entity,
            one indicates that updating starts at the level directly beneath it etc.</param>
            <param name="endAtLevel">Zero-based index of the last level to update. Zero indicates that updating ends at current entity,
            one indicates that updating ends at the level directly beneath it etc. <see cref="F:System.Int32.MaxValue"/> indicates that operation ends at leaf nodes.</param>
            <returns>Number of rows affected.</returns>
            <example>The following example updates all rows in the employee hierarchy under the specified employee/manager.
            <code>
            public int MoveHierarchyToCountry(int managerId, string newCountry)
            {
            	EmployeesEntity manager = new EmployeesEntity(managerId);
            	UpdateList setNewCountry = new UpdateList(manager.Table.Country, newCountry);
            	IEntityDAO dao = new EntityDAO(manager);
            	int rowsAffected = dao.UpdateTree(manager.Table.FK_ReportsTo, setNewCountry, null, 1, int.MaxValue);
            	return rowsAffected;
            }
            </code>
            </example>
        </member>
        <member name="M:FistCore.Core.EntityDAO.CountTree(FistCore.Core.DbRelation,FistCore.Core.SearchCondition)">
            <summary>
            Counts all rows in the hierarchy starting with the current entity.
            </summary>
            <param name="recursiveRelation">Recursive relation which defines a hierarchy.</param>
            <param name="leafFilter">The search condition which restricts the rows counted. Often a criteria which filters out deactivated records.</param>
            <returns>Total row count in the hierarchy.</returns>
            <example>The following example counts all rows in the employee hierarchy starting with the specified employee/manager.
            <code>
            public int CountAllSubordinates(int managerId)
            {
            	EmployeesEntity manager = new EmployeesEntity(managerId);
            	IEntityDAO dao = new EntityDAO(manager);
            	int totalEmployeeCount = dao.CountTree(manager.Table.FK_ReportsTo, null);
            	return totalEmployeeCount;
            }
            </code>
            </example>
        </member>
        <member name="M:FistCore.Core.EntityDAO.CountTree(FistCore.Core.DbRelation,FistCore.Core.SearchCondition,System.Int32)">
            <summary>
            Counts rows in the hierarchy starting with the current entity.
            </summary>
            <param name="recursiveRelation">Recursive relation which defines a hierarchy.</param>
            <param name="leafFilter">The search condition which restricts the rows counted. Often a criteria which filters out deactivated records.</param>
            <param name="maxLevels">Maximum number of tree levels to process. One specifies that only current entity is counted,
            two specifies that current entity and entities directly beneath it are counted etc.</param>
            <returns>Total row count in the hierarchy.</returns>
            <example>The following example counts all rows in the first three levels of the employee hierarchy starting with the specified employee/manager.
            <code>
            public int CountAllSubordinates(int managerId)
            {
            	EmployeesEntity manager = new EmployeesEntity(managerId);
            	IEntityDAO dao = new EntityDAO(manager);
            	int totalEmployeeCount = dao.CountTree(manager.Table.FK_ReportsTo, null, 3);
            	return totalEmployeeCount;
            }
            </code>
            </example>
        </member>
        <member name="M:FistCore.Core.EntityDAO.CountTree(FistCore.Core.DbRelation,FistCore.Core.SearchCondition,System.Int32,System.Int32)">
            <summary>
            Counts rows in the hierarchy under the current entity.
            </summary>
            <param name="recursiveRelation">Recursive relation which defines a hierarchy.</param>
            <param name="leafFilter">The search condition which restricts the rows counted. Often a criteria which filters out deactivated records.</param>
            <param name="beginAtLevel">Zero-based index of the first level to process. Zero indicates that counting starts at current entity,
            one indicates that counting starts at the level directly beneath it etc.</param>
            <param name="endAtLevel">Zero-based index of the last level to process. Zero indicates that counting ends at current entity,
            one indicates that counting ends at the level directly beneath it etc. <see cref="F:System.Int32.MaxValue"/> indicates that operation ends at leaf nodes.</param>
            <returns>Total row count in the hierarchy.</returns>
            <example>The following example counts all rows in the employee hierarchy under the specified employee/manager.
            <code>
            public int CountAllSubordinates(int managerId)
            {
            	EmployeesEntity manager = new EmployeesEntity(managerId);
            	const int beginAtLevelBeneathManager = 1;
            	IEntityDAO dao = new EntityDAO(manager);
            	int totalEmployeeCount = dao.CountTree(manager.Table.FK_ReportsTo, null, beginAtLevelBeneathManager, int.MaxValue);
            	return totalEmployeeCount;
            }
            </code>
            </example>
        </member>
        <member name="M:FistCore.Core.EntityDAO.SumTree(FistCore.Core.IDbColumn,FistCore.Core.DbRelation,FistCore.Core.SearchCondition)">
            <summary>
            Retrieves the sum of the column values in the hierarchy starting with the current entity.
            </summary>
            <param name="column">Column. Must be a numeric column that belongs to the current entity's table.</param>
            <param name="recursiveRelation">Recursive relation which defines a hierarchy.</param>
            <param name="leafFilter">The search condition which restricts the rows processed. Often a criteria which filters out deactivated records.</param>
            <returns>Total sum of column values in the hierarchy or <see cref="F:System.DBNull.Value"/>.</returns>
        </member>
        <member name="M:FistCore.Core.EntityDAO.SumTree(FistCore.Core.IDbColumn,FistCore.Core.DbRelation,FistCore.Core.SearchCondition,System.Int32)">
            <summary>
            Retrieves the sum of the column values in the hierarchy starting with the current entity.
            </summary>
            <param name="column">Column. Must be a numeric column that belongs to the current entity's table.</param>
            <param name="recursiveRelation">Recursive relation which defines a hierarchy.</param>
            <param name="leafFilter">The search condition which restricts the rows processed. Often a criteria which filters out deactivated records.</param>
            <param name="maxLevels">Maximum number of tree levels to process. One specifies that only current entity is summed,
            two specifies that current entity and entities directly beneath it are summed etc.</param>
            <returns>Total sum of column values in the hierarchy or <see cref="F:System.DBNull.Value"/>.</returns>
        </member>
        <member name="M:FistCore.Core.EntityDAO.SumTree(FistCore.Core.IDbColumn,FistCore.Core.DbRelation,FistCore.Core.SearchCondition,System.Int32,System.Int32)">
            <summary>
            Retrieves the sum of the column values in the hierarchy under the current entity.
            </summary>
            <param name="column">Column. Must be a numeric column that belongs to the current entity's table.</param>
            <param name="recursiveRelation">Recursive relation which defines a hierarchy.</param>
            <param name="leafFilter">The search condition which restricts the rows processed. Often a criteria which filters out deactivated records.</param>
            <param name="beginAtLevel">Zero-based index of the first level to process. Zero indicates that summing starts at current entity,
            one indicates that summing starts at the level directly beneath it etc.</param>
            <param name="endAtLevel">Zero-based index of the last level to process. Zero indicates that summing ends at current entity,
            one indicates that summing ends at the level directly beneath it etc. <see cref="F:System.Int32.MaxValue"/> indicates that operation ends at leaf nodes.</param>
            <returns>Total sum of column values in the hierarchy or <see cref="F:System.DBNull.Value"/>.</returns>
        </member>
        <member name="M:FistCore.Core.EntityDAO.MinInTree(FistCore.Core.IDbColumn,FistCore.Core.DbRelation,FistCore.Core.SearchCondition)">
            <summary>
            Retrieves the minimum column value in the hierarchy starting with the current entity.
            </summary>
            <param name="column">Column to compare. Must belong to the current entity's table.</param>
            <param name="recursiveRelation">Recursive relation which defines a hierarchy.</param>
            <param name="leafFilter">The search condition which restricts the rows processed. Often a criteria which filters out deactivated records.</param>
            <returns>Minimum value or <see cref="F:System.DBNull.Value"/>.</returns>
            <example>The following example retrieves the date of the oldest employee in the hierarchy starting with the specified employee/manager.
            <code>
            public DateTime FindOldestInHierarchy(int managerId)
            {
            	EmployeesEntity manager = new EmployeesEntity(managerId);
            	IEntityDAO dao = new EntityDAO(manager);
            	object result = dao.MinInTree(manager.Table.BirthDate, manager.Table.FK_ReportsTo, null);
            	return Convert.ToDateTime(result);
            }
            </code>
            </example>
        </member>
        <member name="M:FistCore.Core.EntityDAO.MinInTree(FistCore.Core.IDbColumn,FistCore.Core.DbRelation,FistCore.Core.SearchCondition,System.Int32)">
            <summary>
            Retrieves the minimum column value in the hierarchy starting with the current entity.
            </summary>
            <param name="column">Column to compare. Must belong to the current entity's table.</param>
            <param name="recursiveRelation">Recursive relation which defines a hierarchy.</param>
            <param name="leafFilter">The search condition which restricts the rows processed. Often a criteria which filters out deactivated records.</param>
            <param name="maxLevels">Maximum number of tree levels to process. One specifies that only current entity is compared,
            two specifies that current entity and entities directly beneath it are compared etc.</param>
            <returns>Minimum value or <see cref="F:System.DBNull.Value"/>.</returns>
            <example>The following example retrieves the date of the oldest employee in the first three levels of the hierarchy starting with the specified employee/manager.
            <code>
            public DateTime FindOldestInHierarchy(int managerId)
            {
            	EmployeesEntity manager = new EmployeesEntity(managerId);
            	IEntityDAO dao = new EntityDAO(manager);
            	object result = dao.MinInTree(manager.Table.BirthDate, manager.Table.FK_ReportsTo, null, 3);
            	return Convert.ToDateTime(result);
            }
            </code>
            </example>
        </member>
        <member name="M:FistCore.Core.EntityDAO.MinInTree(FistCore.Core.IDbColumn,FistCore.Core.DbRelation,FistCore.Core.SearchCondition,System.Int32,System.Int32)">
            <summary>
            Retrieves the minimum column value in the hierarchy under the current entity.
            </summary>
            <param name="column">Column to compare. Must belong to the current entity's table.</param>
            <param name="recursiveRelation">Recursive relation which defines a hierarchy.</param>
            <param name="leafFilter">The search condition which restricts the rows processed. Often a criteria which filters out deactivated records.</param>
            <param name="beginAtLevel">Zero-based index of the first level to process. Zero indicates that comparison starts at current entity,
            one indicates that comparison starts at the level directly beneath it etc.</param>
            <param name="endAtLevel">Zero-based index of the last level to process. Zero indicates that comparison ends at current entity,
            one indicates that comparison ends at the level directly beneath it etc. <see cref="F:System.Int32.MaxValue"/> indicates that operation ends at leaf nodes.</param>
            <returns>Minimum value or <see cref="F:System.DBNull.Value"/>.</returns>
            <example>The following example retrieves the date of the oldest employee in the hierarchy under the specified employee/manager.
            <code>
            public DateTime FindOldestInHierarchy(int managerId)
            {
            	EmployeesEntity manager = new EmployeesEntity(managerId);
            	IEntityDAO dao = new EntityDAO(manager);
            	object result = dao.MinInTree(manager.Table.BirthDate, manager.Table.FK_ReportsTo, null, 1, int.MaxValue);
            	return Convert.ToDateTime(result);
            }
            </code>
            </example>
        </member>
        <member name="M:FistCore.Core.EntityDAO.MaxInTree(FistCore.Core.IDbColumn,FistCore.Core.DbRelation,FistCore.Core.SearchCondition)">
            <summary>
            Retrieves the maximum column value in the hierarchy starting with the current entity.
            </summary>
            <param name="column">Column to compare. Must belong to the current entity's table.</param>
            <param name="recursiveRelation">Recursive relation which defines a hierarchy.</param>
            <param name="leafFilter">The search condition which restricts the rows processed. Often a criteria which filters out deactivated records.</param>
            <returns>Maximum value or <see cref="F:System.DBNull.Value"/>.</returns>
            <example>The following example retrieves the date of the youngest employee in the hierarchy starting with the specified employee/manager.
            <code>
            public DateTime FindYoungestInHierarchy(int managerId)
            {
            	EmployeesEntity manager = new EmployeesEntity(managerId);
            	IEntityDAO dao = new EntityDAO(manager);
            	object result = dao.MaxInTree(manager.Table.BirthDate, manager.Table.FK_ReportsTo, null);
            	return Convert.ToDateTime(result);
            }
            </code>
            </example>
        </member>
        <member name="M:FistCore.Core.EntityDAO.MaxInTree(FistCore.Core.IDbColumn,FistCore.Core.DbRelation,FistCore.Core.SearchCondition,System.Int32)">
            <summary>
            Retrieves the maximum column value in the hierarchy starting with the current entity.
            </summary>
            <param name="column">Column to compare. Must belong to the current entity's table.</param>
            <param name="recursiveRelation">Recursive relation which defines a hierarchy.</param>
            <param name="leafFilter">The search condition which restricts the rows processed. Often a criteria which filters out deactivated records.</param>
            <param name="maxLevels">Maximum number of tree levels to process. One specifies that only current entity is compared,
            two specifies that current entity and entities directly beneath it are compared etc.</param>
            <returns>Maximum value or <see cref="F:System.DBNull.Value"/>.</returns>
            <example>The following example retrieves the date of the oldest employee in the first three levels of the hierarchy starting with the specified employee/manager.
            <code>
            public DateTime FindYoungestInHierarchy(int managerId)
            {
            	EmployeesEntity manager = new EmployeesEntity(managerId);
            	IEntityDAO dao = new EntityDAO(manager);
            	object result = dao.MaxInTree(manager.Table.BirthDate, manager.Table.FK_ReportsTo, null, 3);
            	return Convert.ToDateTime(result);
            }
            </code>
            </example>
        </member>
        <member name="M:FistCore.Core.EntityDAO.MaxInTree(FistCore.Core.IDbColumn,FistCore.Core.DbRelation,FistCore.Core.SearchCondition,System.Int32,System.Int32)">
            <summary>
            Retrieves the maximum column value in the hierarchy under the current entity.
            </summary>
            <param name="column">Column to compare. Must belong to the current entity's table.</param>
            <param name="recursiveRelation">Recursive relation which defines a hierarchy.</param>
            <param name="leafFilter">The search condition which restricts the rows processed. Often a criteria which filters out deactivated records.</param>
            <param name="beginAtLevel">Zero-based index of the first level to process. Zero indicates that comparison starts at current entity,
            one indicates that comparison starts at the level directly beneath it etc.</param>
            <param name="endAtLevel">Zero-based index of the last level to process. Zero indicates that comparison ends at current entity,
            one indicates that comparison ends at the level directly beneath it etc. <see cref="F:System.Int32.MaxValue"/> indicates that operation ends at leaf nodes.</param>
            <returns>Maximum value or <see cref="F:System.DBNull.Value"/>.</returns>
            <example>The following example retrieves the date of the oldest employee in the hierarchy under the specified employee/manager.
            <code>
            public DateTime FindYoungestInHierarchy(int managerId)
            {
            	EmployeesEntity manager = new EmployeesEntity(managerId);
            	IEntityDAO dao = new EntityDAO(manager);
            	object result = dao.MaxInTree(manager.Table.BirthDate, manager.Table.FK_ReportsTo, null, 1, int.MaxValue);
            	return Convert.ToDateTime(result);
            }
            </code>
            </example>
        </member>
        <member name="P:FistCore.Core.EntityDAO.Sorter">
            <summary>
            Sorter used by the data retrieval methods.
            </summary>
        </member>
        <member name="P:FistCore.Core.EntityDAO.SortOnDatabase">
            <summary>
            Specifies whether data retrieval methods will sort data on database or in DataTable after data is fetched.
            This is just a hint. Actual methods may ignore this.
            </summary>
        </member>
        <member name="P:FistCore.Core.EntityDAO.Entity">
            <summary>
            Gets or sets entity with which DAO works. Null is not allowed.
            </summary>
            <remarks>Depending on operation DAO may only read entity, but it may also change it.
            CRUD operations both read and update entity.</remarks>
        </member>
        <member name="P:FistCore.Core.EntityDAO.DaoFactory">
            <summary>
            Gets or sets DAO factory. Null is not allowed.
            </summary>
            <remarks>Required to build DAOs for entities used in data-access logic. This factory is passed on to
            created DAOs so that all DAOs in the chain are created using the same strategies.</remarks>
        </member>
        <member name="T:FistCore.Core.IEntityDaoCreationStrategy">
            <summary>
            Strategy/algorithm for entity DAO creation.
            </summary>
        </member>
        <member name="M:FistCore.Core.IEntityDaoCreationStrategy.GetEntityDAO(FistCore.Core.IEntity,FistCore.Core.IConnectionProvider)">
            <summary>
            Gets DAO that will work the given entity.
            </summary>
            <param name="entity">Entity with wich the returned DAO works with.</param>
            <param name="conn">Connection context DAO will use. If null, default DAO settings are used.</param>
            <returns>IEntityDAO implementation.</returns>
        </member>
        <member name="T:FistCore.Core.DefaultEntityDaoCreationStrategy">
            <summary>
            Default strategy/algorithm for entity DAO creation used in FistCore library.
            </summary>
            <remarks>Default algorithm is simple. If IEntity object also implements IEntityDAO interface then it is returned
            by <see cref="M:FistCore.Core.DefaultEntityDaoCreationStrategy.GetEntityDAO(FistCore.Core.IEntity,FistCore.Core.IConnectionProvider)"/> method. Next, it checks whether the entity's meta-class (<b>IDbTable</b>
            implementation) specifies a specific DAO creation strategy (see <see cref="P:FistCore.Core.IDbTable.EntityDaoCreationStrategy"/>).
            If no DAO has been created in previous steps, then the algorithm defaults to generic <see cref="T:FistCore.Core.EntityDAO"/>
            object which will work the given entity.</remarks>
        </member>
        <member name="M:FistCore.Core.DefaultEntityDaoCreationStrategy.#ctor">
            <summary>
            Initializes a new instance of the DefaultEntityDaoCreationStrategy class.
            </summary>
        </member>
        <member name="M:FistCore.Core.DefaultEntityDaoCreationStrategy.GetEntityDAO(FistCore.Core.IEntity,FistCore.Core.IConnectionProvider)">
            <summary>
            Gets DAO for the given entity.
            </summary>
            <param name="entity">Entity which the returned DAO will work with.</param>
            <param name="conn">Connection context the DAO will use. If null, default DAO settings are used.</param>
            <returns>IEntityDAO implementation.</returns>
        </member>
        <member name="T:FistCore.Core.IEntityDaoFactory">
            <summary>
            Creates instances of IEntityDAO objects that best suite given entity objects.
            </summary>
            <remarks><p>Tipically, DAO factory uses a collection of <see cref="T:FistCore.Core.IEntityDaoCreationStrategy"/> objects
            to create the an instance of IEntityDAO objects. Some DAO strategies may work for all entities, and
            some support only specific entity classes. The factory's job is to lookup the best strategy in the collection
            which will create a DAO that best suites a given entity.</p>
            <p>Pattern: one factory class which contains one or more strategies to create a <see cref="T:FistCore.Core.IEntityDAO"/>
            object. The factory should be passed to created DAO by its <see cref="P:FistCore.Core.IEntityDAO.DaoFactory"/> setter.
            This way all DAOs created in the same chain will use the same factory, i.e. the same algorithms to create
            other DAOs. Note: this is required because internally DAOs sometimes create new DAOs to perform
            data-access operations which are out of scope of original DAO.</p></remarks>
        </member>
        <member name="M:FistCore.Core.IEntityDaoFactory.GetEntityDAO(FistCore.Core.IEntity,FistCore.Core.IConnectionProvider)">
            <summary>
            Gets DAO that will work the given entity.
            </summary>
            <param name="entity">Entity with wich the returned DAO works with.</param>
            <param name="conn">Connection context DAO will use. If null, default DAO settings are used.</param>
            <returns>IEntityDAO implementation.</returns>
        </member>
        <member name="T:FistCore.Core.EntityDaoFactory">
            <summary>
            DAO factory contains a collection of default and custom creation strategies for specific entity classes.
            </summary>
            <remarks>Contains default and custom strategies for DAOs. Once a strategy is registered for a class
            it is automatically used for all inherited classes, too. The behavior may be overrided by registering
            another strategy for inherited class.</remarks>
        </member>
        <member name="M:FistCore.Core.EntityDaoFactory.#ctor">
            <summary>
            Initializes a new instance of the EntityDaoFactory class.
            </summary>
        </member>
        <member name="M:FistCore.Core.EntityDaoFactory.GetStrategy(FistCore.Core.IEntity)">
            <summary>
            Gets DAO creation strategy for the given entity.
            </summary>
            <param name="entity">Entity for which the best registered DAO creation strategy is searched.</param>
            <returns>Most optimal DAO strategy for the given entity. <see cref="T:FistCore.Core.DefaultEntityDaoCreationStrategy"/>
            if no custom algorithm has been registered for the entity class or one of its base classes.</returns>
        </member>
        <member name="M:FistCore.Core.EntityDaoFactory.GetEntityDAO(FistCore.Core.IEntity,FistCore.Core.IConnectionProvider)">
            <summary>
            Gets the most optimal DAO that will work the given entity.
            </summary>
            <param name="entity">Entity with wich the returned DAO works with.</param>
            <param name="conn">Connection context DAO will use. If null, default DAO settings are used.</param>
            <returns>IEntityDAO implementation.</returns>
            <remarks><p>Method will try to find the most optimal DAO creation strategy that will create the
            most optimal DAO for the given entity.</p>
            <p>Current DAO factory is passed on to the created DAO.</p></remarks>
        </member>
        <member name="M:FistCore.Core.EntityDaoFactory.RegisterStrategy(System.Type,FistCore.Core.IEntityDaoCreationStrategy)">
            <summary>
            Register custom DAO creation strategy for the given entity class and all inheritted classes.
            </summary>
            <param name="entityClass">Entity class for which DAOs are created using given strategy.</param>
            <param name="strategy">Algorithm used to create DAOs for the specified class.</param>
        </member>
        <member name="M:FistCore.Core.EntityDaoFactory.UnregisterStrategy(System.Type)">
            <summary>
            Unregisters custom DAO creation strategy for the given entity class.
            </summary>
            <param name="entityClass">Entity class (implement <see cref="T:FistCore.Core.IEntity"/>) for which the custom strategy will
            no longer be used.</param>
            <remarks><see cref="T:FistCore.Core.DefaultEntityDaoCreationStrategy"/> is used for entity class for which
            custom strategies are not registered.</remarks>
        </member>
        <member name="P:FistCore.Core.EntityDaoFactory.DefaultStrategy">
            <summary>
            Gets or sets default strategy to use for entities without explicit strategies. Null is not allowed.
            </summary>
        </member>
        <member name="P:FistCore.Core.EntityDaoFactory.Item(System.Type)">
            <summary>
            Gets or sets DAO creation strategy for the given entity class.
            </summary>
            <remarks><p>If set to <b>null</b> then default strategy is used for the specified entity class.</p>
            <p>Default strategy is returned if specific strategy is not set for the given entity class.</p></remarks>
        </member>
        <member name="T:FistCore.Core.DbTableProvider">
            <summary>
            Delegate to static method that provides an <see cref="T:FistCore.Core.IDbTable"/> object compatibile with the current entity.
            The method may build a new instance or return an existing one, depending on a usage scenario.
            </summary>
            <param name="alias">Optional table alias.</param>
            <returns>An instance of a class that implements <b>IDbTable</b> interface.</returns>
        </member>
        <member name="T:FistCore.Core.FieldError">
            <summary>
            Error information for a field.
            </summary>
        </member>
        <member name="M:FistCore.Core.FieldError.#ctor(FistCore.Core.IDbColumn,System.Object)">
            <summary>
            Initializes a new FieldError structure.
            </summary>
            <remarks>Validates the given value and sets the <see cref="P:FistCore.Core.FieldError.ErrorCode"/> property.</remarks>
            <param name="field">Field.</param>		
            <param name="value">Value that has been tested.</param>
        </member>
        <member name="M:FistCore.Core.FieldError.#ctor(FistCore.Core.IDbColumn,FistCore.Core.FieldErrorCode,System.Object)">
            <summary>
            Initializes a new FieldError structure.
            </summary>
            <remarks>Used when the value has already been validate and the error code has already been computed.</remarks>
            <param name="field">Field.</param>
            <param name="errorCode">Error.</param>
            <param name="value">Value that has been tested.</param>
        </member>
        <member name="P:FistCore.Core.FieldError.Field">
            <summary>
            Gets the field for which this structure contains error information.
            </summary>
        </member>
        <member name="P:FistCore.Core.FieldError.ErrorCode">
            <summary>
            Gets the errorcode for this' structure field and value.
            </summary>
        </member>
        <member name="P:FistCore.Core.FieldError.Value">
            <summary>
            Gets the value that has been tested.
            </summary>
        </member>
        <member name="T:FistCore.Core.FieldErrorCode">
            <summary>
            Field error codes.
            </summary>
        </member>
        <member name="F:FistCore.Core.FieldErrorCode.AllOk">
            <summary>
            Value has passed validation.
            </summary>
        </member>
        <member name="F:FistCore.Core.FieldErrorCode.ErrorOther">
            <summary>
            Unknown error occured.
            </summary>
        </member>
        <member name="F:FistCore.Core.FieldErrorCode.NullError">
            <summary>
            Value is null but the field is not nullable.
            </summary>
        </member>
        <member name="F:FistCore.Core.FieldErrorCode.OutOfRangeError">
            <summary>
            Value is out of allowed range.
            </summary>
        </member>
        <member name="F:FistCore.Core.FieldErrorCode.NonCompatibleType">
            <summary>
            Value is not compatibile with the field's type.
            </summary>
        </member>
        <member name="T:FistCore.Core.FieldValidator">
            <summary>
            Performs field validation.
            </summary>
        </member>
        <member name="F:FistCore.Core.FieldValidator.type">
            <summary>
            Field type.
            </summary>
        </member>
        <member name="F:FistCore.Core.FieldValidator.minValue">
            <summary>
            Minimum value allowed. May be null.
            </summary>
        </member>
        <member name="F:FistCore.Core.FieldValidator.maxValue">
            <summary>
            Maximum value allowed. May be null.
            </summary>
        </member>
        <member name="F:FistCore.Core.FieldValidator.allowNull">
            <summary>
            Indicates whether null values are allowed.
            </summary>
        </member>
        <member name="F:FistCore.Core.FieldValidator.autoIncrement">
            <summary>
            Indicates whether the field is an autonumber field.
            </summary>
        </member>
        <member name="M:FistCore.Core.FieldValidator.#ctor(FistCore.Core.IDbColumn)">
            <summary>
            Creates a new validator for the given column.
            </summary>
            <param name="column">Database column.</param>
        </member>
        <member name="M:FistCore.Core.FieldValidator.Validate(System.Object)">
            <summary>
            Validates the given value.
            </summary>
            <param name="value">Value that will be validated.</param>
            <returns>Error code.</returns>
        </member>
        <member name="T:FistCore.Core.AggregateFunction">
            <summary>
            Represents an SQL aggregate function.
            </summary>
            <remarks><para>Aggregate functions perform a calculation on a set of values and return a single value. With 
            the exception of COUNT, aggregate functions ignore null values. Aggregate functions are often used with 
            the GROUP BY clause of the SELECT statement. Aggregate functions are allowed as expressions only in the 
            select list of a SELECT statement (either a subquery or an outer query) and a HAVING clause.</para>
            <para>AggregateFunction cannot be created by using its constructor. 
            Use <see cref="T:FistCore.Core.AggregateFunctionFactory"/> to create supported aggregate functions.</para>
            <seealso cref="T:FistCore.Core.SelectStatement"/></remarks>
            <example>
            The following example retrieves the number of employees hired before January 1, 2000.
            <code>
            public int CountEmployeesHiredBefore2000()
            {
            	// AggregateFunctionFactory is used to create an instance of an AggregateFunction.
            	AggregateFunction count = AggregateFunctionFactory.Count("hiredBefore2000Count");
            	
            	EmployeesMeta employees = new EmployeesMeta();
            	SelectStatement select = new SelectStatement(employees);
            	select.SelectList.Add(count);
            	select.Where.Add(PredicateFactory.Compare(employees.HireDate, "&lt;", new DateTime(2000, 1, 1)));
            
            	// Execute method returns a DataTable that contains one row.
            	// Alias given to the aggregate function is the name of the column which holds the function result.
            	DataTable data = select.Execute();
            	int hiredBefore2000Count = (int) data.Rows[0]["hiredBefore2000Count"];
            	return hiredBefore2000Count;
            }
            </code>
            </example>	
        </member>
        <member name="T:FistCore.Core.Function">
            <summary>
            Provides means to create any SQL function call.
            Format: "MyFunction(parameter1, parameter2)".
            </summary>
        </member>
        <member name="M:FistCore.Core.Function.#ctor(System.String,System.String,System.Collections.Generic.IList{FistCore.Core.IRenderSql},System.Type)">
            <summary>
            Creates a new function.
            </summary>
            <param name="functionName">Function name.</param>
            <param name="alias">Alias. Often used when a function is used in a select list.</param>
            <param name="functionArguments">Function parameters.</param>
            <param name="returnType">Type of the value returned by function.</param>
        </member>
        <member name="M:FistCore.Core.Function.Render(FistCore.Core.DbmsType,System.Text.StringBuilder,FistCore.Core.DbParameterCollection)">
            <summary>
            Renders function as SQL statement.
            </summary>
            <param name="dbms">Target DBMS.</param>
            <param name="output">StringBuilder to which SQL is appended.</param>
            <param name="parameters">SQL parameter collection to which the object's and its children's
            parameters are added. After the rendering is done the collection contains all parameters with unique names.</param>
        </member>
        <member name="P:FistCore.Core.Function.Name">
            <summary>Gets function name.</summary>
        </member>
        <member name="P:FistCore.Core.Function.Alias">
            <summary>Gets alias. Often used when a function is used in a select list.</summary>
        </member>
        <member name="P:FistCore.Core.Function.DbType">
            <summary>Gets the SQL data type.</summary>
        </member>
        <member name="P:FistCore.Core.Function.DataType">
            <summary>Gets .NET type of data stored in the column.</summary>
        </member>
        <member name="P:FistCore.Core.Function.FunctionArguments">
            <summary>Gets function parameters.</summary>
        </member>
        <member name="M:FistCore.Core.AggregateFunction.#ctor(System.String,System.Boolean,System.String,System.Collections.Generic.IList{FistCore.Core.IRenderSql},System.Type)">
            <summary>
            Initializes an aggregate function.
            </summary>
            <param name="functionName">Function name.</param>
            <param name="distinct">Specifies whether the function eliminates duplicate values.</param>
            <param name="alias">Alias. Often used when a function is used in a select list.</param>
            <param name="functionParameters">Function parameters.</param>
            <param name="returnType">Type of the value returned by function.</param>
        </member>
        <member name="M:FistCore.Core.AggregateFunction.Render(FistCore.Core.DbmsType,System.Text.StringBuilder,FistCore.Core.DbParameterCollection)">
            <summary>
            Renders function as SQL statement.
            </summary>
            <param name="dbms">Target DBMS.</param>
            <param name="output">StringBuilder to which SQL is appended.</param>
            <param name="parameters">SQL parameter collection to which the object's and its children's
            parameters are added. After the rendering is done the collection contains all parameters with unique names.</param>
        </member>
        <member name="P:FistCore.Core.AggregateFunction.Distinct">
            <summary>
            The DISTINCT keyword is optional with SUM, AVG, and COUNT. When DISTINCT is used, 
            duplicate values are eliminated before the sum, average, or count is calculated. 
            If you use DISTINCT, the expression must consist of a column name only. 
            It cannot include an arithmetic expression.
            </summary>
        </member>
        <member name="T:FistCore.Core.AggregateFunctionFactory">
            <summary>
            Provides static methods that create aggregate functions.
            </summary>
            <remarks><see cref="T:FistCore.Core.AggregateFunction"/> cannot be created by using its constructor. The factory class must be used 
            to create instances of supported aggregate functions.
            <seealso cref="T:FistCore.Core.AggregateFunction"/>
            <seealso cref="T:FistCore.Core.SelectStatement"/></remarks>
            <example>
            The following example retrieves the number of employees hired before January 1, 2000.
            <code>
            public int CountEmployeesHiredBefore2000()
            {
            	EmployeesMeta employees = new EmployeesMeta();
            	SelectStatement select = new SelectStatement(employees);
            	select.SelectList.Add(AggregateFunctionFactory.Count("hiredBefore2000Count"));
            	select.Where.Add(PredicateFactory.Compare(employees.HireDate, "&lt;", new DateTime(2000, 1, 1)));
            
            	// Execute method returns a DataTable that contains one row.
            	// Alias given to the aggregate function is the name of the column which holds the function result.
            	DataTable data = select.Execute();
            	int hiredBefore2000Count = (int) data.Rows[0]["hiredBefore2000Count"];
            	return hiredBefore2000Count;
            }
            </code>
            </example>	
        </member>
        <member name="M:FistCore.Core.AggregateFunctionFactory.Avg(FistCore.Core.IDbColumn,System.Boolean,System.String)">
            <summary>
            Returns the average of the values in a group.
            </summary>
            <param name="field">Field. Null is not allowed.</param>
            <param name="distinct">Specifies that AVG be performed only on each unique instance of a value, regardless of how many times the value occurs.</param>
            <param name="alias">Function alias. May be null.</param>
            <returns>AVG function.</returns>
        </member>
        <member name="M:FistCore.Core.AggregateFunctionFactory.Count(FistCore.Core.IDbColumn,System.Boolean,System.String)">
            <summary>
            Returns the number of items in a group.
            </summary>
            <param name="field">Field. Null is not allowed.</param>
            <param name="distinct">Specifies that COUNT returns the number of unique nonnull values.</param>
            <param name="alias">Function alias. May be null.</param>
            <returns>COUNT function.</returns>
        </member>
        <member name="M:FistCore.Core.AggregateFunctionFactory.Count(System.String)">
            <summary>
            Returns the number of rows retrieved.
            </summary>
            <param name="alias">Function alias. May be null.</param>
            <returns>COUNT function.</returns>
        </member>
        <member name="M:FistCore.Core.AggregateFunctionFactory.Max(FistCore.Core.IDbColumn,System.String)">
            <summary>
            Returns the maximum value in the given column.
            </summary>
            <param name="field">Column. Null is not allowed.</param>
            <param name="alias">Function alias. May be null.</param>
            <returns>MAX funcion.</returns>
        </member>
        <member name="M:FistCore.Core.AggregateFunctionFactory.Min(FistCore.Core.IDbColumn,System.String)">
            <summary>
            Returns the minimum value in the given column.
            </summary>
            <param name="field">Column. Null is not allowed.</param>
            <param name="alias">Function alias. May be null.</param>
            <returns>MIN funcion.</returns>
        </member>
        <member name="M:FistCore.Core.AggregateFunctionFactory.Sum(FistCore.Core.IDbColumn,System.Boolean,System.String)">
            <summary>
            Returns the sum of all the values, or only the DISTINCT values, in the given column. SUM can be used with numeric columns only. Null values are ignored.
            </summary>
            <param name="field">Column. Null is not allowed.</param>
            <param name="distinct">Specifies that SUM returns the sum of unique values.</param>
            <param name="alias">Function alias. May be null.</param>
            <returns>SUM function.</returns>
        </member>
        <member name="T:FistCore.Core.ProviderComponents.GenericAggregateFunctionRenderer">
            <summary>Renders aggregate function as SQL element.</summary>
        </member>
        <member name="T:FistCore.Core.ProviderComponents.IAggregateFunctionRenderer">
            <summary>Renders aggregate function as SQL element.</summary>
        </member>
        <member name="M:FistCore.Core.ProviderComponents.IAggregateFunctionRenderer.Render(FistCore.Core.AggregateFunction,FistCore.Core.DbmsType,System.Text.StringBuilder,FistCore.Core.DbParameterCollection)">
            <summary>
            Renders aggregate function as SQL element.
            </summary>
            <param name="aggregateFunction">Aggregate function.</param>
            <param name="dbms">Target DBMS.</param>
            <param name="output">StringBuilder to which SQL is appended.</param>
            <param name="allParameters">SQL parameter collection to which the object's and its children's
            parameters are added. After the rendering is done the collection contains all parameters with unique names.</param>
        </member>
        <member name="M:FistCore.Core.ProviderComponents.GenericAggregateFunctionRenderer.Render(FistCore.Core.AggregateFunction,FistCore.Core.DbmsType,System.Text.StringBuilder,FistCore.Core.DbParameterCollection)">
            <summary>
            Renders aggregate function as SQL element.
            </summary>
            <param name="aggregateFunction">Aggregate function.</param>
            <param name="dbms">Target DBMS.</param>
            <param name="output">StringBuilder to which SQL is appended.</param>
            <param name="allParameters">SQL parameter collection to which the object's and its children's
            parameters are added. After the rendering is done the collection contains all parameters with unique names.</param>
        </member>
        <member name="T:FistCore.Core.ProviderComponents.GenericFunctionRenderer">
            <summary>Renders function as SQL element.</summary>
        </member>
        <member name="T:FistCore.Core.ProviderComponents.IFunctionRenderer">
            <summary>Renders function as SQL element.</summary>
        </member>
        <member name="M:FistCore.Core.ProviderComponents.IFunctionRenderer.Render(FistCore.Core.Function,FistCore.Core.DbmsType,System.Text.StringBuilder,FistCore.Core.DbParameterCollection)">
            <summary>
            Renders function as SQL element.
            </summary>
            <param name="function">Function.</param>
            <param name="dbms">Target DBMS.</param>
            <param name="output">StringBuilder to which SQL is appended.</param>
            <param name="allParameters">SQL parameter collection to which the object's and its children's
            parameters are added. After the rendering is done the collection contains all parameters with unique names.</param>
        </member>
        <member name="M:FistCore.Core.ProviderComponents.GenericFunctionRenderer.Render(FistCore.Core.Function,FistCore.Core.DbmsType,System.Text.StringBuilder,FistCore.Core.DbParameterCollection)">
            <summary>
            Renders function as SQL element.
            </summary>
            <param name="function">Function.</param>
            <param name="dbms">Target DBMS.</param>
            <param name="output">StringBuilder to which SQL is appended.</param>
            <param name="allParameters">SQL parameter collection to which the object's and its children's
            parameters are added. After the rendering is done the collection contains all parameters with unique names.</param>
        </member>
        <member name="T:FistCore.Core.ProviderComponents.GenericHierarchicalQueryExecutor">
            <summary>Executes hierarchical queries.</summary>
        </member>
        <member name="T:FistCore.Core.ProviderComponents.IHierarchicalQueryExecutor">
            <summary>Executes hierarchical queries.</summary>
        </member>
        <member name="M:FistCore.Core.ProviderComponents.IHierarchicalQueryExecutor.SelectTree(FistCore.Core.IConnectionProvider,FistCore.Core.IEntity,FistCore.Core.DbRelation,FistCore.Core.SearchCondition,FistCore.Core.OrderByClause,System.Boolean,System.Int32,System.Int32)">
            <summary>Selects rows in the hierarchy under the current entity.</summary>
            <param name="conn">Connection-transcation context to use.</param>
            <param name="rootEntity">Root entity.</param>
            <param name="recursiveRelation">Recursive relation which defines a hierarchy.</param>
            <param name="leafFilter">The search condition which restricts the rows returned. Often a criteria which filters out deactivated records.</param>
            <param name="sorter">Order by.</param>
            <param name="sortOnDb">Specifies whether sorting will take place on database or in DataTable after data has been fetched.</param>
            <param name="beginAtLevel">Zero-based index of the first level to fetch. Zero indicates that fetching starts at current entity,
            one indicates that fetching starts at the level directly beneath it etc.</param>
            <param name="endAtLevel">Zero-based index of the last level to fetch. Zero indicates that fetching ends at current entity,
            one indicates that fetching ends at the level directly beneath it etc. <see cref="F:System.Int32.MaxValue"/> indicates that operation ends at leaf nodes.</param>
            <returns>Rows in the hierarchy under the current entity.</returns>
        </member>
        <member name="M:FistCore.Core.ProviderComponents.IHierarchicalQueryExecutor.DetermineTreeDepth(FistCore.Core.IConnectionProvider,FistCore.Core.IEntity,FistCore.Core.DbRelation)">
            <summary>Counts the number of levels in the hieararchy starting with the current entity.</summary>
            <param name="conn">Connection-transcation context to use.</param>
            <param name="rootEntity">Root entity.</param>
            <param name="recursiveRelation">Recursive relation which defines a hierarchy.</param>
            <returns>Sub-tree depth.</returns>
        </member>
        <member name="M:FistCore.Core.ProviderComponents.IHierarchicalQueryExecutor.UpdateTree(FistCore.Core.IConnectionProvider,FistCore.Core.IEntity,FistCore.Core.DbRelation,FistCore.Core.UpdateList,FistCore.Core.SearchCondition,System.Int32,System.Int32)">
            <summary>Updates rows in the hierarchy under the current entity.</summary>
            <param name="conn">Connection-transcation context to use.</param>
            <param name="rootEntity">Root entity.</param>
            <param name="recursiveRelation">Recursive relation which defines a hierarchy.</param>
            <param name="setExpressions">The list of columns to be updated and expressions that compute/contain the new values.</param>
            <param name="leafFilter">The search condition which limits the number of rows that are updated. Often a criteria which filters out deactivated records.</param>
            <param name="beginAtLevel">Zero-based index of the first level to update. Zero indicates that updating starts at current entity,
            one indicates that updating starts at the level directly beneath it etc.</param>
            <param name="endAtLevel">Zero-based index of the last level to update. Zero indicates that updating ends at current entity,
            one indicates that updating ends at the level directly beneath it etc. <see cref="F:System.Int32.MaxValue"/> indicates that operation ends at leaf nodes.</param>
            <returns>Number of rows affected.</returns>
        </member>
        <member name="M:FistCore.Core.ProviderComponents.IHierarchicalQueryExecutor.CountTree(FistCore.Core.IConnectionProvider,FistCore.Core.IEntity,FistCore.Core.DbRelation,FistCore.Core.SearchCondition,System.Int32,System.Int32)">
            <summary>Counts rows in the hierarchy under the current entity.</summary>
            <param name="conn">Connection-transcation context to use.</param>
            <param name="rootEntity">Root entity.</param>
            <param name="recursiveRelation">Recursive relation which defines a hierarchy.</param>
            <param name="leafFilter">The search condition which restricts the rows counted. Often a criteria which filters out deactivated records.</param>
            <param name="beginAtLevel">Zero-based index of the first level to process. Zero indicates that counting starts at current entity,
            one indicates that counting starts at the level directly beneath it etc.</param>
            <param name="endAtLevel">Zero-based index of the last level to process. Zero indicates that counting ends at current entity,
            one indicates that counting ends at the level directly beneath it etc. <see cref="F:System.Int32.MaxValue"/> indicates that operation ends at leaf nodes.</param>
            <returns>Total row count in the hierarchy.</returns>
        </member>
        <member name="M:FistCore.Core.ProviderComponents.IHierarchicalQueryExecutor.SumTree(FistCore.Core.IConnectionProvider,FistCore.Core.IEntity,FistCore.Core.IDbColumn,FistCore.Core.DbRelation,FistCore.Core.SearchCondition,System.Int32,System.Int32)">
            <summary>Retrieves the sum of the column values in the hierarchy under the current entity.</summary>
            <param name="conn">Connection-transcation context to use.</param>
            <param name="rootEntity">Root entity.</param>
            <param name="column">Column. Must be a numeric column that belongs to the current entity's table.</param>
            <param name="recursiveRelation">Recursive relation which defines a hierarchy.</param>
            <param name="leafFilter">The search condition which restricts the rows processed. Often a criteria which filters out deactivated records.</param>
            <param name="beginAtLevel">Zero-based index of the first level to process. Zero indicates that summing starts at current entity,
            one indicates that summing starts at the level directly beneath it etc.</param>
            <param name="endAtLevel">Zero-based index of the last level to process. Zero indicates that summing ends at current entity,
            one indicates that summing ends at the level directly beneath it etc. <see cref="F:System.Int32.MaxValue"/> indicates that operation ends at leaf nodes.</param>
            <returns>Total sum of column values in the hierarchy or <see cref="F:System.DBNull.Value"/>.</returns>
        </member>
        <member name="M:FistCore.Core.ProviderComponents.IHierarchicalQueryExecutor.MinInTree(FistCore.Core.IConnectionProvider,FistCore.Core.IEntity,FistCore.Core.IDbColumn,FistCore.Core.DbRelation,FistCore.Core.SearchCondition,System.Int32,System.Int32)">
            <summary>Retrieves the minimum column value in the hierarchy under the current entity.</summary>
            <param name="conn">Connection-transcation context to use.</param>
            <param name="rootEntity">Root entity.</param>
            <param name="column">Column to compare. Must belong to the current entity's table.</param>
            <param name="recursiveRelation">Recursive relation which defines a hierarchy.</param>
            <param name="leafFilter">The search condition which restricts the rows processed. Often a criteria which filters out deactivated records.</param>
            <param name="beginAtLevel">Zero-based index of the first level to process. Zero indicates that comparison starts at current entity,
            one indicates that comparison starts at the level directly beneath it etc.</param>
            <param name="endAtLevel">Zero-based index of the last level to process. Zero indicates that comparison ends at current entity,
            one indicates that comparison ends at the level directly beneath it etc. <see cref="F:System.Int32.MaxValue"/> indicates that operation ends at leaf nodes.</param>
            <returns>Minimum value or <see cref="F:System.DBNull.Value"/>.</returns>
        </member>
        <member name="M:FistCore.Core.ProviderComponents.IHierarchicalQueryExecutor.MaxInTree(FistCore.Core.IConnectionProvider,FistCore.Core.IEntity,FistCore.Core.IDbColumn,FistCore.Core.DbRelation,FistCore.Core.SearchCondition,System.Int32,System.Int32)">
            <summary>Retrieves the maximum column value in the hierarchy under the current entity.</summary>
            <param name="conn">Connection-transcation context to use.</param>
            <param name="rootEntity">Root entity.</param>
            <param name="column">Column to compare. Must belong to the current entity's table.</param>
            <param name="recursiveRelation">Recursive relation which defines a hierarchy.</param>
            <param name="leafFilter">The search condition which restricts the rows processed. Often a criteria which filters out deactivated records.</param>
            <param name="beginAtLevel">Zero-based index of the first level to process. Zero indicates that comparison starts at current entity,
            one indicates that comparison starts at the level directly beneath it etc.</param>
            <param name="endAtLevel">Zero-based index of the last level to process. Zero indicates that comparison ends at current entity,
            one indicates that comparison ends at the level directly beneath it etc. <see cref="F:System.Int32.MaxValue"/> indicates that operation ends at leaf nodes.</param>
            <returns>Maximum value or <see cref="F:System.DBNull.Value"/>.</returns>
        </member>
        <member name="M:FistCore.Core.ProviderComponents.GenericHierarchicalQueryExecutor.SelectTree(FistCore.Core.IConnectionProvider,FistCore.Core.IEntity,FistCore.Core.DbRelation,FistCore.Core.SearchCondition,FistCore.Core.OrderByClause,System.Boolean,System.Int32,System.Int32)">
            <summary>Selects rows in the hierarchy under the current entity.</summary>
            <param name="conn">Connection-transcation context to use.</param>
            <param name="rootEntity">Root entity.</param>
            <param name="recursiveRelation">Recursive relation which defines a hierarchy.</param>
            <param name="leafFilter">The search condition which restricts the rows returned. Often a criteria which filters out deactivated records.</param>
            <param name="sorter">Order by.</param>
            <param name="sortOnDb">Specifies whether sorting will take place on database or in DataTable after data has been fetched.</param>
            <param name="beginAtLevel">Zero-based index of the first level to fetch. Zero indicates that fetching starts at current entity,
            one indicates that fetching starts at the level directly beneath it etc.</param>
            <param name="endAtLevel">Zero-based index of the last level to fetch. Zero indicates that fetching ends at current entity,
            one indicates that fetching ends at the level directly beneath it etc. <see cref="F:System.Int32.MaxValue"/> indicates that operation ends at leaf nodes.</param>
            <returns>Rows in the hierarchy under the current entity.</returns>
        </member>
        <member name="M:FistCore.Core.ProviderComponents.GenericHierarchicalQueryExecutor.DetermineTreeDepth(FistCore.Core.IConnectionProvider,FistCore.Core.IEntity,FistCore.Core.DbRelation)">
            <summary>Counts the number of levels in the hieararchy starting with the current entity.</summary>
            <param name="conn">Connection-transcation context to use.</param>
            <param name="rootEntity">Root entity.</param>
            <param name="recursiveRelation">Recursive relation which defines a hierarchy.</param>
            <returns>Sub-tree depth.</returns>
        </member>
        <member name="M:FistCore.Core.ProviderComponents.GenericHierarchicalQueryExecutor.UpdateTree(FistCore.Core.IConnectionProvider,FistCore.Core.IEntity,FistCore.Core.DbRelation,FistCore.Core.UpdateList,FistCore.Core.SearchCondition,System.Int32,System.Int32)">
            <summary>Updates rows in the hierarchy under the current entity.</summary>
            <param name="conn">Connection-transcation context to use.</param>
            <param name="rootEntity">Root entity.</param>
            <param name="recursiveRelation">Recursive relation which defines a hierarchy.</param>
            <param name="setExpressions">The list of columns to be updated and expressions that compute/contain the new values.</param>
            <param name="leafFilter">The search condition which limits the number of rows that are updated. Often a criteria which filters out deactivated records.</param>
            <param name="beginAtLevel">Zero-based index of the first level to update. Zero indicates that updating starts at current entity,
            one indicates that updating starts at the level directly beneath it etc.</param>
            <param name="endAtLevel">Zero-based index of the last level to update. Zero indicates that updating ends at current entity,
            one indicates that updating ends at the level directly beneath it etc. <see cref="F:System.Int32.MaxValue"/> indicates that operation ends at leaf nodes.</param>
            <returns>Number of rows affected.</returns>
        </member>
        <member name="M:FistCore.Core.ProviderComponents.GenericHierarchicalQueryExecutor.CountTree(FistCore.Core.IConnectionProvider,FistCore.Core.IEntity,FistCore.Core.DbRelation,FistCore.Core.SearchCondition,System.Int32,System.Int32)">
            <summary>Counts rows in the hierarchy under the current entity.</summary>
            <param name="conn">Connection-transcation context to use.</param>
            <param name="rootEntity">Root entity.</param>
            <param name="recursiveRelation">Recursive relation which defines a hierarchy.</param>
            <param name="leafFilter">The search condition which restricts the rows counted. Often a criteria which filters out deactivated records.</param>
            <param name="beginAtLevel">Zero-based index of the first level to process. Zero indicates that counting starts at current entity,
            one indicates that counting starts at the level directly beneath it etc.</param>
            <param name="endAtLevel">Zero-based index of the last level to process. Zero indicates that counting ends at current entity,
            one indicates that counting ends at the level directly beneath it etc. <see cref="F:System.Int32.MaxValue"/> indicates that operation ends at leaf nodes.</param>
            <returns>Total row count in the hierarchy.</returns>
        </member>
        <member name="M:FistCore.Core.ProviderComponents.GenericHierarchicalQueryExecutor.SumTree(FistCore.Core.IConnectionProvider,FistCore.Core.IEntity,FistCore.Core.IDbColumn,FistCore.Core.DbRelation,FistCore.Core.SearchCondition,System.Int32,System.Int32)">
            <summary>Retrieves the sum of the column values in the hierarchy under the current entity.</summary>
            <param name="conn">Connection-transcation context to use.</param>
            <param name="rootEntity">Root entity.</param>
            <param name="column">Column. Must be a numeric column that belongs to the current entity's table.</param>
            <param name="recursiveRelation">Recursive relation which defines a hierarchy.</param>
            <param name="leafFilter">The search condition which restricts the rows processed. Often a criteria which filters out deactivated records.</param>
            <param name="beginAtLevel">Zero-based index of the first level to process. Zero indicates that summing starts at current entity,
            one indicates that summing starts at the level directly beneath it etc.</param>
            <param name="endAtLevel">Zero-based index of the last level to process. Zero indicates that summing ends at current entity,
            one indicates that summing ends at the level directly beneath it etc. <see cref="F:System.Int32.MaxValue"/> indicates that operation ends at leaf nodes.</param>
            <returns>Total sum of column values in the hierarchy or <see cref="F:System.DBNull.Value"/>.</returns>
        </member>
        <member name="M:FistCore.Core.ProviderComponents.GenericHierarchicalQueryExecutor.MinInTree(FistCore.Core.IConnectionProvider,FistCore.Core.IEntity,FistCore.Core.IDbColumn,FistCore.Core.DbRelation,FistCore.Core.SearchCondition,System.Int32,System.Int32)">
            <summary>Retrieves the minimum column value in the hierarchy under the current entity.</summary>
            <param name="conn">Connection-transcation context to use.</param>
            <param name="rootEntity">Root entity.</param>
            <param name="column">Column to compare. Must belong to the current entity's table.</param>
            <param name="recursiveRelation">Recursive relation which defines a hierarchy.</param>
            <param name="leafFilter">The search condition which restricts the rows processed. Often a criteria which filters out deactivated records.</param>
            <param name="beginAtLevel">Zero-based index of the first level to process. Zero indicates that comparison starts at current entity,
            one indicates that comparison starts at the level directly beneath it etc.</param>
            <param name="endAtLevel">Zero-based index of the last level to process. Zero indicates that comparison ends at current entity,
            one indicates that comparison ends at the level directly beneath it etc. <see cref="F:System.Int32.MaxValue"/> indicates that operation ends at leaf nodes.</param>
            <returns>Minimum value or <see cref="F:System.DBNull.Value"/>.</returns>
        </member>
        <member name="M:FistCore.Core.ProviderComponents.GenericHierarchicalQueryExecutor.MaxInTree(FistCore.Core.IConnectionProvider,FistCore.Core.IEntity,FistCore.Core.IDbColumn,FistCore.Core.DbRelation,FistCore.Core.SearchCondition,System.Int32,System.Int32)">
            <summary>Retrieves the maximum column value in the hierarchy under the current entity.</summary>
            <param name="conn">Connection-transcation context to use.</param>
            <param name="rootEntity">Root entity.</param>
            <param name="column">Column to compare. Must belong to the current entity's table.</param>
            <param name="recursiveRelation">Recursive relation which defines a hierarchy.</param>
            <param name="leafFilter">The search condition which restricts the rows processed. Often a criteria which filters out deactivated records.</param>
            <param name="beginAtLevel">Zero-based index of the first level to process. Zero indicates that comparison starts at current entity,
            one indicates that comparison starts at the level directly beneath it etc.</param>
            <param name="endAtLevel">Zero-based index of the last level to process. Zero indicates that comparison ends at current entity,
            one indicates that comparison ends at the level directly beneath it etc. <see cref="F:System.Int32.MaxValue"/> indicates that operation ends at leaf nodes.</param>
            <returns>Maximum value or <see cref="F:System.DBNull.Value"/>.</returns>
        </member>
        <member name="T:FistCore.Core.SealedDbColumn">
             <summary>
             Contains read-only database column metadata and methods.
             </summary>
             <remarks><para>Provides methods for the creation of the compatibile ADO.NET <see cref="T:System.Data.DataColumn"/> objects,
             validation (see <see cref="M:FistCore.Core.SealedDbColumn.Validate(System.Object)"/>) and contains metadata for the database columns it represents.</para>
             <para><b>SealedDbColumn</b> class implements <see cref="T:FistCore.Core.IDbColumn"/> interface. It implements only setters mandated by <see cref="T:FistCore.Core.IDbColumn"/> interface. All other
             properties are read-only and guaranted that no attempt will be made to modify underlying data stored in
             <see cref="T:FistCore.Core.DbColumnConfiguration"/> object. This makes it possible to use a single static <b>DbColumnConfiguration</b>
             object that will be used by all <b>SealedDbColumn</b> instances which represent the same database field.
             Latest version of <b>FistCore Generator</b> implements code generation that supports the described pattern
             which significantly optimizes memory usage.</para>
             <para>Setters mandated by <b>IDbTable</b> interface are implemented in a very conservative manner. Only <see cref="P:FistCore.Core.IDbColumn.Table"/>
             property affects internal state of object. Additionaly, <see cref="P:FistCore.Core.IDbColumn.Table"/> property may
             be used only once. If it is already set then any further attemps to change it are ignored.</para>
             <para>When using singleton design pattern for <b>DbColumnConfiguration</b> and <b>IDbTable</b> objects, each new <b>SealedDbColumn</b>
             instance will only consume additional <b>8 bytes</b>. This is significantly less than the <b>DbColumn</b> column class where each instance
             had a variable size averaging between 100 and 200 bytes in most cases.</para>
             </remarks>
             <example>
             The following example uses generated table and column metadata to select data from tables Territories and Region.
             <code>
             public DataTable SelectTerritoriesAndRegions()
             {
             	// SELECT Territories.TerritoryDescription, Region.RegionDescription
             	// FROM Territories
             	//		INNER JOIN Region ON Territories.RegionID = Region.RegionID
            
             	TerritoriesMeta territories = new TerritoriesMeta();
             	RegionMeta regions = new RegionMeta();
            
             	SelectStatement select = new SelectStatement(territories);
             	select.SelectList.Add(territories.TerritoryDescription);
             	select.SelectList.Add(regions.RegionDescription);
             	select.Relations.Add(new DbRelation(regions, territories, territories.RegionID));
            
             	DataTable territoryAndRegionNames = select.Execute();
             	return territoryAndRegionNames;
             }
             </code>
             </example>
        </member>
        <member name="M:FistCore.Core.SealedDbColumn.#ctor(FistCore.Core.IDbColumnConfiguration,FistCore.Core.IDbTable)">
            <summary>
            Initializes a new instance of the DbColumn class.
            </summary>
            <param name="immutableProperties">Provides values for immutable properties.</param>
            <param name="table">Table or view to which this column belongs to.</param>
        </member>
        <member name="M:FistCore.Core.SealedDbColumn.Validate(System.Object)">
             <summary>
             Checks whether the given value is valid for this column.
             </summary>
             <remarks>Checks whether the value contained in the given field obeys basic constraints
             (nullability, min/max value etc). Returns <see cref="T:FistCore.Core.FieldErrorCode"/> that indicates
             the type of error encountered.</remarks>
             <param name="value">Value.</param>
             <returns>Error code.</returns>
             <example>
             The folowing example tests values against the HireDate field of the Northwind's Employees table.
             HireDate is a nullable T-SQL DateTime type (SQL Server). Minimum DateTime value supported by SQL Server is January 1, 1753.
             <code>
             EmployeesMeta employees = new EmployeesMeta();
            
             // The field is nullable.
             // Validate method returns FieldErrorCode.AllOk.
             FieldErrorCode allOk = employees.HireDate.Validate(null);
            
             // Minimum DateTime value supported by SQL Server is January 1, 1753.
             // Validate method returns FieldErrorCode.OutOfRangeError.
             FieldErrorCode outOfRangeError = employees.HireDate.Validate(new DateTime(1000, 1, 1));
            
             // The field cannot accept integer values.
             // Validate method returns FieldErrorCode.NonCompatibileType.
             FieldErrorCode nonCompatibileType = employees.HireDate.Validate(0);
             </code>
             </example>
        </member>
        <member name="M:FistCore.Core.SealedDbColumn.NewDataColumn">
            <summary>
            Creates a new DataColumn that represents this DbColumn in a DataTable.
            </summary>
        </member>
        <member name="M:FistCore.Core.SealedDbColumn.GetNormalizedTableAlias">
            <summary>
            Returns normalized table alias that contains only letters and digits.
            </summary>
        </member>
        <member name="M:FistCore.Core.SealedDbColumn.GetPrefixedAlias">
            <summary>
            Computes a string which is a combination of prefix (usually table name) and column alias.
            Eg: Id -> MyTable_Id
            </summary>
            <returns>Prefixed alias.</returns>
        </member>
        <member name="M:FistCore.Core.SealedDbColumn.RenderColumnName(FistCore.Core.DbmsType,System.Text.StringBuilder)">
            <summary>
            Renders column name for the given DBMS. Handles special characters.
            </summary>
            <param name="dbms">Target DBMS.</param>
            <param name="output">StringBuilder to which table name is appended.</param>
            <remarks>Special characters are handled differently on different DBMSs.
            Eg. if column contains blanks it has to be enclosed in brackets for SQL Server (eg. [Employee ID]).</remarks>
        </member>
        <member name="M:FistCore.Core.SealedDbColumn.RenderFullName(FistCore.Core.DbmsType,System.Text.StringBuilder)">
            <summary>
            Renders full name for the given DBMS. Handles special characters.
            </summary>
            <param name="dbms">Target DBMS.</param>
            <param name="output">StringBuilder to which table name is appended.</param>
            <remarks>Special characters in table and column names are handled differently on different DBMSs.</remarks>
        </member>
        <member name="M:FistCore.Core.SealedDbColumn.RenderAlias(FistCore.Core.DbmsType,System.Text.StringBuilder)">
            <summary>
            Renders table alias for the given DBMS. Handles special characters.
            </summary>
            <param name="dbms">Target DBMS.</param>
            <param name="output">StringBuilder to which the alias is appended.</param>
            <remarks>Special characters are handled differently on different DBMSs.
            If alias contains blanks it has to be enclosed in brackets for SQL Server
            (eg. [My employees]), in quotes for Oracle (eg. "My employees") etc.</remarks>
        </member>
        <member name="P:FistCore.Core.SealedDbColumn.Table">
            <summary>
            Gets or sets <see cref="T:FistCore.Core.IDbTable"/> object to which this column belongs to.
            </summary>
            <remarks>Table may be only set once. If the property is already set then further attempts to change it are ignored.</remarks>
        </member>
        <member name="P:FistCore.Core.SealedDbColumn.FullName">
            <summary>
            Gets the full name of this column in the following format: TableAlias.ColumnName or only
            ColumnName if the <see cref="P:FistCore.Core.SealedDbColumn.Table"/> property is not set. Eg: "MyTable.Id"
            </summary>
        </member>
        <member name="P:FistCore.Core.SealedDbColumn.Alias">
            <summary>
            Gets alias or column name.
            </summary>
            <remarks><para>Alias is equal to column name, unless parent table specifies that a prefixed alias should be generated.
            If table's <see cref="P:FistCore.Core.IDbTable.ColumnAliasesArePrefixed"/> property is set to <b>true</b> then prefixed alias
            as generated by <see cref="M:FistCore.Core.SealedDbColumn.GetPrefixedAlias"/> method is returned.</para></remarks>
        </member>
        <member name="P:FistCore.Core.SealedDbColumn.Prefix">
            <summary>
            Gets alias prefix. Eg: "MyTable_". Empty string if parent table is not set.
            </summary>
        </member>
        <member name="P:FistCore.Core.SealedDbColumn.DbType">
            <summary>
            Gets the <see cref="P:FistCore.Core.SealedDbColumn.DbType"/> of the column.
            Changes of this property affect the other type properties.
            </summary>
        </member>
        <member name="P:FistCore.Core.SealedDbColumn.IsNullable">
            <summary>
            Gets the value that indicates whether null values are allowed in this column.
            </summary>
        </member>
        <member name="P:FistCore.Core.SealedDbColumn.AutoIncrement">
            <summary>
            Gets the value that indicates whether the column automatically increments the value for new rows added to the table.
            </summary>
        </member>
        <member name="P:FistCore.Core.SealedDbColumn.ColumnName">
            <summary>
            Gets the name of the column.
            </summary>
        </member>
        <member name="P:FistCore.Core.SealedDbColumn.DataType">
            <summary>
            Gets .NET type of data stored in the column.
            Changes of this property affect the database type property.
            </summary>
        </member>
        <member name="P:FistCore.Core.SealedDbColumn.DefaultValue">
            <summary>
            Gets the default value for the column when creating new rows.
            </summary>
        </member>
        <member name="P:FistCore.Core.SealedDbColumn.MaxLengthIfText">
            <summary>
            Gets the maximum length of a text column.
            Has no effect it it is not a text column.
            </summary>
        </member>
        <member name="P:FistCore.Core.SealedDbColumn.Ordinal">
            <summary>
            Gets the position of the column in the database table/view.
            </summary>
        </member>
        <member name="P:FistCore.Core.SealedDbColumn.IsPrimaryKeyPart">
            <summary>
            Gets the value that indicates whether the column is a part of the primary key.
            </summary>
        </member>
        <member name="P:FistCore.Core.SealedDbColumn.IsForeignKeyPart">
            <summary>
            Gets the value that indicates whether the column is a part of a foreign key.
            </summary>
        </member>
        <member name="P:FistCore.Core.SealedDbColumn.IsUniqueConstraintPart">
            <summary>
            Gets the value that indicates whether the column is a part of a unique constraint.
            </summary>
        </member>
        <member name="P:FistCore.Core.SealedDbColumn.MinValue">
            <summary>
            Gets the smallest possible value of this column. May be <b>null</b>.
            </summary>
        </member>
        <member name="P:FistCore.Core.SealedDbColumn.MaxValue">
            <summary>
            Gets the smallest possible value of this column. May be <b>null</b>.
            </summary>
        </member>
        <member name="P:FistCore.Core.SealedDbColumn.PropertyName">
            <summary>
            Gets the name of the generated entity class property mapped to this column.
            </summary>
        </member>
        <member name="P:FistCore.Core.SealedDbColumn.IsAutoGenerated">
            <summary>
            Gets the value which indicates whether the value of the field is automatically generated by
            database (eg. timestamp or computed fields in SQL Server).
            If set to true then this field's value cannot be inserted or updated.
            </summary>
        </member>
        <member name="P:FistCore.Core.SealedDbColumn.SequenceName">
            <summary>
            Gets the sequence used to increment values for this field.
            Must be <b>null</b> if AutoIncrement flag is set to false.
            </summary>
        </member>
        <member name="P:FistCore.Core.SealedDbColumn.ExtendedProperties">
            <summary>Gets the collection of customized information associated with the column.</summary>
            <value>A IPropertyCollection with all custom information. <b>null</b> if no custom information is configured.</value>
            <remarks>The ExtendedProperties property lets you configure custom information for the column such as DBMS-specific properties.</remarks>
        </member>
        <member name="T:FistCore.Core.SealedDbTable">
             <summary>
             Contains database table/view metadata and methods.
             Factory class for related IEntity, EntityCollection and ADO.NET objects.
             </summary>
             <remarks><para>Provides methods for the creation of the compatibile ADO.NET objects (see <see cref="M:FistCore.Core.SealedDbTable.NewDataTable"/>)
             and contains metadata for the table/view it represents such as:
             <list type="bullet">
            	<item>Catalog data to which to which the table belongs to.</item>
            	<item>Table name and optional alias.</item>
            	<item>Fields owned by the table.</item>
            	<item>Primary key data.</item>
            	<item>Foreign keys.</item>
             </list>
             </para>
             <para><b>SealedDbTable</b> class implements <see cref="T:FistCore.Core.IDbTable"/> interface in a more efficient manner than
             <see cref="T:FistCore.Core.DbTable"/> class. It implements only setters mandated by <see cref="T:FistCore.Core.IDbTable"/> interface. All other
             properties are read-only and guaranted that no attempt will be made to modify underlying data stored in
             <see cref="T:FistCore.Core.IDbTableConfiguration"/> object. This makes it possible to use a single static <b>IDbTableConfiguration</b>
             object that will be used by all <b>SealedDbTable</b> instances which represent the same database table/view.
             Latest version of <b>FistCore Generator</b> implements code generation that supports the described pattern
             which significantly optimizes memory usage.</para>
             <seealso cref="T:FistCore.Core.IDbColumn"/><seealso cref="T:FistCore.Core.DbRelation"/><seealso cref="T:FistCore.Core.RelationBucket"/>
             </remarks>
             <example>
             The following example demonstrates how to use FistCore metadata classes to create ADO.NET DataColumn,
             DataTable, DataRelation, DataSet and Constraint objects.
             <code>
             EmployeesMeta employees = new EmployeesMeta();
             EmployeeTerritoriesMeta empTerritories = new EmployeeTerritoriesMeta();
             TerritoriesMeta territories = new TerritoriesMeta();
             RegionMeta regions = new RegionMeta();
            
             // Create relations between tables.
             RelationBucket relations = new RelationBucket();
             relations.Add(employees, empTerritories, empTerritories.EmployeeID);
             relations.Add(territories, empTerritories, empTerritories.TerritoryID);
             relations.Add(regions, territories, territories.RegionID);
            
             // Create a DataSet object with relations between DataTables and constraints
             // (primary key, foreign key and unique constraints.
             DataSet ds = relations.NewDataSet("EmployeeData", true, true, true);
             </code>
             </example>
        </member>
        <member name="M:FistCore.Core.SealedDbTable.#ctor(FistCore.Core.IDbTableConfiguration,System.String,System.Boolean)">
            <summary>
            Initializes a new instance of the <b>SealedDbTable</b> class.
            </summary>
            <param name="immutableProperties">Provides values for immutable members.</param>
            <param name="alias">Object alias. If <b>null</b> then it will be equal to table name.</param>
            <param name="columnAliasesArePrefixed">Specifies whether columns' aliases are prefixed with a table alias.</param>
        </member>
        <member name="M:FistCore.Core.SealedDbTable.NewDataTable">
            <summary>
            Creates a new <see cref="T:System.Data.DataTable"/> with all the columns and primary key defined by the IDbTable object.
            </summary>
            <returns>DataTable.</returns>
        </member>
        <member name="M:FistCore.Core.SealedDbTable.HasEqualAliasAndNameAs(FistCore.Core.IDbTable)">
            <summary>
            Checks whether the two tables have equal aliases and names.
            </summary>
            <param name="otherTable">Other table.</param>
            <returns>True if aliases and names are equal. False otherwise.</returns>
        </member>
        <member name="M:FistCore.Core.SealedDbTable.RenderTableName(FistCore.Core.DbmsType,System.Text.StringBuilder)">
            <summary>
            Renders table name for the given DBMS. Handles special characters.
            </summary>
            <param name="dbms">Target DBMS.</param>
            <param name="output">StringBuilder to which table name is appended.</param>
            <remarks>Special characters are handled differently on different DBMSs.
            If table contains blanks it has to be enclosed in brackets for SQL Server
            (eg. [My employees]), in quotes for Oracle (eg. "My employees") etc.</remarks>
        </member>
        <member name="M:FistCore.Core.SealedDbTable.RenderAlias(FistCore.Core.DbmsType,System.Text.StringBuilder)">
            <summary>
            Renders table alias for the given DBMS. Handles special characters.
            </summary>
            <param name="dbms">Target DBMS.</param>
            <param name="output">StringBuilder to which the alias is appended.</param>
            <remarks>Special characters are handled differently on different DBMSs.
            If alias contains blanks it has to be enclosed in brackets for SQL Server
            (eg. [My employees]), in quotes for Oracle (eg. "My employees") etc.</remarks>
        </member>
        <member name="M:FistCore.Core.SealedDbTable.SetPrefixedAliases">
            <summary>
            Changes aliases of all columns so that they start with prefix (usually table name).
            Eg: Id -> MyTable_Id
            </summary>
            <remarks>Avoid using SetPrefixedAliases() as it changes internal state of table objects.
            Use Clone(string, bool) method and constructor overloads to instantiate a new object, instead.
            The method will be marked as obsolete in a future release and eventually it may be removed alltogether.</remarks>
        </member>
        <member name="M:FistCore.Core.SealedDbTable.GetColumnConfiguration(System.Int32)">
            <summary>
            Gets configuration, ie. immutable properties, of column at the specified index.
            </summary>
            <param name="index">Index of column in <see cref="P:FistCore.Core.SealedDbTable.Columns"/> collection.</param>
            <returns>Column configuration.</returns>
        </member>
        <member name="M:FistCore.Core.SealedDbTable.GetColumnConfiguration(System.String)">
            <summary>
            Gets configuration, ie. immutable properties, of column with the specified name.
            </summary>
            <param name="columnName">Name of the column.</param>
            <returns>Column configuration or <b>null</b> if not found.</returns>
        </member>
        <member name="M:FistCore.Core.SealedDbTable.GetParentProperty(FistCore.Core.DbRelation,FistCore.Core.IDbColumn)">
            <summary>
            Gets the full property path for the specified parent entity field.
            </summary>
            <param name="fk">Relation to the parent entity.</param>
            <param name="parentColumn">Parent entity field. If null only property name generated for parent entity is returned.</param>
            <returns>Parent entity property name followed by dot operator and parent field property name if <b>parentColumn</b> is defined; otherwise only parent entity property name.</returns>
            <remarks>Eg. the following code snippet returns "RegionParent.RegionDescription" property path.
            <code>
            public string GetRegionDescriptionPropertyForDataBinder()
            {
            	TerritoriesMeta territories = new TerritoriesMeta();
            	RegionMeta regions = new RegionMeta();
            	return territories.GetParentProperty(territories.FK_RegionID, regions.RegionDescription);
            }
            </code>
            </remarks>
        </member>
        <member name="M:FistCore.Core.SealedDbTable.GetParentProperty(System.Int32,FistCore.Core.IDbColumn)">
            <summary>
            Gets the full property path for the specified parent entity field.
            </summary>
            <param name="parentIndex">Index of parent property name in the <see cref="P:FistCore.Core.SealedDbTable.ParentEntityProperties"/> array.</param>
            <param name="parentColumn">Parent entity field. If null only property name generated for parent entity is returned.</param>
            <returns>Parent entity property name followed by dot operator and parent field property name if <b>parentColumn</b> is defined; otherwise only parent entity property name.</returns>
        </member>
        <member name="M:FistCore.Core.SealedDbTable.GetChildTables">
            <summary>Gets tables which reference the current table.</summary>
            <returns>Array of tables or empty array if the current table is not referenced by other objects.</returns>
            <remarks>The GetChildTables method must be implemented in derived class.</remarks>
        </member>
        <member name="M:FistCore.Core.SealedDbTable.GetChildRelations">
            <summary>Gets relations where current table acts as a parent.</summary>
            <returns>Array of relations or empty array if the current table is not referenced by other objects.</returns>
            <remarks>The GetChildRelations method must be implemented in derived class.</remarks>
        </member>
        <member name="M:FistCore.Core.SealedDbTable.NewEntity">
            <summary>
            When implemented in inherited classes it should return a new empty entity compatibile with this IDbTable.
            </summary>
            <returns>New entity.</returns>
        </member>
        <member name="M:FistCore.Core.SealedDbTable.NewEntityCollection">
            <summary>
            When implemented in inherited classes it should return a new empty <see cref="T:FistCore.Core.EntityCollection`2"/> compatibile with this IDbTable.
            </summary>
            <returns>Empty EntityCollection.</returns>
            <remarks><see cref="P:FistCore.Core.EntityCollection`2.IDbTable"/> object must have the same alias as the current DbTable instance.</remarks>
        </member>
        <member name="M:FistCore.Core.SealedDbTable.NewEntityFiller">
            <summary>
            When implemented in inherited classes it should return object that builds entities directly from retrieved data, ie. <see cref="T:System.Data.IDataReader"/>.
            </summary>
            <returns>Entity filler.</returns>
        </member>
        <member name="M:FistCore.Core.SealedDbTable.Clone(System.String)">
            <summary>
            When implemented in inherited classes it should create another IDbTable object for the same table/view.
            </summary>
            <param name="cloneAlias">Clone alias. May be <b>null</b>.</param>
            <returns>Clone.</returns>
        </member>
        <member name="M:FistCore.Core.SealedDbTable.Clone(System.String,System.Boolean)">
            <summary>
            Creates another IDbTable object for the same table/view.
            </summary>
            <param name="cloneAlias">Clone alias.</param>
            <param name="setPrefixedAliases">Specifies whether cloned columns will have prefixed aliases.</param>
            <returns>Clone.</returns>
        </member>
        <member name="M:FistCore.Core.SealedDbTable.CreateForeignKeys">
            <summary>
            Initializes an array of relations used by foreign keys.
            Inherited classes must implement this method.
            The method is called when property <see cref="P:FistCore.Core.SealedDbTable.ForeignKeys"/> is accessed for the first time.
            </summary>
            <remarks>It is not wise to call this method in a constructor. If a recursive relation is defined,
            or there is a circular path between multiple tables, an endless loop of CreateForeignKeys might occur.
            It is best to call the method only when relations are required, i.e. accessed.</remarks>
        </member>
        <member name="P:FistCore.Core.SealedDbTable.Catalog">
            <summary>
            Gets catalog information to which the table/view belongs to.
            </summary>
        </member>
        <member name="P:FistCore.Core.SealedDbTable.TableName">
            <summary>
            Gets table name.
            </summary>
        </member>
        <member name="P:FistCore.Core.SealedDbTable.Alias">
            <summary>
            Gets object alias. By default it is equal to the table name.
            </summary>
        </member>
        <member name="P:FistCore.Core.SealedDbTable.ColumnAliasesArePrefixed">
            <summary>
            Gets the value that specifies whether columns' aliases are prefixed and changed whenever the table alias is changed.
            </summary>
            <remarks>Usually columns aliases are prefixed with a table name/alias. This ensures the uniqueness
            of column aliases when selecting two columns with the same name from two different tables.</remarks>
        </member>
        <member name="P:FistCore.Core.SealedDbTable.Columns">
            <summary>
            Gets table fields.
            </summary>
        </member>
        <member name="P:FistCore.Core.SealedDbTable.PrimaryKey">
            <summary>
            Gets primary key fields.
            </summary>
        </member>
        <member name="P:FistCore.Core.SealedDbTable.EntityDaoCreationStrategy">
            <summary>
            Not implemented. Always returns <b>null</b>.
            </summary>
        </member>
        <member name="P:FistCore.Core.SealedDbTable.ParentEntityProperties">
            <summary>
            Gets the names of the properties generated for the parent entities.
            </summary>
        </member>
        <member name="P:FistCore.Core.SealedDbTable.ExtendedProperties">
            <summary>Gets the collection of customized information associated with the table.</summary>
            <value>A IPropertyCollection with all custom information. <b>null</b> if no custom information is configured.</value>
            <remarks>The ExtendedProperties property lets you configure custom information for the table such as DBMS-specific properties.</remarks>
        </member>
        <member name="P:FistCore.Core.SealedDbTable.ForeignKeys">
            <summary>
            Gets the relations used by foreign keys.
            Empty array if no foreign key relations have been defined.
            </summary>
        </member>
        <member name="T:FistCore.Core.InsertExpression">
            <summary>
            Column and expression which computes the value that will be inserted in the column.
            </summary>
        </member>
        <member name="M:FistCore.Core.InsertExpression.#ctor(FistCore.Core.IDbColumn,System.Object)">
            <summary>
            Creates a new column-value pair.
            </summary>
            <param name="column">Column to which the value is to be inserted.</param>
            <param name="value">Value. May be <b>null</b>.</param>
        </member>
        <member name="P:FistCore.Core.InsertExpression.Column">
            <summary>
            Gets the column to which the value is to be inserted.
            </summary>
        </member>
        <member name="P:FistCore.Core.InsertExpression.ValueExpression">
            <summary>
            Gets the expression that computes/contains the value that is inserted in the given column.
            </summary>
        </member>
        <member name="T:FistCore.Core.InsertList">
            <summary>
            List of columns in which to insert data and the list of data values to be inserted.
            </summary>
        </member>
        <member name="M:FistCore.Core.InsertList.#ctor">
            <summary>
            Creates a new InsertList.
            </summary>
        </member>
        <member name="M:FistCore.Core.InsertList.Add(FistCore.Core.IDbColumn,System.Object)">
            <summary>
            Adds a column-value pair to the collection.
            </summary>
            <param name="column">Column.</param>
            <param name="value">Value that is inserted in the given column. May be <b>null</b>.</param>
        </member>
        <member name="M:FistCore.Core.InsertList.GetEnumerator">
            <summary>
            Gets an enumerator that can iterate through InsertList.
            </summary>
        </member>
        <member name="P:FistCore.Core.InsertList.Count">
            <summary>
            Gets total number of items in this collection.
            </summary>
        </member>
        <member name="T:FistCore.Core.ProviderComponents.IInserter">
            <summary>Generates INSERT statements and, if required by implementation, SELECT statements that fetch next ID/sequence.</summary>
        </member>
        <member name="M:FistCore.Core.ProviderComponents.IInserter.RenderInsert(FistCore.Core.InsertStatement,FistCore.Core.DbParameter,FistCore.Core.DbmsType,System.Text.StringBuilder,FistCore.Core.DbParameterCollection)">
            <summary>
            Renders insert statement.
            </summary>
            <param name="insert">INSERT statement that is being rendered.</param>
            <param name="nextSequence">Parameter that contains the next ID/sequence value. <b>null</b> if DBMS doesn't use sequences or table doesn't contains an auto-id field.</param>
            <param name="dbms">Target DBMS.</param>
            <param name="output">StringBuilder to which the SQL code is appended.</param>
            <param name="parameters">SQL parameter collection to which the object's and its children's parameters are added. After the rendering is done the collection contains all parameters with unique names.</param>
            <returns>Parameter that contains the ID of the inserted row. <b>null</b> if auto-generated value is not returned via output parameter.</returns>
        </member>
        <member name="M:FistCore.Core.ProviderComponents.IInserter.Execute(FistCore.Core.InsertStatement,FistCore.Core.DbmsType,FistCore.Core.IConnectionProvider,FistCore.Core.CommandExecutionStatistics@,System.Int32)">
            <summary>Executes the INSERT command. Automatically generates the code that retrieves the new identity for
            the supported databases. DBMS specific code depends on the DBMS property of the used ConnectionProvider.</summary>
            <param name="insert">INSERT statement to execute.</param>
            <param name="dbms">Target DBMS.</param>
            <param name="conn">Connection-transaction context to use.</param>
            <param name="lastExecutedCommandInfo">Output parameter: statistic for executed command.</param>
            <param name="cmdTimeout">Sets timeout for this SQL command insert statment.</param>
            <returns>Automatically generated ID for inserted row, or <b>null</b> if ID is not automatically generated.</returns>
        </member>
        <member name="T:FistCore.Core.InsertStatement">
            <summary>
            Inserts a single row to a table or a view.
            </summary>
            <remarks>If a target table contains an autonumber field then the InsertStatement will try to 
            automatically retrieve the identity assigned to the inserted row.</remarks>
            <example>
            The following example inserts a new row into the Employees row and returns the new auto-identity value.
            <code>
            public int InsertEmployee(string firstName, string lastName)
            {
            	EmployeesMeta employees = new EmployeesMeta();
            	InsertStatement insert = new InsertStatement(employees);
            	insert.AddExpression(employees.FirstName, firstName);
            	insert.AddExpression(employees.LastName, lastName);
            	
            	// Execute method returns the auto-identity value assigned to the inserted row.
            	int employeeId = insert.Execute();
            	return employeeId;
            }
            </code>
            </example>
        </member>
        <member name="M:FistCore.Core.InsertStatement.#ctor(FistCore.Core.IDbTable)">
            <summary>
            Creates a statement that inserts a single row.
            </summary>
            <param name="intoTable">The table that is to receive the data.</param>
        </member>
        <member name="M:FistCore.Core.InsertStatement.AddExpression(FistCore.Core.IDbColumn,System.Object)">
            <summary>
            Adds a column-value pair to the insert list.
            </summary>
            <param name="column">Column. <b>Null</b> is not allowed.</param>
            <param name="value">Value that is inserted in the specified column. May be <b>null</b>.</param>
        </member>
        <member name="M:FistCore.Core.InsertStatement.Render(FistCore.Core.DbmsType,System.Text.StringBuilder,FistCore.Core.DbParameterCollection)">
            <summary>
            Renders INSERT statement.
            Throws exception if the columns/values list is empty.
            </summary>
            <param name="dbms">Target DBMS.</param>
            <param name="output">StringBuilder to which SQL is appended.</param>
            <param name="parameters">SQL parameter collection to which the object's and its children's
            parameters are added. After the rendering is done the collection contains all parameters with unique names.</param>
        </member>
        <member name="M:FistCore.Core.InsertStatement.Execute">
            <summary>
            Executes the INSERT command. Automatically generates the code that retrieves the new identity for 
            the supported databases. DBMS specific code depends on the DBMS property of the used ConnectionProvider.
            </summary>
            <returns>Autoidentity value for the inserted row. -1 if the table doesn't contain an 
            autoidentity field or the DBMS specific code cannot be generated.</returns>
            <remarks>Uses class' <see cref="T:FistCore.Core.IConnectionProvider"/> object.</remarks>
        </member>
        <member name="M:FistCore.Core.InsertStatement.Execute(FistCore.Core.IConnectionProvider)">
            <summary>
            Executes the INSERT command. Automatically generates the code that retrieves the new identity for 
            the supported databases. DBMS specific code depends on the DBMS property of the used ConnectionProvider.
            </summary>
            <param name="conn"><see cref="T:FistCore.Core.IConnectionProvider"/> that will be used.</param>
            <returns>Autoidentity value for the inserted row. -1 if the table doesn't contain an 
            autoidentity field or the DBMS specific code cannot be generated.</returns>
        </member>
        <member name="P:FistCore.Core.InsertStatement.Table">
            <summary>
            Gets the table that is to receive the data.
            </summary>
        </member>
        <member name="P:FistCore.Core.InsertStatement.ExpressionCount">
            <summary>
            Gets the number of insert expressions in the InsertStatement. 
            </summary>
        </member>
        <member name="P:FistCore.Core.InsertStatement.ColumnsAndValues">
            <summary>
            Gets or sets the list of columns in which to insert data and the list of data values to be inserted.
            </summary>
        </member>
        <member name="T:FistCore.Core.EntityState">
            <summary>
            Indicates the state of entity in regard to data-source.
            </summary>
        </member>
        <member name="F:FistCore.Core.EntityState.New">
            <summary>
            Entity contains new data, which is not persisted on the data source.
            <p>The state is changed to <b>Synchronized</b> after the entity has been inserted.
            It may switch to <b>OutOfSync</b> after it has been inserted if some fields have remained un-synchronized.
            Typically, that will happen if auto-incremented value cannot be retrieved after the insert operation.</p>
            </summary>
        </member>
        <member name="F:FistCore.Core.EntityState.Synchronized">
            <summary>
            Entity is synchronized whith the data source. It contains the same data as the respective row in the database.
            <p>An entity is considered to be in sync with the database immediately after fetch, update or
            insert operation has been executed. The state is changed to <b>OutOfSync</b> when the entity data is
            changed or the referenced row is deleted from the database.</p>
            </summary>
        </member>
        <member name="F:FistCore.Core.EntityState.OutOfSync">
            <summary>
            Entity references an existing row in the database, but the values are different.
            <p>An entity is marked as out-of-sync when the values of an entity fetched from the data-source
            have been modified. The state is changed to <b>Synchronized</b> after the update operation has been executed.</p>
            </summary>
        </member>
        <member name="F:FistCore.Core.EntityState.Deleted">
            <summary>
            Indicates that the row referenced by entity has been deleted from the database.
            <p>Executing the update operation on deleted entiy will have no effect, since the row to be updated doesn't exist.</p>
            </summary>
        </member>
        <member name="F:FistCore.Core.EntityState.PendingDeletion">
            <summary>
            Indicates that the row referenced by entity is to be deleted from the database.
            <p>An entity must be manually marked as deletion pending. The state is changed to <b>Deleted</b>
            after it has been deleted.</p>
            </summary>
        </member>
        <member name="M:FistCore.Core.SqlServer.SqlServerInserter.RenderInsert(FistCore.Core.InsertStatement,FistCore.Core.DbParameter,FistCore.Core.DbmsType,System.Text.StringBuilder,FistCore.Core.DbParameterCollection)">
            <summary>
            Renders INSERT statement and code that retrieves the new ID.
            </summary>
            <param name="insert">INSERT statement that is being rendered.</param>
            <param name="nextSequence">Ignored. SQL Server doesn't use sequences.</param>
            <param name="dbms">Target DBMS. Different auto-id retrieval for SQL 7.0 then in newer versions.</param>
            <param name="output">StringBuilder to which the SQL code is appended.</param>
            <param name="parameters">SQL parameter collection to which the object's and its children's
            parameters are added. After the rendering is done the collection contains all parameters with unique names.</param>
            <returns>Parameter that contains the ID of the inserted row. <b>null</b> if auto-id field is not used.</returns>
        </member>
        <member name="M:FistCore.Core.SqlServer.SqlServerInserter.Execute(FistCore.Core.InsertStatement,FistCore.Core.DbmsType,FistCore.Core.IConnectionProvider,FistCore.Core.CommandExecutionStatistics@,System.Int32)">
            <summary>Executes the INSERT command. Automatically generates the code that retrieves the new identity for
            the supported databases. DBMS specific code depends on the DBMS property of the used ConnectionProvider.</summary>
            <param name="insert">INSERT statement to execute.</param>
            <param name="dbms">Target DBMS.</param>
            <param name="conn">Connection-transaction context to use.</param>
            <param name="lastExecutedCommandInfo">Output parameter: statistic for executed command.</param>
            <param name="cmdTimeout">Sets command timeout for SQL command insert statment.</param>
            <returns>Automatically generated ID for inserted row, or <b>null</b> if ID is not automatically generated.</returns>
        </member>
        <member name="T:FistCore.Core.BetweenPredicate">
            <summary>
            Specifies a range to test.
            </summary>
            <remarks>BetweenPredicate cannot be created by using its constructor.
            Use <see cref="T:FistCore.Core.PredicateFactory"/> to create predicates.
            <seealso cref="T:FistCore.Core.SearchCondition"/></remarks>
            <example>
            The following example selects all employees hired between the given begin and end dates.
            <code>
            public DataTable SelectEmployeesHiredInTheGivenInterval(DateTime beginDate, DateTime endDate)
            {
            	EmployeesMeta employees = new EmployeesMeta();
            	SelectStatement select = new SelectStatement(employees);
            	select.Where.Add(PredicateFactory.Between(employees.HireDate, beginDate, endDate));
            	return select.Execute();
            }
            </code>
            </example>
        </member>
        <member name="T:FistCore.Core.PredicateBase">
            <summary>
            Base class for all predicate classes. Provides common logic for the inherited classes.
            </summary>
            <remarks>Predicate is an expression that evaluates to TRUE, FALSE, or UNKNOWN. 
            Predicates are used in the search condition of WHERE and HAVING clauses.
            <seealso cref="T:FistCore.Core.PredicateFactory"/><seealso cref="T:FistCore.Core.SearchCondition"/></remarks>
        </member>
        <member name="M:FistCore.Core.PredicateBase.Render(FistCore.Core.DbmsType,System.Text.StringBuilder,FistCore.Core.DbParameterCollection)">
            <summary>
            Renders predicate as SQL statement.
            </summary>
            <param name="dbms">Target DBMS.</param>
            <param name="output">StringBuilder to which SQL is appended.</param>
            <param name="parameters">SQL parameter collection to which the object's and its children's
            parameters are added. After the rendering is done the collection contains all parameters with unique names.</param>
        </member>
        <member name="M:FistCore.Core.PredicateBase.op_Explicit(FistCore.Core.PredicateBase)~FistCore.Core.SearchCondition">
            <summary>
            Converts a predicate to a search condition.
            </summary>
            <param name="predicate">Predicate.</param>
            <returns>Search condition which contains the given predicate.</returns>
        </member>
        <member name="M:FistCore.Core.PredicateBase.ToSearchCondition(FistCore.Core.PredicateBase)">
            <summary>
            Converts a predicate to a search condition.
            </summary>
            <param name="predicate">Predicate.</param>
            <returns>Search condition which contains the given predicate.</returns>
        </member>
        <member name="P:FistCore.Core.PredicateBase.PredicateItems">
            <summary>
            Gets items required by this predicate.
            </summary>
        </member>
        <member name="P:FistCore.Core.PredicateBase.Negate">
            <summary>
            Gets the value that specifies whether the predicate is negated.
            </summary>
        </member>
        <member name="M:FistCore.Core.BetweenPredicate.#ctor(FistCore.Core.PredicateItem,FistCore.Core.PredicateItem,FistCore.Core.PredicateItem,System.Boolean)">
            <summary>
            Creates a new between predicate.
            </summary>
            <param name="firstItem">First item. Test expression.</param>
            <param name="secondItem">Second item. Begin expression.</param>
            <param name="thirdItem">Third item. End expression.</param>
            <param name="negate">Specifies whether the predicate is negated (NOT BETWEEN).</param>
        </member>
        <member name="M:FistCore.Core.BetweenPredicate.Render(FistCore.Core.DbmsType,System.Text.StringBuilder,FistCore.Core.DbParameterCollection)">
            <summary>
            Renders predicate as SQL statement.
            </summary>
            <param name="dbms">Target DBMS.</param>
            <param name="output">StringBuilder to which SQL is appended.</param>
            <param name="parameters">SQL parameter collection to which the object's and its children's
            parameters are added. After the rendering is done the collection contains all parameters with unique names.</param>
        </member>
        <member name="T:FistCore.Core.ComparePredicate">
            <summary>
            Compares two items.
            </summary>
            <remarks><p>ComparePredicate cannot be created by using its constructor. 
            Use <see cref="T:FistCore.Core.PredicateFactory"/> to create predicates.</p>
            <p>See <see cref="T:FistCore.Core.ComparisonOperator"/> for the list of supported comparison operators.</p>
            <seealso cref="T:FistCore.Core.SearchCondition"/></remarks>
            <example>
            The following example selects all employees who were hired before Janury 1, 2000.
            <code>
            public DataTable SelectEmployeesHiredBefore2000()
            {
            	EmployeesMeta employees = new EmployeesMeta();
            	SelectStatement select = new SelectStatement(employees);
            	select.SelectList.Add(employees.Columns);
            	select.Where.Add(PredicateFactory.Compare(employees.HireDate, "&lt;", new DateTime(2000, 1, 1)));
            	return select.Execute();
            }
            </code>
            </example>
        </member>
        <member name="F:FistCore.Core.ComparePredicate.comparisonOperator">
            <summary>
            Comparison operator. Eg: ">=".
            </summary>
        </member>
        <member name="M:FistCore.Core.ComparePredicate.#ctor(FistCore.Core.PredicateItem,System.String,FistCore.Core.PredicateItem,System.Boolean)">
            <summary>
            Creates a new comparison predicate.
            </summary>
            <param name="lhs">Left hand side item.</param>
            <param name="comparisonOperator"><see cref="T:FistCore.Core.ComparisonOperator"/>. Eg: "&gt;=".</param>
            <param name="rhs">Right hand side item.</param>
            <param name="negate">Specifies whether the predicate is negated (NOT).</param>
        </member>
        <member name="M:FistCore.Core.ComparePredicate.Render(FistCore.Core.DbmsType,System.Text.StringBuilder,FistCore.Core.DbParameterCollection)">
            <summary>
            Renders predicate as SQL statement.
            </summary>
            <param name="dbms">Target DBMS.</param>
            <param name="output">StringBuilder to which SQL is appended.</param>
            <param name="parameters">SQL parameter collection to which the object's and its children's
            parameters are added. After the rendering is done the collection contains all parameters with unique names.</param>
        </member>
        <member name="T:FistCore.Core.ComparisonOperator">
            <summary>
            Defines comparison operators that may be used in a <see cref="T:FistCore.Core.ComparePredicate"/>.
            </summary>
            <remarks><see cref="M:FistCore.Core.PredicateFactory.Compare(FistCore.Core.IDbColumn,System.String,System.Object)"/> method of the <see cref="T:FistCore.Core.PredicateFactory"/> class 
            accepts a string value for the comparison operator parameter. Use the operators enumerated in this class 
            if you are not comfortable with using hard-coded strings in your code.</remarks>
            <example>
            The folowing example demostrates how to use the ComparisonOperator class to create a ComparePredicate.
            <code>
            EmployeesMeta employees = new EmployeesMeta();
            ComparePredicate lessThan10 = PredicateFactory.Compare(employees.EmployeeID, "&lt;", 10);
            
            // This is the same as the above line but uses string constants enumerated in the ComparisonOperator class.
            lessThan10 = PredicateFactory.Compare(employees.EmployeeID, ComparisonOperator.LesserThan, 10);
            </code>
            </example>
        </member>
        <member name="F:FistCore.Core.ComparisonOperator.Equal">
            <summary>
            "=" operator.
            </summary>
        </member>
        <member name="F:FistCore.Core.ComparisonOperator.LessEqual">
            <summary>
            "&lt;=" operator.
            </summary>
        </member>
        <member name="F:FistCore.Core.ComparisonOperator.LesserThan">
            <summary>
            "&lt;" operator.
            </summary>
        </member>
        <member name="F:FistCore.Core.ComparisonOperator.GreaterEqual">
            <summary>
            "&gt;=" operator.
            </summary>
        </member>
        <member name="F:FistCore.Core.ComparisonOperator.GreaterThan">
            <summary>
            "&gt;" operator.
            </summary>
        </member>
        <member name="F:FistCore.Core.ComparisonOperator.NotEqual">
            <summary>
            "&lt;&gt;" operator.
            </summary>
        </member>
        <member name="T:FistCore.Core.ContainsTermType">
            <summary>Enumerates supported term types for <see cref="T:FistCore.Core.ContainsPredicate"/> that specify how a full-text search is to be executed.</summary>
        </member>
        <member name="F:FistCore.Core.ContainsTermType.SimpleTerm">
            <summary>Exact word or phrase.</summary>
        </member>
        <member name="F:FistCore.Core.ContainsTermType.PrefixTerm">
            <summary>Word/phrase prefix. Wildcard is appended to term/pattern.</summary>
        </member>
        <member name="T:FistCore.Core.ContainsPredicate">
            <summary>
            Performs full-text search by using specialized text indexes.
            </summary>
            <remarks>
            <para>ContainsPredicate cannot be created by using its constructor. Use <see cref="T:FistCore.Core.PredicateFactory"/>
            to create predicates.</para>
            <para>Represents a predicate used to search columns containing character-based data types
            for precise or fuzzy (less precise) matches to single words and phrases.</para>
            <para>CONTAINS can search for:
            <list type="bullet">
            <item>One or more specific words and/or phrases (simple term). A word is one or more characters
            without spaces or punctuation. A valid phrase can consist of multiple words with spaces with or
            without punctuation between them. For example, croissant is a word, and café au lait is a phrase.
            Words and phrases such as these are called simple terms.</item>
            <item>A word or a phrase where the words begin with specified text (prefix term). In case of a
            phrase, each word within the phrase is considered to be a prefix. For example, the term auto tran*
            matches automatic transmission and automobile transducer.</item>
            </list></para>
            <para>CONTAINS expression is automatically rendered as a compatibile LIKE predicate if it is disabled
            in the application's *.config file or if the target <see cref="T:FistCore.Core.DbmsType"/> is not supported. Currently,
            SQL Server and Oracle DBMSs are supported. The full-text search can be disabled
            by adding the following setting in the <b>appSettings</b> section of the application's *.config file:
            <code>&lt;add key="FistCore.Core.ContainsPredicate.Enabled" value="false"/&gt;</code></para>
            <para>CONTAINS predicate cannot be used arbitrarily. Requirements:
            <list type="bullet">
            <item>Specialized indexing service, such as <b>Microsoft Full-text Search</b> or <b>Oracle Text</b>.</item>
            <item>Full-text index must be created/enabled for the target column.</item>
            </list>
            </para>
            <seealso cref="T:FistCore.Core.SearchCondition"/>
            </remarks>
            <example>
            The following example selects all products which contain the specified word.
            <code>
            public DataTable SelectProductsWhichContainsTheWord(string word)
            {
            	ProductsMeta products = new ProductsMeta();
            	SelectStatement select = new SelectStatement(products);
            	select.Where.Add(PredicateFactory.Contains(products.ProductName, word));
            	return select.Execute();
            }
            </code>
            </example>
        </member>
        <member name="M:FistCore.Core.ContainsPredicate.Render(FistCore.Core.DbmsType,System.Text.StringBuilder,FistCore.Core.DbParameterCollection)">
            <summary>
            Renders predicate as SQL statement.
            </summary>
            <param name="dbms">Target DBMS.</param>
            <param name="output">StringBuilder to which SQL is appended.</param>
            <param name="parameters">SQL parameter collection to which the object's and its children's
            parameters are added. After the rendering is done the collection contains all parameters with unique names.</param>
        </member>
        <member name="P:FistCore.Core.ContainsPredicate.TermType">
            <summary>Gets term type that specifies specify how a full-text search is to be executed.</summary>
        </member>
        <member name="T:FistCore.Core.ExistsPredicate">
            <summary>
            Specifies a subquery to test for the existence of rows.
            </summary>
            <remarks>ExistsPredicate cannot be created by using its constructor. 
            Use <see cref="T:FistCore.Core.PredicateFactory"/> to create predicates.
            <seealso cref="T:FistCore.Core.SearchCondition"/></remarks>
            <example>	
            The following example deletes all employees that are not referenced in the EmployeeTerritories table.
            <code>
            public void DeleteNonReferencedEmployees()
            {
            	// This is the equivalent SQL code that does the same task.
            
            	//	DELETE FROM Employees
            	//	WHERE NOT EXISTS 
            	//		(SELECT * 
            	//		FROM EmployeeTerritories 
            	//		WHERE (EmployeeTerritories.EmployeeID = Employees.EmployeeID))
            
            	EmployeesMeta employees = new EmployeesMeta();
            	EmployeeTerritoriesMeta empTerritories = new EmployeeTerritoriesMeta();
            
            	// Subquery that returns all referenced employees. The subquery is used by the NOT EXIST predicate.
            	SelectStatement referencedEmployees = new SelectStatement(empTerritories);
            	referencedEmployees.Where.Add(PredicateFactory.Compare(empTerritories.EmployeeID, "=", employees.EmployeeID));
            
            	DeleteStatement delete = new DeleteStatement(employees);
            	// NOT EXISTS predicate is created when the parameter negate of the PredicateFactory.Exists is set to true.
            	delete.Where.Add(PredicateFactory.Exists(referencedEmployees, true));
            	delete.Execute();
            }
            </code>
            </example>
        </member>
        <member name="M:FistCore.Core.ExistsPredicate.#ctor(FistCore.Core.PredicateItem,System.Boolean)">
            <summary>
            Creates a new EXISTS predicate.
            </summary>
            <param name="item">Items/expression.</param>
            <param name="negate">Specifies whether the predicate is negated (NOT EXISTS).</param>
        </member>
        <member name="M:FistCore.Core.ExistsPredicate.Render(FistCore.Core.DbmsType,System.Text.StringBuilder,FistCore.Core.DbParameterCollection)">
            <summary>
            Renders predicate as SQL statement.
            </summary>
            <param name="dbms">Target DBMS.</param>
            <param name="output">StringBuilder to which SQL is appended.</param>
            <param name="parameters">SQL parameter collection to which the object's and its children's
            parameters are added. After the rendering is done the collection contains all parameters with unique names.</param>
        </member>
        <member name="T:FistCore.Core.InPredicate">
            <summary>
            Determines if a given value matches any value in a subquery or a list.
            </summary>
            <remarks>InPredicate cannot be created by using its constructor.
            Use <see cref="T:FistCore.Core.PredicateFactory"/> to create predicates.
            <seealso cref="T:FistCore.Core.SearchCondition"/></remarks>
            <example>
            The following example selects all employees with the given IDs.
            <code>
            public DataTable SelectSpecifiedEmployees(int[] employeeIDs)
            {
            	// IN predicate expects an array of objects.
            	// int[] must be converted to object[]
            	object[] oEmployeeIds = new object[employeeIDs.Length];
            	employeeIDs.CopyTo(oEmployeeIds, 0);
            
            	EmployeesMeta employees = new EmployeesMeta();
            	SelectStatement select = new SelectStatement(employees);
            	select.Where.Add(PredicateFactory.In(employees.EmployeeID, oEmployeeIds));
            	return select.Execute();
            }
            </code>
            </example>
        </member>
        <member name="M:FistCore.Core.InPredicate.#ctor(FistCore.Core.PredicateItem,FistCore.Core.PredicateItem[],System.Boolean)">
            <summary>
            Creates a new IN predicate.
            </summary>
            <param name="firstItem">First item. Test expression.</param>
            <param name="valueItems">Array of expressions (subqueries, values).</param>
            <param name="negate">Specifies whether the predicate is negated (NOT IN).</param>
        </member>
        <member name="M:FistCore.Core.InPredicate.Render(FistCore.Core.DbmsType,System.Text.StringBuilder,FistCore.Core.DbParameterCollection)">
            <summary>
            Renders predicate as SQL statement.
            </summary>
            <param name="dbms">Target DBMS.</param>
            <param name="output">StringBuilder to which SQL is appended.</param>
            <param name="parameters">SQL parameter collection to which the object's and its children's
            parameters are added. After the rendering is done the collection contains all parameters with unique names.</param>
        </member>
        <member name="T:FistCore.Core.IsNullPredicate">
            <summary>
            Determines whether or not a given expression is <b>null</b>.
            </summary>
            <remarks>IsNullPredicate cannot be created by using its constructor. 
            Use <see cref="T:FistCore.Core.PredicateFactory"/> to create predicates.
            <seealso cref="T:FistCore.Core.SearchCondition"/></remarks>
            <example>
            The following example selects all employees who report to no one (ReportsTo field is <b>null</b>).
            <code>
            public DataTable SelectEmployeesWhoReportToNoOne()
            {
            	EmployeesMeta employees = new EmployeesMeta();
            	SelectStatement select = new SelectStatement(employees);
            	select.Where.Add(PredicateFactory.IsNull(employees.ReportsTo));
            	return select.Execute();
            }
            </code>
            </example>
        </member>
        <member name="M:FistCore.Core.IsNullPredicate.#ctor(FistCore.Core.PredicateItem,System.Boolean)">
            <summary>
            Creates a new IS NULL predicate.
            </summary>
            <param name="item">Items/expression.</param>
            <param name="negate">Specifies whether the predicate is negated (IS NOT NULL).</param>
        </member>
        <member name="M:FistCore.Core.IsNullPredicate.Render(FistCore.Core.DbmsType,System.Text.StringBuilder,FistCore.Core.DbParameterCollection)">
            <summary>
            Renders predicate as SQL statement.
            </summary>
            <param name="dbms">Target DBMS.</param>
            <param name="output">StringBuilder to which SQL is appended.</param>
            <param name="parameters">SQL parameter collection to which the object's and its children's
            parameters are added. After the rendering is done the collection contains all parameters with unique names.</param>
        </member>
        <member name="T:FistCore.Core.LikePredicate">
            <summary>
            Determines whether or not a given character string matches a specified pattern.
            </summary>
            <remarks>LikePredicate cannot be created by using its constructor. 
            Use <see cref="T:FistCore.Core.PredicateFactory"/> to create predicates.
            <seealso cref="T:FistCore.Core.SearchCondition"/></remarks>
            <example>
            The following example selects all employees whose last name start with the given letter.
            <code>
            public DataTable SelectEmployeesByLastName(char firstLetter)
            {
            	string pattern = firstLetter + "%";
            
            	EmployeesMeta employees = new EmployeesMeta();
            	SelectStatement select = new SelectStatement(employees);
            	select.Where.Add(PredicateFactory.Like(employees.LastName, pattern));
            	return select.Execute();
            }
            </code>
            </example>
        </member>
        <member name="M:FistCore.Core.LikePredicate.#ctor(FistCore.Core.PredicateItem,FistCore.Core.PredicateItem,System.Boolean)">
            <summary>
            Creates a new LIKE predicate.
            </summary>
            <param name="lhs">Left hand side item.</param>
            <param name="rhs">Right hand side item (pattern).</param>
            <param name="negate">Specifies whether the predicate is negated (NOT LIKE).</param>
        </member>
        <member name="M:FistCore.Core.LikePredicate.Render(FistCore.Core.DbmsType,System.Text.StringBuilder,FistCore.Core.DbParameterCollection)">
            <summary>
            Renders predicate as SQL statement.
            </summary>
            <param name="dbms">Target DBMS.</param>
            <param name="output">StringBuilder to which SQL is appended.</param>
            <param name="parameters">SQL parameter collection to which the object's and its children's
            parameters are added. After the rendering is done the collection contains all parameters with unique names.</param>
        </member>
        <member name="T:FistCore.Core.PredicateFactory">
            <summary>
            Provides static methods that create predicates.
            </summary>
            <remarks>Predicate objects cannot be created by using their constructors. The factory class must be used 
            to create instances of supported predicates.<seealso cref="T:FistCore.Core.PredicateBase"/>
            <seealso cref="T:FistCore.Core.SearchCondition"/></remarks>
        </member>
        <member name="M:FistCore.Core.PredicateFactory.Compare(FistCore.Core.IDbColumn,System.String,System.Object)">
            <summary>
            Creates a <see cref="T:FistCore.Core.ComparePredicate"/>.<seealso cref="T:FistCore.Core.ComparisonOperator"/><seealso cref="T:FistCore.Core.ComparisonOperator"/>
            </summary>
            <param name="field">Database field.</param>
            <param name="comparisonOperator"><see cref="T:FistCore.Core.ComparisonOperator"/>. Eg: "&gt;=".</param>
            <param name="value">Value. <b>Null</b> is not allowed.</param>
            <returns>ComparePredicate.</returns>
            <remarks>Creates a predicate that compares a database field to a .NET value (String, Char[], Boolean, 
            Char, Byte, Int16, Int32, Int64, Single, Double, Decimal, DateTime etc).</remarks>
        </member>
        <member name="M:FistCore.Core.PredicateFactory.Compare(FistCore.Core.IDbColumn,System.String,System.Object,System.Boolean)">
            <summary>
            Creates a <see cref="T:FistCore.Core.ComparePredicate"/>.<seealso cref="T:FistCore.Core.ComparisonOperator"/>
            </summary>
            <param name="field">Database field.</param>
            <param name="comparisonOperator"><see cref="T:FistCore.Core.ComparisonOperator"/>. Eg: "&gt;=".</param>
            <param name="value">Value. <b>Null</b> is not allowed.</param>
            <param name="negate">Specifies whether the predicate is negated (NOT).</param>
            <returns>ComparePredicate.</returns>
            <remarks>Creates a predicate that compares a database field to a .NET value (String, Char[], Boolean, 
            Char, Byte, Int16, Int32, Int64, Single, Double, Decimal, DateTime etc).</remarks>
        </member>
        <member name="M:FistCore.Core.PredicateFactory.Compare(FistCore.Core.IDbColumn,System.String,FistCore.Core.IDbColumn)">
            <summary>
            Creates a <see cref="T:FistCore.Core.ComparePredicate"/>.<seealso cref="T:FistCore.Core.ComparisonOperator"/>
            </summary>
            <param name="leftColumn">Left hand side database field.</param>
            <param name="comparisonOperator"><see cref="T:FistCore.Core.ComparisonOperator"/>. Eg: "&gt;=".</param>
            <param name="rightColumn">Right hand side database field.</param>
            <returns>ComparePredicate.</returns>
            <remarks>Creates a predicate that compares two database fields.</remarks>
        </member>
        <member name="M:FistCore.Core.PredicateFactory.Compare(FistCore.Core.IDbColumn,System.String,FistCore.Core.IDbColumn,System.Boolean)">
            <summary>
            Creates a <see cref="T:FistCore.Core.ComparePredicate"/>.<seealso cref="T:FistCore.Core.ComparisonOperator"/>
            </summary>
            <param name="leftColumn">Left hand side database field.</param>
            <param name="comparisonOperator"><see cref="T:FistCore.Core.ComparisonOperator"/>. Eg: "&gt;=".</param>
            <param name="rightColumn">Right hand side database field.</param>
            <param name="negate">Specifies whether the predicate is negated (NOT).</param>
            <returns>ComparePredicate.</returns>
            <remarks>Creates a predicate that compares two database fields.</remarks>
        </member>
        <member name="M:FistCore.Core.PredicateFactory.Compare(FistCore.Core.IDbColumn,System.String,FistCore.Core.SelectStatement)">
            <summary>
            Creates a <see cref="T:FistCore.Core.ComparePredicate"/>.<seealso cref="T:FistCore.Core.ComparisonOperator"/>
            </summary>
            <param name="field">Database field.</param>
            <param name="comparisonOperator"><see cref="T:FistCore.Core.ComparisonOperator"/>. Eg: "&gt;=".</param>
            <param name="subQuery"><see cref="T:FistCore.Core.SelectStatement"/> that returns a single value.</param>
            <returns>ComparePredicate.</returns>
            <remarks>Creates a predicate that compares a field to a value retrieved by subquery.</remarks>
        </member>
        <member name="M:FistCore.Core.PredicateFactory.Compare(FistCore.Core.IDbColumn,System.String,FistCore.Core.SelectStatement,System.Boolean)">
            <summary>
            Creates a <see cref="T:FistCore.Core.ComparePredicate"/>.<seealso cref="T:FistCore.Core.ComparisonOperator"/>
            </summary>
            <param name="field">Database field.</param>
            <param name="comparisonOperator"><see cref="T:FistCore.Core.ComparisonOperator"/>. Eg: "&gt;=".</param>
            <param name="subQuery"><see cref="T:FistCore.Core.SelectStatement"/> that returns a single value.</param>
            <param name="negate">Specifies whether the predicate is negated (NOT).</param>
            <returns>ComparePredicate.</returns>
            <remarks>Creates a predicate that compares a field to a value retrieved by subquery.</remarks>
        </member>
        <member name="M:FistCore.Core.PredicateFactory.Compare(FistCore.Core.IDbColumn,System.String,FistCore.Core.Function)">
            <summary>
            Creates a <see cref="T:FistCore.Core.ComparePredicate"/>.<seealso cref="T:FistCore.Core.ComparisonOperator"/>
            </summary>
            <param name="field">Database field.</param>
            <param name="comparisonOperator"><see cref="T:FistCore.Core.ComparisonOperator"/>. Eg: "&gt;=".</param>
            <param name="function">Function.</param>
            <returns>ComparePredicate.</returns>
            <remarks>Creates a predicate that compares a field to a value computed by function 
            (see <see cref="T:FistCore.Core.AggregateFunction"/>, <see cref="T:FistCore.Core.Function"/>).</remarks>
        </member>
        <member name="M:FistCore.Core.PredicateFactory.Compare(FistCore.Core.IDbColumn,System.String,FistCore.Core.Function,System.Boolean)">
            <summary>
            Creates a <see cref="T:FistCore.Core.ComparePredicate"/>.<seealso cref="T:FistCore.Core.ComparisonOperator"/>
            </summary>
            <param name="field">Database field.</param>
            <param name="comparisonOperator"><see cref="T:FistCore.Core.ComparisonOperator"/>. Eg: "&gt;=".</param>
            <param name="function">Function.</param>
            <param name="negate">Specifies whether the predicate is negated (NOT).</param>
            <returns>ComparePredicate.</returns>
            <remarks>Creates a predicate that compares a field to a value computed by function 
            (see <see cref="T:FistCore.Core.AggregateFunction"/>, <see cref="T:FistCore.Core.Function"/>).</remarks>
        </member>
        <member name="M:FistCore.Core.PredicateFactory.Compare(FistCore.Core.SelectStatement,System.String,System.Object)">
            <summary>
            Creates a <see cref="T:FistCore.Core.ComparePredicate"/>.<seealso cref="T:FistCore.Core.ComparisonOperator"/>
            </summary>
            <param name="subQuery"><see cref="T:FistCore.Core.SelectStatement"/> that returns a single value.</param>
            <param name="comparisonOperator"><see cref="T:FistCore.Core.ComparisonOperator"/>. Eg: "&gt;=".</param>
            <param name="value">Value. <b>Null</b> is not allowed.</param>
            <returns>ComparePredicate.</returns>
            <remarks>Creates a predicate that compares the value retrieved by subquery to a .NET value.
            String, Char[], Boolean, Char, Byte, Int16, Int32, Int64, Single, Double, Decimal, DateTime etc.</remarks>
        </member>
        <member name="M:FistCore.Core.PredicateFactory.Compare(FistCore.Core.SelectStatement,System.String,System.Object,System.Boolean)">
            <summary>
            Creates a <see cref="T:FistCore.Core.ComparePredicate"/>.<seealso cref="T:FistCore.Core.ComparisonOperator"/>
            </summary>
            <param name="subQuery"><see cref="T:FistCore.Core.SelectStatement"/> that returns a single value.</param>
            <param name="comparisonOperator"><see cref="T:FistCore.Core.ComparisonOperator"/>. Eg: "&gt;=".</param>
            <param name="value">Value. <b>Null</b> is not allowed.</param>
            <param name="negate">Specifies whether the predicate is negated (NOT).</param>
            <returns>ComparePredicate.</returns>
            <remarks>Creates a predicate that compares the value retrieved by subquery to a .NET value.
            String, Char[], Boolean, Char, Byte, Int16, Int32, Int64, Single, Double, Decimal, DateTime etc.</remarks>
        </member>
        <member name="M:FistCore.Core.PredicateFactory.Compare(FistCore.Core.SelectStatement,System.String,FistCore.Core.SelectStatement)">
            <summary>
            Creates a <see cref="T:FistCore.Core.ComparePredicate"/>.<seealso cref="T:FistCore.Core.ComparisonOperator"/>
            </summary>
            <param name="leftQuery">Left hand side <see cref="T:FistCore.Core.SelectStatement"/> that returns a single value.</param>
            <param name="comparisonOperator"><see cref="T:FistCore.Core.ComparisonOperator"/>. Eg: "&gt;=".</param>
            <param name="rightQuery">Right hand side <see cref="T:FistCore.Core.SelectStatement"/> that returns a single value.</param>
            <returns>ComparePredicate.</returns>
            <remarks>Creates a predicate that compares the value retrieved by one query to a value retrieved by another query.</remarks>
        </member>
        <member name="M:FistCore.Core.PredicateFactory.Compare(FistCore.Core.SelectStatement,System.String,FistCore.Core.SelectStatement,System.Boolean)">
            <summary>
            Creates a <see cref="T:FistCore.Core.ComparePredicate"/>.<seealso cref="T:FistCore.Core.ComparisonOperator"/>
            </summary>
            <param name="leftQuery">Left hand side <see cref="T:FistCore.Core.SelectStatement"/> that returns a single value.</param>
            <param name="comparisonOperator"><see cref="T:FistCore.Core.ComparisonOperator"/>. Eg: "&gt;=".</param>
            <param name="rightQuery">Right hand side <see cref="T:FistCore.Core.SelectStatement"/> that returns a single value.</param>
            <param name="negate">Specifies whether the predicate is negated (NOT).</param>
            <returns>ComparePredicate.</returns>
            <remarks>Creates a predicate that compares the value retrieved by one query to a value retrieved by another query.</remarks>
        </member>
        <member name="M:FistCore.Core.PredicateFactory.Compare(FistCore.Core.SelectStatement,System.String,FistCore.Core.Function)">
            <summary>
            Creates a <see cref="T:FistCore.Core.ComparePredicate"/>.<seealso cref="T:FistCore.Core.ComparisonOperator"/>
            </summary>
            <param name="subQuery"><see cref="T:FistCore.Core.SelectStatement"/> that returns a single value.</param>
            <param name="comparisonOperator"><see cref="T:FistCore.Core.ComparisonOperator"/>. Eg: "&gt;=".</param>
            <param name="function">Function.</param>
            <returns>ComparePredicate.</returns>
            <remarks>Creates a predicate that compares the value retrieved by the query to a value computed by the 
            function (see <see cref="T:FistCore.Core.AggregateFunction"/>, <see cref="T:FistCore.Core.Function"/>).</remarks>
        </member>
        <member name="M:FistCore.Core.PredicateFactory.Compare(FistCore.Core.SelectStatement,System.String,FistCore.Core.Function,System.Boolean)">
            <summary>
            Creates a <see cref="T:FistCore.Core.ComparePredicate"/>.<seealso cref="T:FistCore.Core.ComparisonOperator"/>
            </summary>
            <param name="subQuery"><see cref="T:FistCore.Core.SelectStatement"/> that returns a single value.</param>
            <param name="comparisonOperator"><see cref="T:FistCore.Core.ComparisonOperator"/>. Eg: "&gt;=".</param>
            <param name="function">Function.</param>
            <param name="negate">Specifies whether the predicate is negated (NOT).</param>
            <returns>ComparePredicate.</returns>
            <remarks>Creates a predicate that compares the value retrieved by the query to a value computed by the 
            function (see <see cref="T:FistCore.Core.AggregateFunction"/>, <see cref="T:FistCore.Core.Function"/>).</remarks>
        </member>
        <member name="M:FistCore.Core.PredicateFactory.Compare(FistCore.Core.Function,System.String,System.Object)">
            <summary>
            Creates a <see cref="T:FistCore.Core.ComparePredicate"/>.<seealso cref="T:FistCore.Core.ComparisonOperator"/>
            </summary>
            <param name="function">Function.</param>
            <param name="comparisonOperator"><see cref="T:FistCore.Core.ComparisonOperator"/>. Eg: "&gt;=".</param>
            <param name="value">Value. <b>Null</b> is not allowed.</param>
            <returns>ComparePredicate.</returns>
            <remarks>Creates a predicate that compares the value computed by a function 
            (see <see cref="T:FistCore.Core.AggregateFunction"/>, <see cref="T:FistCore.Core.Function"/>) to a .NET value.
            String, Char[], Boolean, Char, Byte, Int16, Int32, Int64, Single, Double, Decimal, DateTime etc.</remarks>
        </member>
        <member name="M:FistCore.Core.PredicateFactory.Compare(FistCore.Core.Function,System.String,System.Object,System.Boolean)">
            <summary>
            Creates a <see cref="T:FistCore.Core.ComparePredicate"/>.<seealso cref="T:FistCore.Core.ComparisonOperator"/>
            </summary>
            <param name="function">Function.</param>
            <param name="comparisonOperator"><see cref="T:FistCore.Core.ComparisonOperator"/>. Eg: "&gt;=".</param>
            <param name="value">Value. <b>Null</b> is not allowed.</param>
            <param name="negate">Specifies whether the predicate is negated (NOT).</param>
            <returns>ComparePredicate.</returns>
            <remarks>Creates a predicate that compares the value computed by a function 
            (see <see cref="T:FistCore.Core.AggregateFunction"/>, <see cref="T:FistCore.Core.Function"/>) to a .NET value.
            String, Char[], Boolean, Char, Byte, Int16, Int32, Int64, Single, Double, Decimal, DateTime etc.</remarks>
        </member>
        <member name="M:FistCore.Core.PredicateFactory.Like(FistCore.Core.IDbColumn,System.String)">
            <summary>
            Creates a <see cref="T:FistCore.Core.LikePredicate"/>.
            </summary>
            <param name="field">Database field.</param>
            <param name="pattern">Pattern. <b>Null</b> is not allowed.</param>
            <returns>LikePredicate.</returns>
        </member>
        <member name="M:FistCore.Core.PredicateFactory.Like(FistCore.Core.IDbColumn,System.String,System.Boolean)">
            <summary>
            Creates a <see cref="T:FistCore.Core.LikePredicate"/>.
            </summary>
            <param name="field">Database field.</param>
            <param name="pattern">Pattern. <b>Null</b> is not allowed.</param>
            <param name="negate">Specifies whether the predicate is negated (NOT LIKE).</param>
            <returns>LikePredicate.</returns>
        </member>
        <member name="M:FistCore.Core.PredicateFactory.IsNull(FistCore.Core.IDbColumn)">
            <summary>
            Creates an <see cref="T:FistCore.Core.IsNullPredicate"/>.
            </summary>
            <param name="field">Database field.</param>
            <returns>IsNullPredicate.</returns>
            <remarks>Creates a predicate that checks whether a database field contains a <b>null</b> value.</remarks>
        </member>
        <member name="M:FistCore.Core.PredicateFactory.IsNull(FistCore.Core.IDbColumn,System.Boolean)">
            <summary>
            Creates an <see cref="T:FistCore.Core.IsNullPredicate"/>.
            </summary>
            <param name="field">Database field.</param>
            <param name="negate">Specifies whether the predicate is negated (IS NOT NUL).</param>
            <returns>IsNullPredicate.</returns>
            <remarks>Creates a predicate that checks whether a database field contains a <b>null</b> value.</remarks>
        </member>
        <member name="M:FistCore.Core.PredicateFactory.IsNull(FistCore.Core.SelectStatement)">
            <summary>
            Creates an <see cref="T:FistCore.Core.IsNullPredicate"/>.
            </summary>
            <param name="subQuery"><see cref="T:FistCore.Core.SelectStatement"/> that returns a single value.</param>
            <returns>IsNullPredicate.</returns>
            <remarks>Creates a predicate that checks whether the value retrieved the by the query is <b>null</b>.</remarks>
        </member>
        <member name="M:FistCore.Core.PredicateFactory.IsNull(FistCore.Core.SelectStatement,System.Boolean)">
            <summary>
            Creates an <see cref="T:FistCore.Core.IsNullPredicate"/>.
            </summary>
            <param name="subQuery"><see cref="T:FistCore.Core.SelectStatement"/> that returns a single value.</param>
            <param name="negate">Specifies whether the predicate is negated (IS NOT NUL).</param>
            <returns>IsNullPredicate.</returns>
            <remarks>Creates a predicate that checks whether the value retrieved the by the query is <b>null</b>.</remarks>
        </member>
        <member name="M:FistCore.Core.PredicateFactory.IsNull(FistCore.Core.Function)">
            <summary>
            Creates an <see cref="T:FistCore.Core.IsNullPredicate"/>.
            </summary>
            <param name="function">Function.</param>
            <returns>IsNullPredicate.</returns>
            <remarks>Creates a predicate that checks whether the value returned the by the function is <b>null</b>.</remarks>
        </member>
        <member name="M:FistCore.Core.PredicateFactory.IsNull(FistCore.Core.Function,System.Boolean)">
            <summary>
            Creates an <see cref="T:FistCore.Core.IsNullPredicate"/>.
            </summary>
            <param name="function">Function.</param>
            <param name="negate">Specifies whether the predicate is negated (IS NOT NUL).</param>
            <returns>IsNullPredicate.</returns>
            <remarks>Creates a predicate that checks whether the value returned the by the function is <b>null</b>.</remarks>
        </member>
        <member name="M:FistCore.Core.PredicateFactory.Between(FistCore.Core.IDbColumn,System.Object,System.Object)">
            <summary>
            Creates a <see cref="T:FistCore.Core.BetweenPredicate"/>.
            </summary>
            <param name="field">Database field.</param>
            <param name="beginValue">Begin value. <b>Null</b> is not allowed.</param>
            <param name="endValue">End value. <b>Null</b> is not allowed.</param>
            <returns>BetweenPredicate.</returns>
        </member>
        <member name="M:FistCore.Core.PredicateFactory.Between(FistCore.Core.IDbColumn,System.Object,System.Object,System.Boolean)">
            <summary>
            Creates a <see cref="T:FistCore.Core.BetweenPredicate"/>.
            </summary>
            <param name="field">Database field.</param>
            <param name="beginValue">Begin value. <b>Null</b> is not allowed.</param>
            <param name="endValue">End value. <b>Null</b> is not allowed.</param>
            <param name="negate">Specifies whether the predicate is negated (NOT BETWEEN).</param>
            <returns>BetweenPredicate.</returns>
        </member>
        <member name="M:FistCore.Core.PredicateFactory.In(FistCore.Core.IDbColumn,System.Object[])">
            <summary>
            Creates an <see cref="T:FistCore.Core.InPredicate"/>.
            </summary>
            <param name="field">Database field.</param>
            <param name="values">List of values.</param>
            <returns>InPredicate.</returns>
            <remarks>Creates an IN predicate that determines if a field matches any value in a list.</remarks>
        </member>
        <member name="M:FistCore.Core.PredicateFactory.In(FistCore.Core.IDbColumn,System.Array)">
            <summary>
            Creates an <see cref="T:FistCore.Core.InPredicate"/>.
            </summary>
            <param name="field">Database field.</param>
            <param name="values">List of values.</param>
            <returns>InPredicate.</returns>
            <remarks>Creates an IN predicate that determines if a field matches any value in a list.</remarks>
        </member>
        <member name="M:FistCore.Core.PredicateFactory.In(FistCore.Core.IDbColumn,System.Object[],System.Boolean)">
            <summary>
            Creates an <see cref="T:FistCore.Core.InPredicate"/>.
            </summary>
            <param name="field">Database field.</param>
            <param name="values">List of values.</param>
            <param name="negate">Specifies whether the predicate is negated (NOT IN).</param>
            <returns>InPredicate.</returns>
            <remarks>Creates an IN predicate that determines if a field matches any value in a list.</remarks>
        </member>
        <member name="M:FistCore.Core.PredicateFactory.In(FistCore.Core.IDbColumn,System.Array,System.Boolean)">
            <summary>
            Creates an <see cref="T:FistCore.Core.InPredicate"/>.
            </summary>
            <param name="field">Database field.</param>
            <param name="values">List of values.</param>
            <param name="negate">Specifies whether the predicate is negated (NOT IN).</param>
            <returns>InPredicate.</returns>
            <remarks>Creates an IN predicate that determines if a field matches any value in a list.</remarks>
        </member>
        <member name="M:FistCore.Core.PredicateFactory.In(FistCore.Core.IDbColumn,FistCore.Core.SelectStatement)">
            <summary>
            Creates an <see cref="T:FistCore.Core.InPredicate"/>.
            </summary>
            <param name="field">Database field.</param>
            <param name="subQuery"><see cref="T:FistCore.Core.SelectStatement"/> that selects values from a single column.</param>
            <returns>InPredicate.</returns>
            <remarks>Creates an IN predicate that determines if a field matches any value in a subquery.</remarks>
        </member>
        <member name="M:FistCore.Core.PredicateFactory.In(FistCore.Core.IDbColumn,FistCore.Core.SelectStatement,System.Boolean)">
            <summary>
            Creates an <see cref="T:FistCore.Core.InPredicate"/>.
            </summary>
            <param name="field">Database field.</param>
            <param name="subQuery"><see cref="T:FistCore.Core.SelectStatement"/> that selects values from a single column.</param>
            <param name="negate">Specifies whether the predicate is negated (NOT IN).</param>
            <returns>InPredicate.</returns>
            <remarks>Creates an IN predicate that determines if a field matches any value in a subquery.</remarks>
        </member>
        <member name="M:FistCore.Core.PredicateFactory.Exists(FistCore.Core.SelectStatement)">
            <summary>
            Creates an <see cref="T:FistCore.Core.ExistsPredicate"/> that checks if a given query returns any rows.
            </summary>
            <param name="subQuery"><see cref="T:FistCore.Core.SelectStatement"/>.</param>
            <returns>ExistsPredicate.</returns>
        </member>
        <member name="M:FistCore.Core.PredicateFactory.Exists(FistCore.Core.SelectStatement,System.Boolean)">
            <summary>
            Creates an <see cref="T:FistCore.Core.ExistsPredicate"/> that checks if a given query returns any rows.
            </summary>
            <param name="subQuery"><see cref="T:FistCore.Core.SelectStatement"/>.</param>
            <param name="negate">Specifies whether the predicate is negated (NOT EXISTS).</param>
            <returns>ExistsPredicate.</returns>
        </member>
        <member name="M:FistCore.Core.PredicateFactory.Contains(FistCore.Core.IDbColumn,System.String)">
            <summary>
            Performs full-text search which returns all records which contain the provided word or exact phrase.
            </summary>
            <param name="field">Textual database field for which full-text index has been created.</param>
            <param name="wordOrPhrase">One or more words with spaces between each word.</param>
            <returns>CONTAINS expression or a compatibile LIKE predicate if CONTAINS is not enabled or supported by target DBMS.</returns>
            <remarks>The provided phrase should only contain letters, digits, undescores and space characters.
            All other characters are treated as delimiters and converted to a space character.</remarks>
        </member>
        <member name="M:FistCore.Core.PredicateFactory.Contains(FistCore.Core.IDbColumn,System.String,System.Boolean)">
            <summary>
            Performs full-text search which returns all records which contain the provided word or exact phrase.
            </summary>
            <param name="field">Textual database field for which full-text index has been created.</param>
            <param name="wordOrPhrase">One or more words with spaces between each word.</param>
            <param name="negate">Specifies whether the predicate is negated (NOT CONTAINS).</param>
            <returns>CONTAINS expression or a compatibile LIKE predicate if CONTAINS is not enabled or supported by target DBMS.</returns>
            <remarks>The provided phrase should only contain letters, digits, undescores and space characters.
            All other characters are treated as delimiters and converted to a space character.</remarks>
        </member>
        <member name="M:FistCore.Core.PredicateFactory.ContainsPrefix(FistCore.Core.IDbColumn,System.String)">
            <summary>
            Performs full-text search which returns all records which contain the provided word prefix(es).
            </summary>
            <param name="field">Textual database field for which full-text index has been created.</param>
            <param name="prefix">One or more words with spaces between each word.</param>
            <returns>CONTAINS expression or a compatibile LIKE predicate if CONTAINS is not enabled or supported by target DBMS.</returns>
            <remarks>The provided value should only contain letters, digits, undescores and space characters.
            All other characters are treated as delimiters and converted to a space character.</remarks>
        </member>
        <member name="M:FistCore.Core.PredicateFactory.ContainsPrefix(FistCore.Core.IDbColumn,System.String,System.Boolean)">
            <summary>
            Performs full-text search which returns all records which contain the provided word prefix(es).
            </summary>
            <param name="field">Textual database field for which full-text index has been created.</param>
            <param name="prefix">One or more words with spaces between each word.</param>
            <param name="negate">Specifies whether the predicate is negated (NOT CONTAINS).</param>
            <returns>CONTAINS expression or a compatibile LIKE predicate if CONTAINS is not enabled or supported by target DBMS.</returns>
            <remarks>The provided value should only contain letters, digits, undescores and space characters.
            All other characters are treated as delimiters and converted to a space character.</remarks>
        </member>
        <member name="T:FistCore.Core.PredicateItem">
            <summary>
            Part of a predicate. Used internally by predicate classes.
            </summary>
        </member>
        <member name="T:FistCore.Core.ISqlItem">
            <summary>SQL item. Item that is used in predicates, functions, update lists, insert lists and select lists.</summary>
        </member>
        <member name="P:FistCore.Core.ISqlItem.Item">
            <summary>Gets contained item.</summary>
        </member>
        <member name="P:FistCore.Core.ISqlItem.ItemType">
            <summary>Gets item type.</summary>
        </member>
        <member name="P:FistCore.Core.ISqlItem.DbType">
            <summary>Gets the SQL data type. DbType.Object if unknown.</summary>
        </member>
        <member name="P:FistCore.Core.ISqlItem.DataType">
            <summary>Gets .NET type. Object if unknown.</summary>
        </member>
        <member name="P:FistCore.Core.ISqlItem.Alias">
            <summary>Gets the item's alias/name. May be <b>null</b>.</summary>
        </member>
        <member name="F:FistCore.Core.PredicateItem.item">
            <summary>
            Item: field, subquery, function or free text.
            </summary>
        </member>
        <member name="F:FistCore.Core.PredicateItem.itemType">
            <summary>
            Item type.
            </summary>
        </member>
        <member name="F:FistCore.Core.PredicateItem.dbType">
            <summary>
            SQL data type.
            </summary>
        </member>
        <member name="F:FistCore.Core.PredicateItem.dataType">
            <summary>
            .NET type of data stored in the column.
            </summary>
        </member>
        <member name="F:FistCore.Core.PredicateItem.alias">
            <summary>
            Alias or name. May be <b>null</b>.
            </summary>
        </member>
        <member name="M:FistCore.Core.PredicateItem.#ctor(System.Object,FistCore.Core.SqlItemType)">
            <summary>
            Creates a new predicate item.
            </summary>
            <param name="item">Item.</param>
            <param name="itemType">Item type.</param>
        </member>
        <member name="M:FistCore.Core.PredicateItem.#ctor(FistCore.Core.IDbColumn)">
            <summary>
            Creates a new item from the given column.
            </summary>
        </member>
        <member name="M:FistCore.Core.PredicateItem.#ctor(System.String)">
            <summary>
            Creates a new item from the given text expression.
            </summary>
        </member>
        <member name="M:FistCore.Core.PredicateItem.#ctor(FistCore.Core.Function)">
            <summary>
            Creates a new item from the given function.
            </summary>
        </member>
        <member name="M:FistCore.Core.PredicateItem.#ctor(System.Object,System.Data.DbType,System.Int32,System.String)">
            <summary>
            Creates a new parameter and an item which holds it.
            </summary>
            <param name="parameterValue">Value.</param>
            <param name="parameterType">SQL parameter type.</param>
            <param name="size">Size of the parameter. Required only for variable length types.</param>
            <param name="parameterNamePrefix">Parameter name prefix (eg. "par"). A unique parameter ID will
            be automatically appended to the prefix during the rendering phase if required.</param>
        </member>
        <member name="M:FistCore.Core.PredicateItem.#ctor(FistCore.Core.SelectStatement)">
            <summary>
            Creates a new item from the given query.
            </summary>
        </member>
        <member name="M:FistCore.Core.PredicateItem.Render(FistCore.Core.DbmsType,System.Text.StringBuilder,FistCore.Core.DbParameterCollection)">
            <summary>
            Renders predicate item as SQL statement.
            </summary>
            <param name="dbms">Target DBMS.</param>
            <param name="output">StringBuilder to which SQL is appended.</param>
            <param name="parameters">SQL parameter collection to which the object's and its children's
            parameters are added. After the rendering is done the collection contains all parameters with unique names.</param>
        </member>
        <member name="P:FistCore.Core.PredicateItem.Item">
            <summary>
            Gets contained item.
            </summary>
        </member>
        <member name="P:FistCore.Core.PredicateItem.ItemType">
            <summary>
            Gets item type.
            </summary>
        </member>
        <member name="P:FistCore.Core.PredicateItem.DbType">
            <summary>
            Gets the SQL data type. DbType.Object if unknown.
            </summary>
        </member>
        <member name="P:FistCore.Core.PredicateItem.DataType">
            <summary>
            Gets .NET type. Object if unknown.
            </summary>
        </member>
        <member name="P:FistCore.Core.PredicateItem.Alias">
            <summary>
            Gets the item's alias/name. May be <b>null</b>.
            </summary>
        </member>
        <member name="T:FistCore.Core.ConditionOperator">
            <summary>
            Represents AND and OR operators that link the items in the SearchCondition.
            </summary>
        </member>
        <member name="F:FistCore.Core.ConditionOperator.And">
            <summary>AND operator.</summary>
        </member>
        <member name="F:FistCore.Core.ConditionOperator.Or">
            <summary>OR operator.</summary>
        </member>
        <member name="F:FistCore.Core.ConditionOperator.op">
            <summary>Operator. 'AND' or 'OR'.</summary>
        </member>
        <member name="M:FistCore.Core.ConditionOperator.#ctor(System.String)">
            <summary>Initilizes operator.</summary>
            <param name="op">Operator. 'AND' or 'OR'.</param>
        </member>
        <member name="M:FistCore.Core.ConditionOperator.Render(FistCore.Core.DbmsType,System.Text.StringBuilder,FistCore.Core.DbParameterCollection)">
            <summary>
            Renders operator as SQL statement. Space is appended before and after AND/OR operator.
            </summary>
            <param name="dbms">Target DBMS.</param>
            <param name="output">StringBuilder to which SQL is appended.</param>
            <param name="parameters">SQL parameter collection to which the object's and its children's
            parameters are added. After the rendering is done the collection contains all parameters with unique names.</param>
        </member>
        <member name="T:FistCore.Core.SearchCondition">
            <summary>
            A search condition specifies the characteristics of rows to be affected by a query or rule. 
            It consists of one or more boolean conditions (predicates) which evaluate to TRUE, FALSE, or UNKNOWN.
            </summary>
            <remarks><para>Specifies the conditions for the rows returned in the result set for a SELECT statement, 
            query expression, or subquery. For an UPDATE statement, specifies the rows to be updated. 
            For a DELETE statement, specifies the rows to be deleted.</para>
            <para>Search condition is a combination of one or more predicates linked by the logical operators "AND" and "OR".</para>
            </remarks>
            <example>
            The following example fetches employees from the given city, but only those who were hired after 
            the specified date or those whose hire date hasn't been entered.
            <code>
            public DataTable FetchEmployeesByCityAndHireDate(string cityName, DateTime hireDate)
            {
            	//	SELECT Employees.*
            	//	FROM Employees
            	//	WHERE
            	//		-- Employees from the given city.
            	//		City = @cityName
            	//		AND 
            	//		(
            	//			-- Hired after the given date or hire date not entered.
            	//			HireDate IS NULL
            	//			OR
            	//			HireDate > @hireDate
            	//		)
            	
            	EmployeesMeta employees = new EmployeesMeta();
            	SelectStatement select = new SelectStatement(employees);
            	select.SelectList.Add(employees.Columns);
            
            	// City = @cityName
            	select.Where.Add(PredicateFactory.Compare(employees.City, "=", cityName));
            	
            	// HireDate IS NULL  OR  HireDate > @hireDate
            	SearchCondition hiredAfterOrUnknown = new SearchCondition(PredicateFactory.IsNull(employees.HireDate));
            	hiredAfterOrUnknown.Or(PredicateFactory.Compare(employees.HireDate, ">", hireDate));
            	
            	select.Where.And(hiredAfterOrUnknown);
            	
            	return select.Execute();
            }
            </code>
            <b>Note:</b> the <c>hiredAfterOrUnknown</c> sub-condition is created to ensure that the OR expression
            is rendered inside parenthesis.
            </example>
        </member>
        <member name="F:FistCore.Core.SearchCondition.predicateExpression">
            <summary>
            Contains a combination of predicates, condition operators and sub conditions.
            A condition operator (AND/OR) is placed between to predicates/sub conditions.
            All elements of the list implement IRenderSql interface.	
            Only PredicateBase or ConditionOpearator objects are in the list.
            </summary>
        </member>
        <member name="M:FistCore.Core.SearchCondition.#ctor">
            <summary>
            Initializes a new instance of the SearchCondition class.
            </summary>
        </member>
        <member name="M:FistCore.Core.SearchCondition.#ctor(FistCore.Core.PredicateBase)">
            <summary>
            Initializes a new instance of the SearchCondition class.
            </summary>
            <param name="firstPredicate">First/initial predicate added to the search condition.</param>
        </member>
        <member name="M:FistCore.Core.SearchCondition.#ctor(FistCore.Core.IDbColumn,System.Object)">
            <summary>
            Initializes a new instance of the SearchCondition class.
            </summary>
            <param name="field">Database field which is compared to the provided value.</param>
            <param name="value">Value to which the field is compared. Nullable.</param>
        </member>
        <member name="M:FistCore.Core.SearchCondition.Add(FistCore.Core.PredicateBase)">
            <summary>
            Adds a boolean condition to the SearchCondition. 
            If the SearchCondition is not empty then the expression is added with an "AND" operator.
            Essentially, same as <see cref="M:FistCore.Core.SearchCondition.And(FistCore.Core.PredicateBase)"/>.
            </summary>
            <param name="predicate">Predicate to be added to the SearchCondition. <b>Null</b> is not allowed.</param>
        </member>
        <member name="M:FistCore.Core.SearchCondition.Add(FistCore.Core.IDbColumn,System.Object)">
            <summary>
            Adds a <see cref="T:FistCore.Core.ComparePredicate"/> or <see cref="T:FistCore.Core.IsNullPredicate"/> to the SearchCondition 
            with an "AND" operator.	If the SearchCondition is empty the "AND" operator is not added. 
            Essentially, same as <see cref="M:FistCore.Core.SearchCondition.And(FistCore.Core.IDbColumn,System.Object)"/>.
            </summary>
            <param name="field">Database field.</param>
            <param name="value">Value to which the field is compared. Nullable.</param>
        </member>
        <member name="M:FistCore.Core.SearchCondition.Add(FistCore.Core.SearchCondition)">
            <summary>
            Adds a boolean condition to the SearchCondition. 
            If the SearchCondition is not empty then the expression is added with an "AND" operator.
            Essentially, same as <see cref="M:FistCore.Core.SearchCondition.And(FistCore.Core.SearchCondition)"/>.
            </summary>
            <param name="subCondition">Sub-condition to be added to the SearchCondition. 
            <b>Null</b> and empty search conditions are not allowed.</param>
        </member>
        <member name="M:FistCore.Core.SearchCondition.And(FistCore.Core.PredicateBase)">
            <summary>
            Adds a boolean condition to the SearchCondition with an "AND" operator.	
            If the SearchCondition is empty the "AND" operator is not added. 
            </summary>
            <param name="predicate">Predicate to be added to the SearchCondition. <b>Null</b> is not allowed.</param>
        </member>
        <member name="M:FistCore.Core.SearchCondition.And(FistCore.Core.IDbColumn,System.Object)">
            <summary>
            Adds a <see cref="T:FistCore.Core.ComparePredicate"/> or <see cref="T:FistCore.Core.IsNullPredicate"/> to the SearchCondition 
            with an "AND" operator.	If the SearchCondition is empty the "AND" operator is not added. 
            </summary>
            <param name="field">Database field.</param>
            <param name="value">Value to which the field is compared. Nullable.</param>
        </member>
        <member name="M:FistCore.Core.SearchCondition.And(FistCore.Core.SearchCondition)">
            <summary>
            Adds a boolean condition to the SearchCondition with an "AND" operator.	
            If the SearchCondition is empty the "AND" operator is not added. 
            </summary>
            <param name="subCondition">Sub-condition to be added to the SearchCondition. 
            <b>Null</b> and empty search conditions are not allowed.</param>
        </member>
        <member name="M:FistCore.Core.SearchCondition.AndNot(FistCore.Core.IDbColumn,System.Object)">
            <summary>
            Adds a <b>"not equal"</b> or <b>"is not null"</b> predicate to the SearchCondition 
            with an "AND" operator.	If the SearchCondition is empty the "AND" operator is not added. 
            </summary>
            <param name="field">Database field.</param>
            <param name="value">Value to which the field is compared. Nullable.</param>
        </member>
        <member name="M:FistCore.Core.SearchCondition.Or(FistCore.Core.PredicateBase)">
            <summary>
            Adds a boolean condition to the SearchCondition with an "OR" operator.	
            If the SearchCondition is empty the "OR" operator is not added.	
            </summary>
            <param name="predicate">Predicate to be added to the SearchCondition. <b>Null</b> is not allowed.</param>
        </member>
        <member name="M:FistCore.Core.SearchCondition.Or(FistCore.Core.IDbColumn,System.Object)">
            <summary>
            Adds a <see cref="T:FistCore.Core.ComparePredicate"/> or <see cref="T:FistCore.Core.IsNullPredicate"/> to the SearchCondition 
            with an "OR" operator.	If the SearchCondition is empty the "OR" operator is not added. 
            </summary>
            <param name="field">Database field.</param>
            <param name="value">Value to which the field is compared. Nullable.</param>
        </member>
        <member name="M:FistCore.Core.SearchCondition.Or(FistCore.Core.SearchCondition)">
            <summary>
            Adds a boolean condition to the SearchCondition with an "OR" operator.	
            If the SearchCondition is empty the "OR" operator is not added.	
            </summary>
            <param name="subCondition">Sub-condition to be added to the SearchCondition. 
            <b>Null</b> and empty search conditions are not allowed.</param>
        </member>
        <member name="M:FistCore.Core.SearchCondition.Render(FistCore.Core.DbmsType,System.Text.StringBuilder,FistCore.Core.DbParameterCollection)">
            <summary>
            Renders search condition as SQL statement.
            </summary>
            <param name="dbms">Target DBMS.</param>
            <param name="output">StringBuilder to which SQL is appended.</param>
            <param name="parameters">SQL parameter collection to which the object's and its children's
            parameters are added. After the rendering is done the collection contains all parameters with unique names.</param>
        </member>
        <member name="M:FistCore.Core.SearchCondition.IsNullOrEmpty(FistCore.Core.SearchCondition)">
            <summary>
            Indicates whether the specified search condition is empty or a <n>null</n> reference.
            </summary>
            <param name="value">A <see cref="T:FistCore.Core.SearchCondition"/> reference.</param>
            <returns><b>true</b> if the value parameter is empty or a <n>null</n> reference; otherwise, <b>false</b>.</returns>
        </member>
        <member name="P:FistCore.Core.SearchCondition.IsEmpty">
            <summary>
            Gets the value which indicates whether the search condition is empty.
            </summary>
        </member>
        <member name="T:FistCore.Core.ProviderComponents.ISelectRenderer">
            <summary>Renders SELECT statement.</summary>
        </member>
        <member name="M:FistCore.Core.ProviderComponents.ISelectRenderer.Render(FistCore.Core.SelectStatement,FistCore.Core.DbmsType,System.Text.StringBuilder,FistCore.Core.DbParameterCollection)">
            <summary>Renders SELECT statement.</summary>
            <param name="select">SELECT statement to render.</param>
            <param name="dbms">Target DBMS.</param>
            <param name="output">StringBuilder to which SQL is appended.</param>
            <param name="parameters">SQL parameter collection to which the object's and its children's
            parameters are added. After the rendering is done the collection contains all parameters with unique names.</param>
        </member>
        <member name="T:FistCore.Core.GroupByClause">
            <summary>
            Specifies the groups into which output rows of a <see cref="T:FistCore.Core.SelectStatement"/> are to be placed.
            </summary>
            <remarks><para>The GROUP BY clause is used to produce aggregate values for each row in the result set. 
            The GROUP BY clause restricts the rows of the result set; there is only one row for each distinct 
            value in the grouping column or columns. Each result set row contains summary data related to the 
            specific value in its grouping columns.</para>
            <para><b>Restrictions.</b> Some RDBMSs don't support GROUP BY clause for all field types. Eg. the text, 
            ntext, or image data type cannot be used in a GROUP BY clause on SQL Server 7 and 2000.</para></remarks>
            <example>
            The following example gets the number of territories each employee is in charge of.
            <code>
            public DataTable GetNumberOfTerritoriesForEachEmployee()
            {	
            	// The equivalent SQL code that does the same task.
            
            	// SELECT EmployeeTerritories.EmployeeID, COUNT(*) AS numOfTerritories 
            	// FROM EmployeeTerritories 
            	// GROUP BY EmployeeTerritories.EmployeeID
            
            	EmployeeTerritoriesMeta empTerritories = new EmployeeTerritoriesMeta();
            
            	SelectStatement select = new SelectStatement(empTerritories);
            	select.SelectList.Add(empTerritories.EmployeeID);
            	select.SelectList.Add(AggregateFunctionFactory.Count("numOfTerritories"));
            	select.GroupBy.Fields.Add(empTerritories.EmployeeID);
            
            	return select.Execute();
            }
            </code>
            </example>
        </member>
        <member name="M:FistCore.Core.GroupByClause.#ctor">
            <summary>
            Initializes a new instance of the GroupByClause class.
            </summary>
        </member>
        <member name="M:FistCore.Core.GroupByClause.#ctor(FistCore.Core.DbColumnCollection)">
            <summary>
            Initializes a new instance of the GroupByClause class.
            </summary>
            <param name="groupingColumns">Grouping columns.</param>
        </member>
        <member name="M:FistCore.Core.GroupByClause.#ctor(FistCore.Core.SelectItemCollection)">
            <summary>
            Initializes a new instance of the GroupByClause class.
            </summary>
            <param name="selectList">Select list from which the grouping columns are extracted.</param>
            <remarks>Very often a GROUP BY clause contains all the columns in the select list. 
            This method adds all columns found in the given select list to the GROUP BY clause. 
            Other select list items such as aggregate functions are skipped.</remarks>
        </member>
        <member name="M:FistCore.Core.GroupByClause.Render(FistCore.Core.DbmsType,System.Text.StringBuilder,FistCore.Core.DbParameterCollection)">
            <summary>
            Renders GROUP BY statement.
            </summary>
            <param name="dbms">Target DBMS.</param>
            <param name="output">StringBuilder to which SQL is appended.</param>
            <param name="parameters">SQL parameter collection to which the object's and its children's
            parameters are added. After the rendering is done the collection contains all parameters with unique names.</param>
        </member>
        <member name="P:FistCore.Core.GroupByClause.Fields">
            <summary>
            Gets the grouping columns of this GROUP BY clause.
            </summary>
        </member>
        <member name="T:FistCore.Core.OrderByClause">
            <summary>
            Specifies the sort for the result set of a <see cref="T:FistCore.Core.SelectStatement"/>.
            </summary>
            <remarks><para>Contains a list of order by expressions. An order by expressions specifies a column on which 
            to sort and the sort direction. Ascending (ASC) direction sorts from the lowest value to highest value. 
            Descending direction (DESC) sorts from the highest value to lowest value. Null values are treated 
            as the lowest possible values.</para>
            <para>OrderByClause may be also used to create a sort expression for a <see cref="T:System.Data.DataView"/> 
            (see <see cref="M:FistCore.Core.OrderByClause.GetDataViewSortExpression"/>).</para>
            <para><b>Restrictions.</b> Some RDBMSs don't support ORDER BY for all field types. Eg. the text, 
            ntext, or image data type cannot be used in an ORDER BY clause on SQL Server 7 and 2000.</para></remarks>
            <example>
            The following example creates an OrderByClause and uses it to render a DataView sort expression.
            <code>
            public string GetEmployeesSorter()
            {
            	// Returns sort expression: "LastName ASC, FirstName ASC, BirthDate DESC"
            
            	EmployeesMeta employees = new EmployeesMeta();			
            	OrderByClause orderBy = new OrderByClause();
            	orderBy.Add(employees.LastName, true);
            	orderBy.Add(employees.FirstName, true);
            	orderBy.Add(employees.BirthDate, false);
            	
            	return orderBy.GetDataViewSortExpression();
            }
            </code>
            </example>
        </member>
        <member name="M:FistCore.Core.OrderByClause.#ctor">
            <summary>
            Initializes a new instance of the OrderByClause class.
            </summary>
            <remarks>Creates an empty ORDER BY clause.</remarks>
        </member>
        <member name="M:FistCore.Core.OrderByClause.#ctor(FistCore.Core.IDbColumn)">
            <summary>
            Initializes a new instance of the OrderByClause class.
            </summary>
            <param name="firstField">First sort column in the clause.</param>
            <remarks>Creates an ORDER BY clause and sets the first sort expression.</remarks>
        </member>
        <member name="M:FistCore.Core.OrderByClause.#ctor(FistCore.Core.IDbColumn,System.Boolean)">
            <summary>
            Initializes a new instance of the OrderByClause class.
            </summary>
            <param name="firstField">First sort column in the clause.</param>
            <param name="ascending">Specifies whether the values in the specified column should be sorted 
            in ascending order, from lowest value to highest value.</param>
            <remarks>Creates an ORDER BY clause and sets the first sort expression.</remarks>
        </member>
        <member name="M:FistCore.Core.OrderByClause.#ctor(System.String,System.Boolean)">
            <summary>
            Initializes a new instance of the OrderByClause class.
            </summary>
            <param name="firstField">Name of the first sort column in the clause.</param>
            <param name="ascending">Specifies whether the values in the specified column should be sorted 
            in ascending order, from lowest value to highest value.</param>
            <remarks>Creates an ORDER BY clause and sets the first sort expression.</remarks>
        </member>
        <member name="M:FistCore.Core.OrderByClause.Add(FistCore.Core.IDbColumn)">
            <summary>
            Adds new expression to the clause.
            </summary>
            <param name="field">Column whose values are to be sorted in ascending order. Null is not allowed.</param>
        </member>
        <member name="M:FistCore.Core.OrderByClause.Add(FistCore.Core.IDbColumn,System.Boolean)">
            <summary>
            Adds new expression to the clause.
            </summary>
            <param name="field">Column. Null is not allowed.</param>
            <param name="ascending">Specifies whether the values in the specified column should be sorted 
            in ascending order, from lowest value to highest value.</param>
        </member>
        <member name="M:FistCore.Core.OrderByClause.Add(System.String,System.Boolean)">
            <summary>
            Adds new expression to the clause.
            </summary>
            <param name="columnName">Column name. Null or empty string is not allowed.</param>
            <param name="ascending">Specifies whether the values in the specified column should be sorted 
            in ascending order, from lowest value to highest value.</param>
        </member>
        <member name="M:FistCore.Core.OrderByClause.Clear">
            <summary>
            Removes all sort expressions from the collection.
            </summary>
        </member>
        <member name="M:FistCore.Core.OrderByClause.GetSortExpressionAt(System.Int32)">
            <summary>
            Gets sort expression at the specified index.
            </summary>
            <param name="index">The zero-based index of the expression to get.</param>
            <returns>Expression at the specified index.</returns>
        </member>
        <member name="M:FistCore.Core.OrderByClause.GetAllSortExpressions">
            <summary>
            Gets all sort expressions.
            </summary>
            <returns>Array of sort expressions.</returns>
        </member>
        <member name="M:FistCore.Core.OrderByClause.Render(FistCore.Core.DbmsType,System.Text.StringBuilder,FistCore.Core.DbParameterCollection)">
            <summary>
            Renders ORDER BY clause.
            </summary>
            <param name="dbms">Target DBMS.</param>
            <param name="output">StringBuilder to which SQL is appended.</param>
            <param name="parameters">SQL parameter collection to which the object's and its children's
            parameters are added. After the rendering is done the collection contains all parameters with unique names.</param>
        </member>
        <member name="M:FistCore.Core.OrderByClause.GetDataViewSortExpression">
            <summary>
            Creates a DataView sort expression.
            </summary>
            <returns>DataView sort expression. Empty string if the clause is empty.</returns>
        </member>
        <member name="M:FistCore.Core.OrderByClause.ToString">
            <summary>
            Returns the SQL code for this object.
            </summary>
            <returns>ORDER BY clause.</returns>
        </member>
        <member name="M:FistCore.Core.OrderByClause.ToString(FistCore.Core.DbmsType)">
            <summary>
            Returns the SQL code for this object.
            </summary>
            <param name="dbms">Target DBMS.</param>
            <returns>ORDER BY clause.</returns>
        </member>
        <member name="M:FistCore.Core.OrderByClause.IsNullOrEmpty(FistCore.Core.OrderByClause)">
            <summary>
            Indicates whether the specified order by clause is empty or a <n>null</n> reference.
            </summary>
            <param name="value">A <see cref="T:FistCore.Core.OrderByClause"/> reference.</param>
            <returns><b>true</b> if the value parameter is empty or a <n>null</n> reference; otherwise, <b>false</b>.</returns>
        </member>
        <member name="P:FistCore.Core.OrderByClause.Count">
            <summary>
            Gets the number of sort expressions in the ORDER BY clause.
            </summary>
        </member>
        <member name="T:FistCore.Core.SortExpression">
            <summary>
            Contains sort expression info.
            </summary>
        </member>
        <member name="P:FistCore.Core.SortExpression.Field">
            <summary>
            Gets the column whose values are sorted.
            </summary>
            <value><see cref="T:FistCore.Core.IDbColumn"/> object or <b>null</b> if <see cref="P:FistCore.Core.SortExpression.ColumnName"/> property is set.</value>
        </member>
        <member name="P:FistCore.Core.SortExpression.ColumnName">
            <summary>
            Gets the name of the column whose values are sorted.
            </summary>
            <value>Column name or <b>null</b> if <see cref="P:FistCore.Core.SortExpression.Field"/> property is set.</value>
        </member>
        <member name="P:FistCore.Core.SortExpression.Ascending">
            <summary>
            Gets whether the values in the specified column should be sorted in ascending order, from lowest value to highest value.
            </summary>
            <value><b>true</b> if ascending order is used; <b>false</b> if descending order is used. Default is <b>true</b>.</value>
        </member>
        <member name="T:FistCore.Core.SelectItem">
            <summary>
            An item retrieved by <see cref="T:FistCore.Core.SelectStatement"/>.
            </summary>
        </member>
        <member name="M:FistCore.Core.SelectItem.#ctor">
            <summary>
            Creates an item.
            </summary>
        </member>
        <member name="M:FistCore.Core.SelectItem.#ctor(FistCore.Core.IDbColumn)">
            <summary>
            Creates an item that contains a database field. Has a known data type and alias.
            </summary>
            <param name="column">Database column.</param>
        </member>
        <member name="M:FistCore.Core.SelectItem.#ctor(System.String)">
            <summary>
            Creates an item that contains SQL commands. Doesn't have a known data type and alias.
            </summary>
            <param name="freeText">SQL commands.</param>
        </member>
        <member name="M:FistCore.Core.SelectItem.#ctor(FistCore.Core.Function)">
            <summary>
            Creates an item that contains SQL function. Has a known data type and alias.
            </summary>
            <param name="function">SQL function.</param>
        </member>
        <member name="M:FistCore.Core.SelectItem.#ctor(System.Object,System.Data.DbType,System.Int32,System.String)">
            <summary>
            Creates an item that contains an SQL parameter. Has a known data type. Doesn't assign alias.
            </summary>
            <param name="parameterValue">Parameter value.</param>
            <param name="parameterType">Parameter data type.</param>
            <param name="size">Size of the parameter. Required only for variable length types.</param>
            <param name="parameterNamePrefix">Parameter name prefix. Eg. "par_".</param>
        </member>
        <member name="M:FistCore.Core.SelectItem.#ctor(FistCore.Core.SelectStatement)">
            <summary>
            Creates an item that contains a query. Assigns alias if query specifies one.
            If a query contains a single select item (field or function) than a data type will automatically be determined.
            </summary>
            <param name="query">Query.</param>
        </member>
        <member name="M:FistCore.Core.SelectItem.CopyFrom(FistCore.Core.SelectItem)">
            <summary>
            Copies members other item to current item.
            </summary>
            <param name="other">Other item.</param>
        </member>
        <member name="M:FistCore.Core.SelectItem.Render(FistCore.Core.DbmsType,System.Text.StringBuilder,FistCore.Core.DbParameterCollection)">
            <summary>
            Renders select item as SQL statement.
            </summary>
            <param name="dbms">Target DBMS.</param>
            <param name="output">StringBuilder to which SQL is appended.</param>
            <param name="parameters">SQL parameter collection to which the object's and its children's
            parameters are added. After the rendering is done the collection contains all parameters with unique names.</param>
        </member>
        <member name="P:FistCore.Core.SelectItem.Item">
            <summary>
            Gets contained item.
            </summary>
        </member>
        <member name="P:FistCore.Core.SelectItem.ItemType">
            <summary>
            Gets item type.
            </summary>
        </member>
        <member name="P:FistCore.Core.SelectItem.DbType">
            <summary>
            Gets the SQL data type. DbType.Object if unknown.
            </summary>
        </member>
        <member name="P:FistCore.Core.SelectItem.DataType">
            <summary>
            Gets .NET type. Object if unknown.
            </summary>
        </member>
        <member name="P:FistCore.Core.SelectItem.Alias">
            <summary>
            Gets the item's alias/name. May be <b>null</b>.
            </summary>
        </member>
        <member name="T:FistCore.Core.SelectItemCollection">
            <summary>
            Select list. Specifies the items to be returned by the <see cref="T:FistCore.Core.SelectStatement"/>.
            </summary>
            <remarks>Strong-typed SqlItemCollection, may contain only SelectItem or inherited objects.</remarks>
        </member>
        <member name="M:FistCore.Core.SelectItemCollection.#ctor">
            <summary>
            Instantiates a new select list.
            </summary>
        </member>
        <member name="M:FistCore.Core.SelectItemCollection.Add(FistCore.Core.SelectItem)">
            <summary>
            Adds an item to the list.
            </summary>
            <param name="item">Any select item.</param>
        </member>
        <member name="M:FistCore.Core.SelectItemCollection.Add(FistCore.Core.SelectItemCollection)">
            <summary>
            Adds items the list.
            </summary>
            <param name="items">Collection of select items.</param>
            <remarks>Adds all items in the given collection to this list.</remarks>
        </member>
        <member name="M:FistCore.Core.SelectItemCollection.Add(FistCore.Core.IDbColumn)">
            <summary>
            Adds an item to the list.
            </summary>
            <param name="field">Field.</param>
        </member>
        <member name="M:FistCore.Core.SelectItemCollection.Add(FistCore.Core.IDbColumn[])">
            <summary>
            Adds items to the list.
            </summary>
            <param name="fields">Array of fields.</param>
        </member>
        <member name="M:FistCore.Core.SelectItemCollection.Add(FistCore.Core.DbColumnCollection)">
            <summary>
            Adds items to the list.
            </summary>
            <param name="fields">Collection of fields.</param>
        </member>
        <member name="M:FistCore.Core.SelectItemCollection.Add(FistCore.Core.Function)">
            <summary>
            Adds an item to the list.
            </summary>
            <param name="function">Function. Usually an <see cref="T:FistCore.Core.AggregateFunction"/>.</param>
        </member>
        <member name="M:FistCore.Core.SelectItemCollection.Add(FistCore.Core.SelectStatement,System.String)">
            <summary>
            Adds an item to the list.
            </summary>
            <param name="subQuery"><see cref="T:FistCore.Core.SelectStatement"/> that returns a single value.</param>
            <param name="alias">Query alias.</param>
        </member>
        <member name="M:FistCore.Core.SelectItemCollection.Clear">
            <summary>
            Removes all items from the collection.
            </summary>
        </member>
        <member name="M:FistCore.Core.SelectItemCollection.GetEnumerator">
            <summary>
            Gets an enumerator that can iterate through SqlItemCollection.
            </summary>
        </member>
        <member name="M:FistCore.Core.SelectItemCollection.System#Collections#Generic#IEnumerable{FistCore#Core#SelectItem}#GetEnumerator">
            <summary>
            Gets an enumerator that can iterate through SqlItemCollection.
            </summary>
        </member>
        <member name="M:FistCore.Core.SelectItemCollection.ContainsItemWithAlias(System.String)">
            <summary>
            Determines whether the collection contains the element with the specified alias.
            </summary>
            <param name="itemAlias">Item alias.</param>
            <returns><b>true</b> if item with the specified alias exists in the collection; otherwise <b>false</b>.</returns>
        </member>
        <member name="M:FistCore.Core.SelectItemCollection.GetByType(FistCore.Core.SqlItemType)">
            <summary>
            Gets all items of the given type.
            </summary>
            <param name="itemType">Item type.</param>
            <returns>Collection of items of the given type.</returns>
        </member>
        <member name="M:FistCore.Core.SelectItemCollection.Render(FistCore.Core.DbmsType,System.Text.StringBuilder,FistCore.Core.DbParameterCollection)">
            <summary>
            Renders SQL item as SQL statement.
            </summary>
            <param name="dbms">Target DBMS.</param>
            <param name="output">StringBuilder to which SQL is appended.</param>
            <param name="parameters">SQL parameter collection to which the object's and its children's
            parameters are added. After the rendering is done the collection contains all parameters with unique names.</param>
        </member>
        <member name="P:FistCore.Core.SelectItemCollection.Item(System.Int32)">
            <summary>
            Gets the item at specified position.
            </summary>
        </member>
        <member name="P:FistCore.Core.SelectItemCollection.Item(System.String)">
            <summary>
            Gets the item with the given alias. Null if it doesn't exist.
            </summary>
        </member>
        <member name="P:FistCore.Core.SelectItemCollection.Count">
            <summary>
            Gets the number of items in the collection.
            </summary>
        </member>
        <member name="T:FistCore.Core.SelectStatement">
             <summary>
             Retrieves rows from the database and allows the selection of one or many rows or columns from one or many tables.
             <seealso cref="T:FistCore.Core.SearchCondition"/><seealso cref="T:FistCore.Core.PredicateFactory"/><seealso cref="T:FistCore.Core.RelationBucket"/><seealso cref="T:FistCore.Core.AggregateFunction"/>
             </summary>
             <example>
             <para>
             The following example creates a SelectStatement and uses it to select territory and region descriptions.
             Only the rows that match the given criteria (territory description has to start with a letter between the
             two specified characters) are returned. Data is sorted ascending by territory description.
             <code>
             public DataTable SelectTerritoryAndRegionNames(int maxNumberOfRowsReturned, char beginLetter, char endLetter)
             {
             	//	SELECT TOP 10 TerritoryDescription, RegionDescription
             	//	FROM Territories
             	//		INNER JOIN Region ON Region.RegionID = Territories.RegionID
             	//	WHERE TerritoryDescription BETWEEN @beginLetter AND @endLetter
             	//	ORDER BY TerritoryDescription
            
             	TerritoriesMeta territories = new TerritoriesMeta();
             	RegionMeta regions = new RegionMeta();
            
             	SelectStatement select = new SelectStatement(territories);
             	select.Top = maxNumberOfRowsReturned;
             	select.SelectList.Add(territories.TerritoryDescription, regions.RegionDescription);
             	select.Relations.Add(regions, territories, territories.RegionID);
             	select.Where.Add(PredicateFactory.Between(territories.TerritoryDescription, beginLetter, endLetter));
             	select.OrderBy.Add(territories.TerritoryDescription);
            
             	return select.Execute();
             }
             </code>
             </para>
             <para>
             The following example demonstrates how to use aggregate functions, sub-queries, GROUP BY and HAVING clauses.
             <code>
             private DataTable FetchImprovingCustomers97()
             {
             	//	Customers that spent more than $500 in 1997 but spent less than $100 in 1996.
            
             	//	SELECT Customers.CompanyName, SUM([Order Details].UnitPrice) as TotalPrice
             	//	FROM Customers
             	//		LEFT OUTER JOIN Orders ON Orders.CustomerID = Customers.CustomerID
             	//		LEFT OUTER JOIN [Order Details] ON [Order Details].OrderID = Orders.OrderID
             	//	WHERE
             	//		-- Orders made in 1997.
             	//		Orders.OrderDate BETWEEN '1997-01-01' AND '1997-12-31'
             	//
             	//		-- Sub-query. Customers who spent less than $100 in 1996.
             	//		AND Customers.CustomerID IN
             	//		(
             	//			SELECT Customers.CustomerID
             	//			FROM Customers
             	//				LEFT OUTER JOIN Orders ON Orders.CustomerID = Customers.CustomerID
             	//				LEFT OUTER JOIN [Order Details] ON [Order Details].OrderID = Orders.OrderID
             	//			WHERE
             	//				Orders.OrderDate BETWEEN '1996-01-01' AND '1996-12-31'
             	//			GROUP BY Customers.CustomerID
             	//			HAVING SUM([Order Details].UnitPrice) &lt; 100
             	//		)
             	//
             	//	GROUP BY Customers.CompanyName
             	//
             	//	-- Customers who spent more than $500.
             	//	HAVING SUM([Order Details].UnitPrice) &gt; 500
             	//	ORDER BY Customers.CompanyName
            
             	CustomersMeta customers = new CustomersMeta();
             	OrdersMeta orders = new OrdersMeta();
             	OrderDetailsMeta details = new OrderDetailsMeta();
            
             	SelectStatement select = new SelectStatement(customers);
             	select.SelectList.Add(customers.CompanyName);
             	select.SelectList.Add(AggregateFunctionFactory.Sum(details.UnitPrice, false, "TotalPrice"));
             	select.Relations.Add(customers, orders, orders.CustomerID);
             	select.Relations.Add(orders, details, details.OrderID);
            
            		// Orders made in 1997.
             	select.Where.Add(PredicateFactory.Between(orders.OrderDate, new DateTime(1997,1,1), new DateTime(1997,12,31)));
            
             	// Sub-query. Customers who spent less than $100 in 1996.
             	SelectStatement badIn96 = new SelectStatement(customers);
             	badIn96.SelectList.Add(customers.CustomerID);
             	badIn96.Relations.Add(customers, orders, orders.CustomerID);
             	badIn96.Relations.Add(orders, details, details.OrderID);
             	badIn96.Where.Add(PredicateFactory.Between(orders.OrderDate, new DateTime(1996,1,1), new DateTime(1996,12,31)));
             	badIn96.GroupBy.Fields.Add(customers.CustomerID);
             	badIn96.Having.Add(PredicateFactory.Compare(AggregateFunctionFactory.Sum(details.UnitPrice, false, "TotalPrice"), "&lt;", 100));
             	select.Where.And(PredicateFactory.In(customers.CustomerID, badIn96));
            
             	select.GroupBy = new GroupByClause(select.SelectList);
             	// Customers who spent more than $500.
             	select.Having.Add(PredicateFactory.Compare(AggregateFunctionFactory.Sum(details.UnitPrice, false, "TotalPrice"), "&gt;", 500));
             	select.OrderBy.Add(customers.CompanyName, true);
            
             	return select.Execute();
             }
             </code>
             </para>
             </example>
        </member>
        <member name="M:FistCore.Core.SelectStatement.#ctor(FistCore.Core.IDbTable)">
            <summary>
            Creates a new select statements that retrieves rows and columns from the given table.
            </summary>
            <param name="fromTable">Initial table in the FROM clause.</param>
        </member>
        <member name="M:FistCore.Core.SelectStatement.#ctor(FistCore.Core.IDbTable,FistCore.Core.DbColumnCollection)">
            <summary>
            Creates a new select statements that retrieves rows and columns from the given table.
            </summary>
            <param name="fromTable">Initial table in the FROM clause.</param>
            <param name="selectList">Item(s) to fetch. Additional items may be specified in <see cref="P:FistCore.Core.SelectStatement.SelectList"/> collection.</param>
        </member>
        <member name="M:FistCore.Core.SelectStatement.#ctor(FistCore.Core.IDbTable,FistCore.Core.IDbColumn[])">
            <summary>
            Creates a new select statements that retrieves rows and columns from the given table.
            </summary>
            <param name="fromTable">Initial table in the FROM clause.</param>
            <param name="selectList">Item(s) to fetch. Additional items may be specified in <see cref="P:FistCore.Core.SelectStatement.SelectList"/> collection.</param>
        </member>
        <member name="M:FistCore.Core.SelectStatement.#ctor(FistCore.Core.IDbTable,FistCore.Core.Function)">
            <summary>
            Creates a new select statements that retrieves rows and columns from the given table.
            </summary>
            <param name="fromTable">Initial table in the FROM clause.</param>
            <param name="selectList">Item(s) to fetch. Additional items may be specified in <see cref="P:FistCore.Core.SelectStatement.SelectList"/> collection.</param>
        </member>
        <member name="M:FistCore.Core.SelectStatement.Render(FistCore.Core.DbmsType,System.Text.StringBuilder,FistCore.Core.DbParameterCollection)">
            <summary>
            Renders SELECT statement.
            </summary>
            <param name="dbms">Target DBMS.</param>
            <param name="output">StringBuilder to which SQL is appended.</param>
            <param name="parameters">SQL parameter collection to which the object's and its children's
            parameters are added. After the rendering is done the collection contains all parameters with unique names.</param>
        </member>
        <member name="M:FistCore.Core.SelectStatement.Execute(System.Int32)">
            <summary>Retrieves data.</summary>
            <param name="cmdTimeout">Sets timeout for select statement execution. Default is 30 seconds.</param>
            <returns>Data.</returns>
        </member>
        <member name="M:FistCore.Core.SelectStatement.Execute(FistCore.Core.IConnectionProvider)">
            <summary>Retrieves data. Uses given connection provider.</summary>
            <param name="conn">Connection provider.</param>
            <returns>Data.</returns>
        </member>
        <member name="M:FistCore.Core.SelectStatement.ExecuteScalar">
            <summary>
            Executes the query, and returns the first column of the first row in the result set returned by the query. Additional columns or rows are ignored.
            </summary>
            <returns>The first column of the first row in the result set, or a <b>null</b> reference if the result set is empty.</returns>
        </member>
        <member name="M:FistCore.Core.SelectStatement.ExecuteScalar(FistCore.Core.IConnectionProvider)">
            <summary>
            Executes the query, and returns the first column of the first row in the result set returned by the query. Additional columns or rows are ignored.
            </summary>
            <param name="conn">Connection provider.</param>
            <returns>The first column of the first row in the result set, or a <b>null</b> reference if the result set is empty.</returns>
        </member>
        <member name="M:FistCore.Core.SelectStatement.FillCollection(System.Collections.IList,FistCore.Core.IObjectFiller,System.Int32)">
             <summary>Executes a query and directly fills given collection with objects build from retrieved data.</summary>
             <param name="destination">A collection to fill with objects built from data.</param>
             <param name="objectBuilder">Builds objects directly from retrieved data.</param>
             <param name="cmdTimeout">Sets timeout for collection fetching SQL command. Default is 30 seconds.</param>
             <remarks><para>The method uses provided converter to directly build specified object type from data contained in
             <see cref="T:System.Data.IDataReader"/> objects, thus skipping the need to create intermediate data structures such as <see cref="T:System.Data.DataTable"/>
             and <see cref="T:System.Data.DataSet"/> objects. This can increase performance and reduce memory consumption when working with very
             large results sets.</para>
             <example><para>The following example demonstrates the fastest way to fetch and initialize entity collection:<code>
             EmployeesMeta employees = new EmployeesMeta();
             SelectStatement select = new SelectStatement(employees, employees.Columns);
             var allEmployees = new EntityCollection&lt;EmployeesEntity, EmployeesMeta&gt;();
             select.FillCollection(allEmployees, employees.NewEntityFiller());
             </code></para>
             <para>Besides entity collections, you can also fill any custom collections or data structures by implementing your own <see cref="T:FistCore.Core.IObjectFiller"/> objects.
             The following example demonstrates the fastest way to fetch all values used in a single column of a table using custom developed object filler:<code>
             //Fetch all values from OrderID column of Order Details table.
             public List&lt;int&gt; FillOrderIdCollection()
             {
                 OrderDetailsMeta details = new OrderDetailsMeta();
                 SelectStatement select = new SelectStatement(details, details.OrderID);
                 // Operation is slightly faster if we can estimate the number of items that the target collection will contain.
                 var allItems = new List&lt;int&gt;(2200);
                 select.FillCollection(allItems, new SingleFieldFiller());
                 return allItems;
             }
            
             //Fills collection with primitive types.
             public class SingleFieldFiller : IObjectFiller
             {
                 public void FillCollection(IDataReader openedDataReader, IList collection)
                 {
                     while (openedDataReader.Read())
                     {
                         object value = openedDataReader.GetValue(0);
                         collection.Add(value);
                     }
                 }
             }
             </code></para></example></remarks>
        </member>
        <member name="M:FistCore.Core.SelectStatement.FillCollection(FistCore.Core.IConnectionProvider,System.Collections.IList,FistCore.Core.IObjectFiller)">
             <summary>Executes a query and directly fills given collection with objects build from retrieved data.</summary>
             <param name="conn">Connection provider.</param>
             <param name="destination">A collection to fill with objects built from data.</param>
             <param name="objectBuilder">Builds objects directly from retrieved data.</param>
             <remarks><para>The method uses provided converter to directly build specified object type from data contained in
             <see cref="T:System.Data.IDataReader"/> objects, thus skipping the need to create intermediate data structures such as <see cref="T:System.Data.DataTable"/>
             and <see cref="T:System.Data.DataSet"/> objects. This can increase performance and reduce memory consumption when working with very
             large results sets.</para>
             <example><para>The following example demonstrates the fastest way to fetch and initialize entity collection:<code>
             EmployeesMeta employees = new EmployeesMeta();
             SelectStatement select = new SelectStatement(employees, employees.Columns);
             var allEmployees = new EntityCollection&lt;EmployeesEntity, EmployeesMeta&gt;();
             select.FillCollection(allEmployees, employees.NewEntityFiller());
             </code></para>
             <para>Besides entity collections, you can also fill any custom collections or data structures by implementing your own <see cref="T:FistCore.Core.IObjectFiller"/> objects.
             The following example demonstrates the fastest way to fetch all values used in a single column of a table using custom developed object filler:<code>
             //Fetch all values from OrderID column of Order Details table.
             public List&lt;int&gt; FillOrderIdCollection()
             {
                 OrderDetailsMeta details = new OrderDetailsMeta();
                 SelectStatement select = new SelectStatement(details, details.OrderID);
                 // Operation is slightly faster if we can estimate the number of items that the target collection will contain.
                 var allItems = new List&lt;int&gt;(2200);
                 select.FillCollection(allItems, new SingleFieldFiller());
                 return allItems;
             }
            
             //Fills collection with primitive types.
             public class SingleFieldFiller : IObjectFiller
             {
                 public void FillCollection(IDataReader openedDataReader, IList collection)
                 {
                     while (openedDataReader.Read())
                     {
                         object value = openedDataReader.GetValue(0);
                         collection.Add(value);
                     }
                 }
             }
             </code></para></example></remarks>
        </member>
        <member name="P:FistCore.Core.SelectStatement.Alias">
            <summary>
            Gets or sets query alias. Has no effect on actual select statement but some other statements use it.
            Eg. if a sub-query is used as a select item in the select list than it should have an alias.
            </summary>
        </member>
        <member name="P:FistCore.Core.SelectStatement.Distinct">
            <summary>
            Gets or sets the value which specifies that only unique rows can appear in the result set.
            </summary>
            <remarks><para><b>Performance.</b> Be careful when using DISTINCT if retrieving a lot of large data
            as the database performance may be considerably degraded.</para>
            <para><b>Restrictions.</b> Some RDBMSs don't support DISTINCT for all field types. Eg. the text,
            ntext, or image data type cannot be selected as DISTINCT on SQL Server 7 and 2000.</para>
            <para><b>NULL values.</b> For the DISTINCT keyword, null values are considered to be duplicates
            of each other. When DISTINCT is included in a SELECT statement, only one NULL is returned
            in the results, regardless of how many null values are encountered.</para></remarks>
        </member>
        <member name="P:FistCore.Core.SelectStatement.Top">
            <summary>
            Gets or sets the value that specifies the maximum number of rows that are retrieved.
            Has no effect if it is set to zero or a negative value; or if the target DBMS doesn't support it.
            </summary>
        </member>
        <member name="P:FistCore.Core.SelectStatement.SelectList">
            <summary>
            Gets or sets the list of items to be retrieved by the SelectStatement.
            </summary>
        </member>
        <member name="P:FistCore.Core.SelectStatement.FromTable">
            <summary>
            Gets the first table in the FROM clause.
            </summary>
        </member>
        <member name="P:FistCore.Core.SelectStatement.Relations">
            <summary>
            Gets or sets the <see cref="T:FistCore.Core.RelationBucket"/> that contains the relations used by this statement.
            Required when the SelectStatement retrieves columns from multiple tables.
            </summary>
        </member>
        <member name="P:FistCore.Core.SelectStatement.Where">
            <summary>
            Gets or sets the <see cref="T:FistCore.Core.SearchCondition"/> which restricts the rows returned.
            </summary>
        </member>
        <member name="P:FistCore.Core.SelectStatement.GroupBy">
            <summary>
            Gets or sets the <see cref="T:FistCore.Core.GroupByClause"/> which defines groups into which output rows are to be placed.
            </summary>
        </member>
        <member name="P:FistCore.Core.SelectStatement.Having">
            <summary>
            Gets or sets a <see cref="T:FistCore.Core.SearchCondition"/> for a group or an aggregate.
            </summary>
            <remarks>HAVING is usually used with the GROUP BY clause. When GROUP BY is not used, HAVING behaves like a WHERE clause.</remarks>
        </member>
        <member name="P:FistCore.Core.SelectStatement.OrderBy">
            <summary>
            Gets or sets the <see cref="T:FistCore.Core.OrderByClause"/> which specifies the sort for the result set.
            </summary>
        </member>
        <member name="T:FistCore.Core.Settings">
            <summary>Contains framework settings whose value can be configuraed in <b>appSettings</b> section of the application's configuration file.</summary>
        </member>
        <member name="F:FistCore.Core.Settings.ContainsPredicateEnabled">
            <summary>Defiens whether <see cref="T:FistCore.Core.ContainsPredicate"/> is enabled or whether compatibile LIKE expressions are generated.</summary>
            <value><b>true</b> to enable full text search if implemented for target DBMS. <b>false</b> to disable full text search for all DBMSs. Default is <b>true</b>.</value>
            <remarks>The feature can be switched on or off in <b>appSettings</b> section of the application's configuration file.
            The folowing example shows how to disable the feature:
            <code>&lt;add key="FistCore.Core.ContainsPredicate.Enabled" value="false"/&gt;</code></remarks>
        </member>
        <member name="F:FistCore.Core.Settings.ParentsFetchedInSingleSelect">
            <summary>Defines whether <see cref="T:FistCore.Core.EntityDAO"/> and <see cref="T:FistCore.Core.EntityBase"/> classes fetch all parents in a large single SELECT statement with multiple JOINs.</summary>
            <value><b>true</b> to use single SELECT for all parents; <b>false</b> otherwise. Default is <b>false</b>.</value>
            <remarks><para>When set to <b>false</b> FistCore will execute multiple, ie. one per parent, atomic SELECTs with parent's PK in WHERE clase.
            When set to <b>true</b> FistCore executes one large SELECT with child's PK in WHERE clause. This reduces the number of round trips to database,
            but in sam cases performance may be worse.</para>
            <para>The feature can be switched on or off in <b>appSettings</b> section of the application's configuration file.
            The folowing example shows how to enable the feature:
            <code>&lt;add key="FistCore.Core.EntityDAO.ParentsFetchedInSingleSelect" value="true"/&gt;</code>
            </para></remarks>
        </member>
        <member name="F:FistCore.Core.Settings.GenericHierarchicalQueryExecutorMaxLevel">
            <summary>Defines maximum tree depth for <see cref="T:FistCore.Core.ProviderComponents.GenericHierarchicalQueryExecutor"/>.</summary>
            <value>Maximum level. Default is <b>100</b>.</value>
            <remarks>The value can configured in <b>appSettings</b> section of the application's configuration file.
            <code>&lt;add key="FistCore.Core.GenericHierarchicalQueryExecutor.MaxLevel" value="100"/&gt;</code></remarks>
        </member>
        <member name="T:FistCore.Core.SqlItemType">
            <summary>
            Supported SqlItem types.
            </summary>
        </member>
        <member name="F:FistCore.Core.SqlItemType.Column">
            <summary>
            DB column/field. Object implements <see cref="T:FistCore.Core.IDbColumn"/> interface.
            </summary>
        </member>
        <member name="F:FistCore.Core.SqlItemType.FreeText">
            <summary>
            Any expression. Object is a <see cref="T:System.String"/>.
            </summary>
        </member>
        <member name="F:FistCore.Core.SqlItemType.Function">
            <summary>
            Function. Object is an instance of <see cref="F:FistCore.Core.SqlItemType.Function"/> or derived class.
            </summary>
        </member>
        <member name="F:FistCore.Core.SqlItemType.Parameter">
            <summary>
            SQL parameter. Object is an instance of <see cref="T:FistCore.Core.DbParameter"/> class.
            </summary>
        </member>
        <member name="F:FistCore.Core.SqlItemType.SubQuery">
            <summary>
            Query. Object is an instance of <see cref="T:FistCore.Core.SelectStatement"/> class.
            </summary>
        </member>
        <member name="T:FistCore.Core.StoredProcedureResult">
            <summary>
            Data retrieved by stored procedure.
            </summary>
            <example>
            The following example uses generated stored procedure wrapper which returns StoredProcedureResult 
            that contains a DataTable with sales data for the given time interval.
            <code>
            public DataTable GetSalesStatisticForInterval(DateTime beginDate, DateTime endDate)
            {
            	// Uses "Sales by Year" stored procedure to retrieve sales data for the given interval.
            	StoredProcedureResult spResult = SP.SalesByYear(beginDate, endDate);
            	return spResult.DataTable;
            }
            </code>
            </example>
        </member>
        <member name="M:FistCore.Core.StoredProcedureResult.#ctor(System.Data.DataSet,System.Object)">
            <summary>
            Constructor.
            </summary>
            <param name="resultSet">Data retrieved by stored procedure.</param>
            <param name="returnObj">Value returned by the stored procedure.</param>
        </member>
        <member name="P:FistCore.Core.StoredProcedureResult.DataTable">
            <summary>
            Gets the first <see cref="T:System.Data.DataTable"/> retrieved by the stored procedure. 
            <b>Null</b> if no DataTables have been retrieved.
            </summary>
        </member>
        <member name="P:FistCore.Core.StoredProcedureResult.DataSet">
            <summary>
            Gets the <see cref="T:System.Data.DataSet"/> retrieved by the stored procedure.
            May contain multiple DataTable objects.
            </summary>
        </member>
        <member name="P:FistCore.Core.StoredProcedureResult.ReturnObject">
            <summary>
            Gets the value returned by the stored procedure.
            </summary>
        </member>
        <member name="P:FistCore.Core.StoredProcedureResult.ReturnValue">
            <summary>
            Gets the value returned by the stored procedure.
            Zero if stored procedure didn't return anything or if the procedure's return value is not an integer.
            </summary>
        </member>
        <member name="T:FistCore.Core.ProviderComponents.GenericUpdater">
            <summary>Generic update executer. Bulk updates are not suppported. Updates that include multiple tables are executed as atomic update statements.</summary>
        </member>
        <member name="T:FistCore.Core.ProviderComponents.IUpdater">
            <summary>Renders and executes <see cref="T:FistCore.Core.UpdateStatement"/></summary>
        </member>
        <member name="M:FistCore.Core.ProviderComponents.IUpdater.RenderSelect(FistCore.Core.UpdateStatement,FistCore.Core.DbmsType,System.Text.StringBuilder,FistCore.Core.DbParameterCollection)">
            <summary>Creates a <see cref="T:FistCore.Core.SelectStatement"/> that retrieves data that is to be updated. <b>null</b> if data dont't have to be fetched, ie. if bulk update is supported when using multiple tables.</summary>
            <param name="update">Update statement.</param>
            <param name="dbms">Target DBMS.</param>
            <param name="output">StringBuilder to which the SQL code is appended.</param>
            <param name="parameters">SQL parameter collection to which the object's and its children's parameters are added. After the rendering is done the collection contains all parameters with unique names.</param>
        </member>
        <member name="M:FistCore.Core.ProviderComponents.IUpdater.Execute(FistCore.Core.UpdateStatement,FistCore.Core.DbmsType,FistCore.Core.IConnectionProvider,FistCore.Core.CommandExecutionStatistics@,System.Int32)">
            <summary>Executes <see cref="T:FistCore.Core.UpdateStatement"/>.</summary>
            <param name="update">Update statement.</param>
            <param name="dbms">Target DBMS.</param>
            <param name="conn">Connection-transaction context to use.</param>
            <param name="lastExecutedCommandInfo">Output parameter: statistic for executed command.</param>
            <param name="cmdTimeout">Sets timeout for SQL Command update execution.</param>
            <returns>The number of rows affected.</returns>
        </member>
        <member name="M:FistCore.Core.ProviderComponents.IUpdater.RenderUpdate(FistCore.Core.UpdateStatement,FistCore.Core.DbmsType,System.Text.StringBuilder,FistCore.Core.DbParameterCollection)">
            <summary>Renders UPDATE statement if it can be executed as a single statement. Does nothing if multiple atomic statements are required to execute the task.</summary>
            <param name="update">Update statement.</param>
            <param name="dbms">Target DBMS.</param>
            <param name="output">StringBuilder to which the SQL code is appended.</param>
            <param name="parameters">SQL parameter collection to which the object's and its children's parameters are added. After the rendering is done the collection contains all parameters with unique names.</param>
        </member>
        <member name="P:FistCore.Core.ProviderComponents.IUpdater.ImplementsBulkUpdate">
            <summary>Gets whether bulk updates are implemented/supported.</summary>
        </member>
        <member name="M:FistCore.Core.ProviderComponents.GenericUpdater.RenderUpdate(FistCore.Core.UpdateStatement,FistCore.Core.DbmsType,System.Text.StringBuilder,FistCore.Core.DbParameterCollection)">
            <summary>Render UPDATE statement if source data doesn't belong to tables other than taret table. Does nothing if bulk update statement is passed as parameter.</summary>
        </member>
        <member name="M:FistCore.Core.ProviderComponents.GenericUpdater.Execute(FistCore.Core.UpdateStatement,FistCore.Core.DbmsType,FistCore.Core.IConnectionProvider,FistCore.Core.CommandExecutionStatistics@,System.Int32)">
            <summary>Executes <see cref="T:FistCore.Core.UpdateStatement"/>. Bulk updates are executed in multiple round trips - one update at a time.</summary>
        </member>
        <member name="M:FistCore.Core.ProviderComponents.GenericUpdater.RenderSelect(FistCore.Core.UpdateStatement,FistCore.Core.DbmsType,System.Text.StringBuilder,FistCore.Core.DbParameterCollection)">
            <summary>Creates a <see cref="T:FistCore.Core.SelectStatement"/> that retrieves data that is to be updated. <b>null</b> if data dont't have to be fetched, ie. if bulk update is supported when using multiple tables.</summary>
        </member>
        <member name="P:FistCore.Core.ProviderComponents.GenericUpdater.ImplementsBulkUpdate">
            <summary>Returns <b>false</b>. Updates that use source columns from multiple tables are executed as atomic updates, one row at a time.</summary>
        </member>
        <member name="T:FistCore.Core.SqlServer.SqlServerUpdater">
            <summary>Renders and executes update statements for SQL Server. Supports bulk update.</summary>
        </member>
        <member name="M:FistCore.Core.SqlServer.SqlServerUpdater.RenderUpdate(FistCore.Core.UpdateStatement,FistCore.Core.DbmsType,System.Text.StringBuilder,FistCore.Core.DbParameterCollection)">
            <summary>Renders UPDATE statement.</summary>
        </member>
        <member name="M:FistCore.Core.SqlServer.SqlServerUpdater.Execute(FistCore.Core.UpdateStatement,FistCore.Core.DbmsType,FistCore.Core.IConnectionProvider,FistCore.Core.CommandExecutionStatistics@,System.Int32)">
            <summary>Executes <see cref="T:FistCore.Core.UpdateStatement"/>.</summary>
        </member>
        <member name="M:FistCore.Core.SqlServer.SqlServerUpdater.RenderSelect(FistCore.Core.UpdateStatement,FistCore.Core.DbmsType,System.Text.StringBuilder,FistCore.Core.DbParameterCollection)">
            <summary>Not implemented. Does nothing because bulk update is supported for SQL Server.</summary>
        </member>
        <member name="P:FistCore.Core.SqlServer.SqlServerUpdater.ImplementsBulkUpdate">
            <summary>Returns <b>true</b>. Bulk update is implemented for SQL Server.</summary>
        </member>
        <member name="T:FistCore.Core.UpdateExpressionType">
            <summary>Enumerates supported update/set expression type.</summary>
        </member>
        <member name="F:FistCore.Core.UpdateExpressionType.Value">
            <summary>An expression that sets a provider value/paremeter to target column.</summary>
        </member>
        <member name="F:FistCore.Core.UpdateExpressionType.Null">
            <summary>An expression that sets a NULL value to target column.</summary>
        </member>
        <member name="F:FistCore.Core.UpdateExpressionType.OtherColumn">
            <summary>An expression that copies a value from other column to target column.</summary>
        </member>
        <member name="T:FistCore.Core.UpdateExpression">
            <summary>
            Represents a column which is to be changed and an expression that computes/contains the new value.	
            </summary>
            <remarks><see cref="T:FistCore.Core.UpdateExpression"/> objects may be instantiated only by <see cref="T:FistCore.Core.UpdateExpressionFactory"/> class.
            Constructors are not public.</remarks>
        </member>
        <member name="M:FistCore.Core.UpdateExpression.#ctor(FistCore.Core.UpdateExpressionType,FistCore.Core.IDbColumn,FistCore.Core.DbColumnCollection,System.Object,FistCore.Core.SqlItemType)">
            <summary>
            Creates a new SET expression.
            </summary>
            <param name="expressionType">Expression type.</param>
            <param name="column">Column which is to be changed.</param>
            <param name="sourceColumns">Columns required by the expression to compute the new value.
            Required to properly render the FROM clause when columns from other tables are used. 
            <b>Null</b> if the expression doesn't use any columns.</param>
            <param name="item">SQL item that computes/contains the new value.</param>
            <param name="itemType">Item type.</param>
        </member>
        <member name="M:FistCore.Core.UpdateExpression.#ctor(FistCore.Core.IDbColumn,System.Object)">
            <summary>
            Creates a new SET expression that sets the given value.
            Throws exception if the value is <b>null</b>.
            </summary>
            <param name="column">Column which is to be changed.</param>
            <param name="value">New value. Cannot be <b>null</b>.</param>
        </member>
        <member name="M:FistCore.Core.UpdateExpression.Render(FistCore.Core.DbmsType,System.Text.StringBuilder,FistCore.Core.DbParameterCollection)">
            <summary>
            Renders this expression.
            </summary>
            <param name="dbms">Target DBMS.</param>
            <param name="output">StringBuilder to which SQL is appended.</param>
            <param name="parameters">SQL parameter collection to which the object's and its children's
            parameters are added. After the rendering is done the collection contains all parameters with unique names.</param>
        </member>
        <member name="P:FistCore.Core.UpdateExpression.Item">
            <summary>
            Gets contained item.
            </summary>
        </member>
        <member name="P:FistCore.Core.UpdateExpression.ItemType">
            <summary>
            Gets item type.
            </summary>
        </member>
        <member name="P:FistCore.Core.UpdateExpression.DbType">
            <summary>
            Gets the SQL data type. DbType.Object if unknown.
            </summary>
        </member>
        <member name="P:FistCore.Core.UpdateExpression.DataType">
            <summary>
            Gets .NET type. Object if unknown.
            </summary>
        </member>
        <member name="P:FistCore.Core.UpdateExpression.Alias">
            <summary>
            Gets the item's alias/name. Always <b>null</b>.
            </summary>
        </member>
        <member name="P:FistCore.Core.UpdateExpression.Column">
            <summary>
            Gets the column that contains the will be updated.
            </summary>
        </member>
        <member name="P:FistCore.Core.UpdateExpression.SourceColumns">
            <summary>
            Gets the columns required by the expression to compute the new value.
            Empty (length == 0) if no source columns are required.
            </summary>
        </member>
        <member name="P:FistCore.Core.UpdateExpression.ExpressionType">
            <summary>
            Gets the expression type.
            </summary>
        </member>
        <member name="T:FistCore.Core.UpdateExpressionFactory">
            <summary>
            Provides methods that create typical SET expressions used by UPDATE statement.
            </summary>
        </member>
        <member name="M:FistCore.Core.UpdateExpressionFactory.Value(FistCore.Core.IDbColumn,System.Object)">
            <summary>
            Creates a new update expression that sets the given value.		
            </summary>
            <param name="column">Column which is to be changed.</param>
            <param name="newValue">New value. May be <b>null</b>.</param>
            <returns>Expression.</returns>
        </member>
        <member name="M:FistCore.Core.UpdateExpressionFactory.Null(FistCore.Core.IDbColumn)">
            <summary>
            Creates a new update expression that changes a column to <b>null</b>.
            </summary>
            <param name="column">Column which is to be changed.</param>
            <returns>Expression.</returns>
        </member>
        <member name="M:FistCore.Core.UpdateExpressionFactory.OtherColumn(FistCore.Core.IDbColumn,FistCore.Core.IDbColumn)">
            <summary>
            Creates a new update expression that copies the value from another column.
            </summary>
            <param name="targetColumn">Column which is to be changed.</param>
            <param name="sourceColumn">Source column that contains the new value. 
            May belong to same or other table which is joined through <see cref="P:FistCore.Core.UpdateStatement.Where"/> property.</param>
            <returns>Expression.</returns>
        </member>
        <member name="T:FistCore.Core.UpdateList">
            <summary>
            The list of columns to be updated and expressions that compute/contain new values.
            <seealso cref="T:FistCore.Core.UpdateStatement"/>
            </summary>
        </member>
        <member name="M:FistCore.Core.UpdateList.#ctor">
            <summary>
            Initializes a new instance of the UpdateList class.
            </summary>
        </member>
        <member name="M:FistCore.Core.UpdateList.#ctor(FistCore.Core.IDbColumn,System.Object)">
            <summary>
            Initializes a new instance of the UpdateList class.
            </summary>
            <param name="column">First column in the UpdateList which is to be changed.</param>
            <param name="value">New value of the specified field. May be <b>null</b>.</param>
            <remarks>Initializes a new instance of the UpdateList class and sets the first expression.</remarks>
        </member>
        <member name="M:FistCore.Core.UpdateList.Add(FistCore.Core.UpdateExpression)">
            <summary>
            Adds a SET expression to the list.
            </summary>
            <param name="setExpression">SET expression.</param>
        </member>
        <member name="M:FistCore.Core.UpdateList.Add(FistCore.Core.IDbColumn,System.Object)">
            <summary>
            Adds a SET expression to the list.
            </summary>
            <param name="column">Column which is to be changed. <b>Null</b> is not allowed.</param>
            <param name="value">New value of the specified field. May be <b>null</b>.</param>
        </member>
        <member name="M:FistCore.Core.UpdateList.Add(FistCore.Core.IDbColumn,FistCore.Core.IDbColumn)">
            <summary>
            Adds a SET expression to the list.
            </summary>
            <param name="targetColumn">Column which is to be changed. <b>Null</b> is not allowed.</param>
            <param name="sourceColumn">Source column that contains the new value. <b>Null</b> is not allowed.</param>
            <remarks>Copies value of the source column into the target column.</remarks>
        </member>
        <member name="M:FistCore.Core.UpdateList.Clear">
            <summary>
            Removes all expressions from the collection.
            </summary>
        </member>
        <member name="M:FistCore.Core.UpdateList.GetEnumerator">
            <summary>
            Gets an enumerator that can iterate through UpdateList.
            </summary>
        </member>
        <member name="M:FistCore.Core.UpdateList.System#Collections#Generic#IEnumerable{FistCore#Core#UpdateExpression}#GetEnumerator">
            <summary>
            Gets an enumerator that can iterate through UpdateList.
            </summary>
        </member>
        <member name="P:FistCore.Core.UpdateList.Count">
            <summary>
            Gets the number or SET expressions in this collection.
            </summary>
        </member>
        <member name="P:FistCore.Core.UpdateList.Item(System.Int32)">
            <summary>
            Gets the expression at the specified position.
            </summary>
        </member>
        <member name="T:FistCore.Core.IPropertyCollection">
            <summary>Represents a read-only collection of textual key/value pairs.</summary>
        </member>
        <member name="P:FistCore.Core.IPropertyCollection.Item(System.String)">
            <summary>Gets or the element with the specified key.</summary>
            <value>The element with the specified key or <b>null</b> if the specified key does not exist.</value>
        </member>
        <member name="T:FistCore.Core.PropertyCollection">
            <summary>Represents a read-only collection of textual key/value pairs.</summary>
        </member>
        <member name="M:FistCore.Core.PropertyCollection.#ctor(System.Collections.Generic.Dictionary{System.String,System.String})">
            <summary>Initializes a new instance of <b>PropertyCollection</b> class.</summary>
            <param name="properties">A dictionary which contains property names and values.</param>
        </member>
        <member name="M:FistCore.Core.PropertyCollection.System#Collections#IEnumerable#GetEnumerator">
            <summary>Returns an enumerator that iterates through a collection.</summary>
            <value>An IEnumerator object that can be used to iterate through the collection.</value>
        </member>
        <member name="M:FistCore.Core.PropertyCollection.CopyTo(System.Array,System.Int32)">
            <summary>Copies the elements of the collection to an Array, starting at a particular Array index.</summary>
            <param name="array">The one-dimensional Array that is the destination of the elements copied from ICollection. The Array must have zero-based indexing.</param>
            <param name="index">The zero-based index in array at which copying begins.</param>
        </member>
        <member name="M:FistCore.Core.PropertyCollection.CopyTo(System.Collections.Generic.KeyValuePair{System.String,System.String}[],System.Int32)">
            <summary>Copies the elements of the collection to an Array, starting at a particular Array index.</summary>
            <param name="array">The one-dimensional Array that is the destination of the elements copied from ICollection. The Array must have zero-based indexing.</param>
            <param name="index">The zero-based index in array at which copying begins.</param>
        </member>
        <member name="M:FistCore.Core.PropertyCollection.GetEnumerator">
            <summary>Returns an enumerator that iterates through the collection.</summary>
            <value>An enumerator that can be used to iterate through the collection.</value>
        </member>
        <member name="P:FistCore.Core.PropertyCollection.Item(System.String)">
            <summary>Gets or the element with the specified key.</summary>
            <value>The element with the specified key or <b>null</b> if the specified key does not exist.</value>
        </member>
        <member name="P:FistCore.Core.PropertyCollection.Count">
            <summary>Gets the number of elements contained in the collection.</summary>
            <value>The number of elements contained in the collection.</value>
        </member>
        <member name="P:FistCore.Core.PropertyCollection.System#Collections#ICollection#IsSynchronized">
            <summary>Gets a value indicating whether access to the collection is synchronized (thread safe).</summary>
            <value><b>true</b> if access to the collection is synchronized (thread safe); otherwise, <b>false</b>.</value>
        </member>
        <member name="P:FistCore.Core.PropertyCollection.System#Collections#ICollection#SyncRoot">
            <summary>Gets an object that can be used to synchronize access to the collection.</summary>
            <value>An object that can be used to synchronize access to the collection.</value>
        </member>
        <member name="T:FistCore.Core.DBTypeUtil">
            <summary>
            Provides static methods for type conversions and testing.
            </summary>
        </member>
        <member name="M:FistCore.Core.DBTypeUtil.NetTypeFrom(System.Data.DbType)">
            <summary>
            Determines compatibile .NET type for the given DbType.
            </summary>
            <param name="dbType">DbType.</param>
            <returns>.NET type.</returns>
        </member>
        <member name="M:FistCore.Core.DBTypeUtil.NetTypeFrom(System.Data.SqlDbType)">
            <summary>
            Determines compatibile .NET type for the given SqlDbType.
            </summary>
            <param name="sqlDbType">SqlDbType.</param>
            <returns>.NET type.</returns>
        </member>
        <member name="M:FistCore.Core.DBTypeUtil.DbTypeFrom(System.Type)">
            <summary>
            Determines compatibile DbType type for the given .NET type.
            </summary>
            <param name="dotNetType">.NET type.</param>
            <returns>DbType.</returns>
        </member>
        <member name="M:FistCore.Core.DBTypeUtil.IsInteger(System.Type)">
            <summary>
            Indicates whether the given type is an integer number (Int32, Byte, Long etc.).
            </summary>
            <param name="t">Type to be tested.</param>
            <returns>True if a given type is an integral type; false otherwise.</returns>
        </member>
        <member name="M:FistCore.Core.DBTypeUtil.IsFloatingPointNumber(System.Type)">
            <summary>
            Indicates wheter the given type is a floating point number (Single, Double, Decimal).
            </summary>
            <param name="t">Type to be tested.</param>
            <returns>True if a given type is an integral type; false otherwise.</returns>
        </member>
        <member name="M:FistCore.Core.DBTypeUtil.IsNumber(System.Type)">
            <summary>
            Indicates whether the given type is a number (integer or real number).
            </summary>
            <param name="t">Type to be tested.</param>
            <returns>True if a given type is an integral type; false otherwise.</returns>
        </member>
        <member name="M:FistCore.Core.DBTypeUtil.IsDate(System.Type)">
            <summary>
            Indicates whether the given type is a date type.
            </summary>
            <param name="t">Type to be tested.</param>
            <returns>True if a given type is an integral type; false otherwise.</returns>
        </member>
        <member name="M:FistCore.Core.DBTypeUtil.IsText(System.Type)">
            <summary>
            Indicates whether the given type is textual (String, Char, Char[]).
            </summary>
            <param name="t">Type to be tested.</param>
            <returns>True if a given type is an integral type; false otherwise.</returns>
        </member>
        <member name="T:FistCore.Core.UpdateStatement">
            <summary>
            Changes existing data in a table.
            </summary>
            <example>
            The following example updates the phone number of the employee with the specified primary key (EmployeeID) value.
            <code>
            public void UpdateEmployeesPhoneNumber(int employeeId, string newPhone)
            {
            	//	UPDATE	Employees 
            	//	SET		HomePhone = @newPhone
            	//	WHERE	Employees.EmployeeID = @employeeId
            
            	EmployeesMeta employees = new EmployeesMeta();
            	UpdateStatement update = new UpdateStatement(employees);
            	update.UpdateList.Add(employees.HomePhone, newPhone);
            	update.Where.Add(PredicateFactory.Compare(employees.EmployeeID, "=", employeeId));
            
            	update.Execute();
            }
            </code>
            </example>
        </member>
        <member name="M:FistCore.Core.UpdateStatement.#ctor(FistCore.Core.IDbTable)">
            <summary>
            Creates a new UPDATE statement that updates rows in the given table.
            </summary>
            <param name="table">The table to update.</param>
        </member>
        <member name="M:FistCore.Core.UpdateStatement.#ctor(FistCore.Core.IDbTable,FistCore.Core.IDbColumn,System.Object)">
            <summary>
            Creates a new UPDATE statement that updates rows in the given table.
            </summary>
            <param name="table">The table to update.</param>
            <param name="columnToUpdate">First columns in the <see cref="P:FistCore.Core.UpdateStatement.UpdateList"/>. Additional items may be specified in <see cref="P:FistCore.Core.UpdateStatement.UpdateList"/> collection.</param>
            <param name="newValue">New value of the specified field. May be <b>null</b>.</param>
        </member>
        <member name="M:FistCore.Core.UpdateStatement.Render(FistCore.Core.DbmsType,System.Text.StringBuilder,FistCore.Core.DbParameterCollection)">
            <summary>
            Renders UPDATE statement.
            </summary>
            <param name="dbms">Target DBMS.</param>
            <param name="output">StringBuilder to which SQL is appended.</param>
            <param name="parameters">SQL parameter collection to which the object's and its children's
            parameters are added. After the rendering is done the collection contains all parameters with unique names.</param>
        </member>
        <member name="M:FistCore.Core.UpdateStatement.Execute">
            <summary>
            Executes the UPDATE command.
            </summary>
            <returns>The number of rows affected.</returns>
        </member>
        <member name="M:FistCore.Core.UpdateStatement.Execute(FistCore.Core.IConnectionProvider)">
            <summary>
            Executes the UPDATE command. Uses the given connection provider.
            </summary>
            <param name="conn">Connection provider.</param>
            <returns>The number of rows affected.</returns>
        </member>
        <member name="P:FistCore.Core.UpdateStatement.Table">
            <summary>
            Gets the table to update.
            </summary>
        </member>
        <member name="P:FistCore.Core.UpdateStatement.UpdateList">
            <summary>
            Gets or sets the list of columns to be updated.
            </summary>
        </member>
        <member name="P:FistCore.Core.UpdateStatement.Where">
            <summary>
            Gets or sets the search condition which limits the number of rows that are updated.
            </summary>
        </member>
        <member name="P:FistCore.Core.UpdateStatement.Relations">
            <summary>
            Gets or sets the <see cref="T:FistCore.Core.RelationBucket"/> that contains the relations used by this statement.
            Required when the SelectStatement retrieves columns from multiple tables.
            </summary>
        </member>
    </members>
</doc>
